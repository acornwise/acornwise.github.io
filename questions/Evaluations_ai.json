[
  {
    "id": "eval_001",
    "title": "Daily Temperatures",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a list of daily temperatures `T`, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. This can be solved efficiently with a monotonic stack.\n\n**Constraints**\nList has 1 to 20 temperatures, values 30-100.\n\nInput format:\nSpace-separated integers for temperatures.\n\nOutput format:\nSpace-separated integers for the waiting days.",
    "starter_code": "# Solve the daily temperatures problem.",
    "test_cases": [
      {
        "input": [
          "73 74 75 71 69 72 76 73"
        ],
        "expected_output": "1 1 4 2 1 1 0 0"
      },
      {
        "input": [
          "50 40 30"
        ],
        "expected_output": "0 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_002",
    "title": "Longest Substring with K Distinct Characters",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string, find the length of the longest substring `T` that contains at most `k` distinct characters. This is a classic sliding window problem.\n\n**Constraints**\nString length 1 to 50, contains lowercase English letters. `k` is between 1 and 26.\n\nInput format:\nFirst line: integer `k`.\nSecond line: the string.\n\nOutput format:\nAn integer for the length of the longest substring.",
    "starter_code": "# Find the longest substring with at most K distinct characters.",
    "test_cases": [
      {
        "input": [
          "2",
          "eceba"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "abaccc"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0003",
    "title": "Prime Number Checker",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and determines if it is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n**Constraints**\nInput integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Prime\" or \"Not Prime\".",
    "starter_code": "# Write a program to check if a given number is prime.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "Prime"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "Not Prime"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0004",
    "title": "Factorial Calculator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the factorial of a non-negative integer. The factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n.\n\n**Constraints**\nInput integer will be between 0 and 15.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the factorial.",
    "starter_code": "# Write a program to calculate the factorial of a number.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0005",
    "title": "Fibonacci Sequence Generator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that generates the first N numbers in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.\n\n**Constraints**\nN will be between 1 and 20.\n\nInput format:\nA single integer N.\n\nOutput format:\nA space-separated string of the first N Fibonacci numbers.",
    "starter_code": "# Write a program to generate the first N Fibonacci numbers.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "0 1 1 2 3 5 8"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0006",
    "title": "List Sum and Average",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and calculates both their sum and their average. The average should be a floating-point number.\n\n**Constraints**\nThe list will contain between 1 and 100 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nTwo lines: the first line with the sum (integer), the second line with the average (float, rounded to 2 decimal places).",
    "starter_code": "# Write a program to calculate the sum and average of a list of numbers.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40"
        ],
        "expected_output": "100\n25.00"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "5\n5.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0007",
    "title": "Vowel and Consonant Counter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and counts the number of vowels (a, e, i, o, u, case-insensitive) and consonants in it. Non-alphabetic characters should be ignored.\n\n**Constraints**\nThe string will contain between 1 and 100 characters.\n\nInput format:\nA single string.\n\nOutput format:\nTwo lines: first line with the count of vowels, second line with the count of consonants.",
    "starter_code": "# Write a program to count vowels and consonants in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "3\n7"
      },
      {
        "input": [
          "Python123"
        ],
        "expected_output": "2\n4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0008",
    "title": "String Reverser",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and prints its reverse.\n\n**Constraints**\nThe string will contain between 1 and 100 characters.\n\nInput format:\nA single string.\n\nOutput format:\nA single string, reversed.",
    "starter_code": "# Write a program to reverse a string.",
    "test_cases": [
      {
        "input": [
          "abcde"
        ],
        "expected_output": "edcba"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "nohtyP"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0009",
    "title": "Anagram Checker",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and determines if they are anagrams of each other. Anagrams are words or phrases formed by rearranging the letters of another, using all the original letters exactly once.\n\n**Constraints**\nStrings will contain only lowercase English letters and be between 1 and 50 characters long.\n\nInput format:\nTwo lines, each with a string.\n\nOutput format:\nA string: \"Anagrams\" or \"Not Anagrams\".",
    "starter_code": "# Write a program to check if two strings are anagrams.",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "Anagrams"
      },
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "Not Anagrams"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0010",
    "title": "Palindrome Number Checker",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and determines if it is a palindrome. A number is a palindrome if it reads the same forwards and backward.\n\n**Constraints**\nInput integer will be between 0 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Palindrome\" or \"Not Palindrome\".",
    "starter_code": "# Write a program to check if a number is a palindrome.",
    "test_cases": [
      {
        "input": [
          "121"
        ],
        "expected_output": "Palindrome"
      },
      {
        "input": [
          "123"
        ],
        "expected_output": "Not Palindrome"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0011",
    "title": "Greatest Common Divisor (GCD)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the greatest common divisor (GCD) of two non-negative integers. The GCD is the largest positive integer that divides both numbers without leaving a remainder.\n\n**Constraints**\nInput integers will be between 0 and 1000.\n\nInput format:\nTwo space-separated integers.\n\nOutput format:\nA single integer representing the GCD.",
    "starter_code": "# Write a program to calculate the GCD of two numbers.",
    "test_cases": [
      {
        "input": [
          "48 18"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "7 5"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0012",
    "title": "Least Common Multiple (LCM)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the least common multiple (LCM) of two positive integers. The LCM is the smallest positive integer that is divisible by both numbers.\n\n**Constraints**\nInput integers will be between 1 and 500.\n\nInput format:\nTwo space-separated integers.\n\nOutput format:\nA single integer representing the LCM.",
    "starter_code": "# Write a program to calculate the LCM of two numbers.",
    "test_cases": [
      {
        "input": [
          "4 6"
        ],
        "expected_output": "12"
      },
      {
        "input": [
          "7 5"
        ],
        "expected_output": "35"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0013",
    "title": "Simple Bank Account Simulation",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a simple bank account with an initial balance and a series of transactions. The program should process deposits and withdrawals, updating the balance. If a withdrawal exceeds the current balance, it should be rejected.\n\n**Constraints**\nInitial balance is a non-negative integer up to 10000.\nTransactions are given as 'D <amount>' for deposit or 'W <amount>' for withdrawal. Amounts are positive integers up to 5000.\nThere will be between 1 and 10 transactions.\n\nInput format:\nFirst line: initial balance.\nSubsequent lines: transactions.\n\nOutput format:\nThe final balance after all transactions.",
    "starter_code": "# Simulate bank account transactions.",
    "test_cases": [
      {
        "input": [
          "1000",
          "D 200",
          "W 500",
          "W 800"
        ],
        "expected_output": "700"
      },
      {
        "input": [
          "500",
          "W 600",
          "D 100"
        ],
        "expected_output": "600"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0014",
    "title": "Word Frequency Counter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and counts the frequency of each word. Words should be case-insensitive, and punctuation should be ignored. Output the words and their counts in alphabetical order.\n\n**Constraints**\nThe sentence will contain between 1 and 20 words.\nWords consist of English letters.\n\nInput format:\nA single string (sentence).\n\nOutput format:\nEach word and its count on a new line, separated by a space, sorted alphabetically.",
    "starter_code": "# Count word frequencies in a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello world hello there"
        ],
        "expected_output": "hello 2\nthere 1\nworld 1"
      },
      {
        "input": [
          "apple orange Apple"
        ],
        "expected_output": "apple 2\norange 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0015",
    "title": "Temperature Converter (Celsius to Fahrenheit and vice versa)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts temperatures between Celsius and Fahrenheit. The input will specify the original unit and value, and the program should output the converted value.\n\n**Constraints**\nTemperature values will be between -100 and 100.\nInput format: \"C <value>\" for Celsius or \"F <value>\" for Fahrenheit.\n\nOutput format:\nA single floating-point number, rounded to 2 decimal places.",
    "starter_code": "# Convert temperatures between Celsius and Fahrenheit.",
    "test_cases": [
      {
        "input": [
          "C 25"
        ],
        "expected_output": "77.00"
      },
      {
        "input": [
          "F 32"
        ],
        "expected_output": "0.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0016",
    "title": "Leap Year Checker (Advanced)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that determines if a given year is a leap year. A leap year is divisible by 4, except for century years (years ending in 00) which must be divisible by 400.\n\n**Constraints**\nInput year will be between 1600 and 2400.\n\nInput format:\nA single integer representing the year.\n\nOutput format:\nA string: \"Leap Year\" or \"Not a Leap Year\".",
    "starter_code": "# Check if a year is a leap year.",
    "test_cases": [
      {
        "input": [
          "2000"
        ],
        "expected_output": "Leap Year"
      },
      {
        "input": [
          "1900"
        ],
        "expected_output": "Not a Leap Year"
      },
      {
        "input": [
          "2024"
        ],
        "expected_output": "Leap Year"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0017",
    "title": "Simple Inventory Management",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a basic inventory system. You'll be given an initial stock of an item and then a series of operations: \"ADD <quantity>\" to increase stock, or \"SELL <quantity>\" to decrease stock. Ensure stock never goes below zero.\n\n**Constraints**\nInitial stock is a non-negative integer up to 1000.\nQuantities are positive integers up to 500.\nThere will be between 1 and 10 operations.\n\nInput format:\nFirst line: initial stock.\nSubsequent lines: operations.\n\nOutput format:\nThe final stock count.",
    "starter_code": "# Simulate simple inventory management.",
    "test_cases": [
      {
        "input": [
          "100",
          "ADD 50",
          "SELL 30",
          "SELL 150",
          "ADD 20"
        ],
        "expected_output": "40"
      },
      {
        "input": [
          "50",
          "SELL 60",
          "ADD 10"
        ],
        "expected_output": "60"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0018",
    "title": "Character Counter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a character as input. It should count how many times the specified character appears in the string (case-insensitive).\n\n**Constraints**\nThe string will be between 1 and 100 characters long.\nThe character will be a single English letter.\n\nInput format:\nFirst line: the string.\nSecond line: the character to count.\n\nOutput format:\nA single integer representing the count.",
    "starter_code": "# Count occurrences of a character in a string.",
    "test_cases": [
      {
        "input": [
          "Programming",
          "g"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "Hello World",
          "o"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0019",
    "title": "Matrix Addition (2x2)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that performs element-wise addition of two 2x2 matrices. Each matrix will be provided row by row.\n\n**Constraints**\nMatrix elements will be integers between -100 and 100.\n\nInput format:\nFour lines, each representing a row of the two matrices. The first two lines are for Matrix A, the next two for Matrix B. Elements are space-separated.\nExample: A11 A12\nA21 A22\nB11 B12\nB21 B22\n\nOutput format:\nThe resulting 2x2 matrix, row by row, with elements space-separated.",
    "starter_code": "# Perform matrix addition for 2x2 matrices.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4",
          "5 6",
          "7 8"
        ],
        "expected_output": "6 8\n10 12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0020",
    "title": "Reverse Words in a Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and reverses the order of words in it, but keeps the words themselves intact. For example, \"Hello World\" becomes \"World Hello\".\n\n**Constraints**\nThe sentence will contain between 1 and 10 words.\nWords consist of English letters and are separated by single spaces.\n\nInput format:\nA single string (sentence).\n\nOutput format:\nA single string with words reversed.",
    "starter_code": "# Reverse words in a sentence.",
    "test_cases": [
      {
        "input": [
          "Python is fun"
        ],
        "expected_output": "fun is Python"
      },
      {
        "input": [
          "One two three"
        ],
        "expected_output": "three two One"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0021",
    "title": "Simple Calculator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nCreate a program that acts as a simple calculator. It should take two numbers and an operator (+, -, *, /) as input and perform the corresponding operation. Division by zero should output an error message.\n\n**Constraints**\nNumbers will be integers between -1000 and 1000.\nOperator will be one of '+', '-', '*', '/'.\n\nInput format:\nThree lines: first number, operator, second number.\n\nOutput format:\nA single integer result, or \"Error: Division by zero\" if applicable.",
    "starter_code": "# Implement a simple calculator.",
    "test_cases": [
      {
        "input": [
          "10",
          "+",
          "5"
        ],
        "expected_output": "15"
      },
      {
        "input": [
          "10",
          "/",
          "0"
        ],
        "expected_output": "Error: Division by zero"
      },
      {
        "input": [
          "7",
          "*",
          "3"
        ],
        "expected_output": "21"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0022",
    "title": "List Element Remover",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a specific integer to remove as input. It should remove all occurrences of that integer from the list and print the modified list.\n\n**Constraints**\nThe list will contain between 1 and 20 integers.\nIntegers will be between -100 and 100.\nThe integer to remove will be between -100 and 100.\n\nInput format:\nFirst line: space-separated integers for the list.\nSecond line: integer to remove.\n\nOutput format:\nSpace-separated integers of the modified list. If the list becomes empty, print \"Empty List\".",
    "starter_code": "# Remove all occurrences of an element from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4",
          "2"
        ],
        "expected_output": "1 3 4"
      },
      {
        "input": [
          "5 5 5",
          "5"
        ],
        "expected_output": "Empty List"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0023",
    "title": "Finding the Smallest and Largest in a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and finds the smallest and largest numbers in the list.\n\n**Constraints**\nThe list will contain between 1 and 100 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nTwo lines: first line with the smallest number, second line with the largest number.",
    "starter_code": "# Find the smallest and largest numbers in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 2 15"
        ],
        "expected_output": "2\n20"
      },
      {
        "input": [
          "-1 -5 0"
        ],
        "expected_output": "-5\n0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0024",
    "title": "Count Even and Odd Numbers in a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and counts how many even and odd numbers are in the list.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between 0 and 1000.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nTwo lines: first line with the count of even numbers, second line with the count of odd numbers.",
    "starter_code": "# Count even and odd numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "3\n3"
      },
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "3\n0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0025",
    "title": "Check for Duplicates in a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and determines if it contains any duplicate values.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA string: \"Contains Duplicates\" or \"No Duplicates\".",
    "starter_code": "# Check for duplicates in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "No Duplicates"
      },
      {
        "input": [
          "1 2 3 2 4"
        ],
        "expected_output": "Contains Duplicates"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0026",
    "title": "Unique Elements from a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and prints only the unique elements in the order they first appear.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nSpace-separated unique integers.",
    "starter_code": "# Extract unique elements from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4 1"
        ],
        "expected_output": "1 2 3 4"
      },
      {
        "input": [
          "5 5 5 5"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0027",
    "title": "Grade Calculator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates a student's final grade based on a percentage. Use the following scale:\n90-100: A\n80-89: B\n70-79: C\n60-69: D\nBelow 60: F\n\n**Constraints**\nPercentage will be an integer between 0 and 100.\n\nInput format:\nA single integer (percentage).\n\nOutput format:\nA single character representing the grade.",
    "starter_code": "# Calculate student grade based on percentage.",
    "test_cases": [
      {
        "input": [
          "85"
        ],
        "expected_output": "B"
      },
      {
        "input": [
          "55"
        ],
        "expected_output": "F"
      },
      {
        "input": [
          "90"
        ],
        "expected_output": "A"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0028",
    "title": "Area of a Circle",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the area of a circle given its radius. Use \u03c0 (pi) as 3.14159.\n\n**Constraints**\nRadius will be a positive integer between 1 and 100.\n\nInput format:\nA single integer (radius).\n\nOutput format:\nA single floating-point number, rounded to 2 decimal places.",
    "starter_code": "# Calculate the area of a circle.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "78.54"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "314.16"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0029",
    "title": "Volume of a Sphere",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the volume of a sphere given its radius. Use \u03c0 (pi) as 3.14159.\n\n**Constraints**\nRadius will be a positive integer between 1 and 50.\n\nInput format:\nA single integer (radius).\n\nOutput format:\nA single floating-point number, rounded to 2 decimal places.",
    "starter_code": "# Calculate the volume of a sphere.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "113.10"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "4.19"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0030",
    "title": "Sum of Digits",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and calculates the sum of its digits.\n\n**Constraints**\nInput integer will be between 0 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the sum of digits.",
    "starter_code": "# Calculate the sum of digits of a number.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "9876"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0031",
    "title": "Caesar Cipher Encoder",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a Caesar cipher encoder. The program should take a string and a shift value (an integer) as input. It should shift each alphabetic character by the given value, wrapping around the alphabet if necessary. Non-alphabetic characters should remain unchanged.\n\n**Constraints**\nThe string will contain between 1 and 50 characters.\nShift value will be an integer between 1 and 25.\n\nInput format:\nFirst line: the string.\nSecond line: the shift value.\n\nOutput format:\nThe encoded string.",
    "starter_code": "# Implement Caesar cipher encoder.",
    "test_cases": [
      {
        "input": [
          "abc",
          "3"
        ],
        "expected_output": "def"
      },
      {
        "input": [
          "XYZ",
          "3"
        ],
        "expected_output": "ABC"
      },
      {
        "input": [
          "Hello World!",
          "5"
        ],
        "expected_output": "Mjqqt Btwqi!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0032",
    "title": "Matrix Multiplication (2x2)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that performs matrix multiplication for two 2x2 matrices. Each matrix will be provided row by row.\n\n**Constraints**\nMatrix elements will be integers between -10 and 10.\n\nInput format:\nFour lines, each representing a row of the two matrices. The first two lines are for Matrix A, the next two for Matrix B. Elements are space-separated.\nExample: A11 A12\nA21 A22\nB11 B12\nB21 B22\n\nOutput format:\nThe resulting 2x2 matrix, row by row, with elements space-separated.",
    "starter_code": "# Perform matrix multiplication for 2x2 matrices.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4",
          "5 6",
          "7 8"
        ],
        "expected_output": "19 22\n43 50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0033",
    "title": "Check if a String Contains Only Digits",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and checks if all characters in the string are digits. Return \"True\" if all are digits, \"False\" otherwise.\n\n**Constraints**\nThe string length will be between 1 and 50.\n\nInput format:\nA single string.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Check if a string contains only digits.",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "123a4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0034",
    "title": "Remove Vowels from a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and returns a new string with all vowels (a, e, i, o, u, case-insensitive) removed.\n\n**Constraints**\nThe string length will be between 1 and 100.\n\nInput format:\nA single string.\n\nOutput format:\nA new string with vowels removed.",
    "starter_code": "# Remove vowels from a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "Hll Wrld"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "Pythn"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0035",
    "title": "Check if a Number is Perfect",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper positive divisors (excluding the number itself).\n\n**Constraints**\nInput integer will be between 1 and 10000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Perfect Number\" or \"Not a Perfect Number\".",
    "starter_code": "# Check if a number is a perfect number.",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "Perfect Number"
      },
      {
        "input": [
          "28"
        ],
        "expected_output": "Perfect Number"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "Not a Perfect Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0036",
    "title": "Find All Divisors of a Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and prints all of its positive divisors (factors) in ascending order.\n\n**Constraints**\nInput integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nSpace-separated integers representing the divisors.",
    "starter_code": "# Find all divisors of a number.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "1 2 3 4 6 12"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "1 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0037",
    "title": "Guess the Number Game",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a simple \"Guess the Number\" game. The program generates a random number between 1 and 100. The user makes guesses, and the program provides hints (\"Too high\", \"Too low\", or \"Correct!\"). The program should also count the number of guesses.\n\n**Constraints**\nFor evaluation, the random number will be fixed at 42.\nUser inputs will be integers between 1 and 100.\nThere will be at most 10 guesses.\n\nInput format:\nMultiple lines, each with a guess.\n\nOutput format:\nFor each guess, a hint. After a correct guess, output \"Correct!\" and then the total number of guesses on a new line.",
    "starter_code": "# Simulate a Guess the Number game.",
    "test_cases": [
      {
        "input": [
          "50",
          "20",
          "42"
        ],
        "expected_output": "Too high\nToo low\nCorrect!\n3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0038",
    "title": "Rock, Paper, Scissors",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a game of Rock, Paper, Scissors between two players. The program takes two choices as input and determines the winner based on the rules:\nRock beats Scissors\nScissors beats Paper\nPaper beats Rock\nSame choices result in a Tie.\n\n**Constraints**\nChoices will be \"Rock\", \"Paper\", or \"Scissors\" (case-sensitive).\n\nInput format:\nTwo lines: Player 1's choice, Player 2's choice.\n\nOutput format:\nA string: \"Player 1 Wins\", \"Player 2 Wins\", or \"Tie\".",
    "starter_code": "# Simulate a Rock, Paper, Scissors game.",
    "test_cases": [
      {
        "input": [
          "Rock",
          "Scissors"
        ],
        "expected_output": "Player 1 Wins"
      },
      {
        "input": [
          "Paper",
          "Rock"
        ],
        "expected_output": "Player 1 Wins"
      },
      {
        "input": [
          "Scissors",
          "Scissors"
        ],
        "expected_output": "Tie"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0039",
    "title": "Simple ATM Interface",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a simple ATM. Start with an initial balance. Process commands: \"DEPOSIT <amount>\", \"WITHDRAW <amount>\", \"CHECK_BALANCE\". For withdrawals, ensure sufficient balance. If an invalid command is given, print \"Invalid command\".\n\n**Constraints**\nInitial balance is a non-negative integer up to 10000.\nAmounts are positive integers up to 5000.\nThere will be between 1 and 10 commands.\n\nInput format:\nFirst line: initial balance.\nSubsequent lines: commands.\n\nOutput format:\nFor DEPOSIT/WITHDRAW, print updated balance or \"Insufficient funds\". For CHECK_BALANCE, print current balance. For invalid, print \"Invalid command\".",
    "starter_code": "# Simulate an ATM interface.",
    "test_cases": [
      {
        "input": [
          "1000",
          "DEPOSIT 500",
          "WITHDRAW 200",
          "CHECK_BALANCE",
          "WITHDRAW 2000"
        ],
        "expected_output": "1500\n1300\n1300\nInsufficient funds"
      },
      {
        "input": [
          "500",
          "HELLO"
        ],
        "expected_output": "Invalid command"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0040",
    "title": "Password Strength Checker (Basic)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that checks the strength of a given password based on simple rules:\n- At least 8 characters long.\n- Contains at least one uppercase letter.\n- Contains at least one lowercase letter.\n- Contains at least one digit.\nOutput \"Strong\" if all rules are met, otherwise \"Weak\".\n\n**Constraints**\nPassword string length between 1 and 50.\n\nInput format:\nA single string (password).\n\nOutput format:\nA string: \"Strong\" or \"Weak\".",
    "starter_code": "# Check password strength.",
    "test_cases": [
      {
        "input": [
          "Password123"
        ],
        "expected_output": "Strong"
      },
      {
        "input": [
          "password"
        ],
        "expected_output": "Weak"
      },
      {
        "input": [
          "Pass1"
        ],
        "expected_output": "Weak"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0041",
    "title": "Currency Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program to convert an amount from one currency to another. You will be given the amount, the source currency, the target currency, and exchange rates. Assume fixed exchange rates for USD, EUR, JPY: 1 USD = 0.85 EUR, 1 USD = 110 JPY.\n\n**Constraints**\nAmount is a positive integer up to 1000.\nCurrencies are \"USD\", \"EUR\", \"JPY\" (case-sensitive).\n\nInput format:\nThree lines: amount, source currency, target currency.\n\nOutput format:\nA single floating-point number representing the converted amount, rounded to 2 decimal places.",
    "starter_code": "# Convert currency.",
    "test_cases": [
      {
        "input": [
          "100",
          "USD",
          "EUR"
        ],
        "expected_output": "85.00"
      },
      {
        "input": [
          "50",
          "EUR",
          "JPY"
        ],
        "expected_output": "6470.59"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0042",
    "title": "Calculate Simple Interest",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates simple interest. It should take principal amount, interest rate (as a percentage), and time (in years) as input.\nFormula: Simple Interest = (Principal * Rate * Time) / 100\n\n**Constraints**\nPrincipal: 100 to 10000 (integer)\nRate: 1 to 20 (integer)\nTime: 1 to 10 (integer)\n\nInput format:\nThree lines: principal, rate, time.\n\nOutput format:\nA single floating-point number, rounded to 2 decimal places.",
    "starter_code": "# Calculate simple interest.",
    "test_cases": [
      {
        "input": [
          "1000",
          "10",
          "2"
        ],
        "expected_output": "200.00"
      },
      {
        "input": [
          "500",
          "5",
          "1"
        ],
        "expected_output": "25.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0043",
    "title": "Number to Word Converter (Single Digit)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single digit (0-9) as input and converts it into its English word representation.\n\n**Constraints**\nInput will be an integer between 0 and 9.\n\nInput format:\nA single integer.\n\nOutput format:\nA string representing the word for the digit.",
    "starter_code": "# Convert a single digit to its English word.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "Five"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "Zero"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0044",
    "title": "Basic Unit Converter (Length)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nCreate a basic unit converter for length. It should convert between meters (m) and centimeters (cm). The input will specify the value and its original unit, and the program should output the converted value and its new unit.\n\n**Constraints**\nValue will be a positive integer up to 1000.\nUnits are \"m\" or \"cm\" (case-sensitive).\n\nInput format:\nTwo lines: value, unit.\n\nOutput format:\nA single string: \"<converted_value> <new_unit>\", rounded to 2 decimal places for meters.",
    "starter_code": "# Convert length units.",
    "test_cases": [
      {
        "input": [
          "100",
          "cm"
        ],
        "expected_output": "1.00 m"
      },
      {
        "input": [
          "2",
          "m"
        ],
        "expected_output": "200 cm"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0045",
    "title": "Check if a Number is Armstrong",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 3-digit integer as input and determines if it is an Armstrong number. An Armstrong number is a number that is equal to the sum of cubes of its digits.\n\n**Constraints**\nInput integer will be between 100 and 999.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Armstrong Number\" or \"Not an Armstrong Number\".",
    "starter_code": "# Check if a 3-digit number is an Armstrong number.",
    "test_cases": [
      {
        "input": [
          "153"
        ],
        "expected_output": "Armstrong Number"
      },
      {
        "input": [
          "370"
        ],
        "expected_output": "Armstrong Number"
      },
      {
        "input": [
          "123"
        ],
        "expected_output": "Not an Armstrong Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0046",
    "title": "Sum of Even Numbers in a Range",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the sum of all even numbers within a given range (inclusive).\n\n**Constraints**\nStart and end integers will be between 0 and 1000.\nStart will always be less than or equal to end.\n\nInput format:\nTwo space-separated integers: start and end.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum even numbers in a range.",
    "test_cases": [
      {
        "input": [
          "1 10"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3 7"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0047",
    "title": "Sum of Odd Numbers in a Range",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the sum of all odd numbers within a given range (inclusive).\n\n**Constraints**\nStart and end integers will be between 0 and 1000.\nStart will always be less than or equal to end.\n\nInput format:\nTwo space-separated integers: start and end.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum odd numbers in a range.",
    "test_cases": [
      {
        "input": [
          "1 10"
        ],
        "expected_output": "25"
      },
      {
        "input": [
          "3 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 6"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0048",
    "title": "Count Words in a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (sentence) as input and counts the number of words in it. Words are separated by single spaces.\n\n**Constraints**\nThe string will contain between 1 and 100 characters.\n\nInput format:\nA single string.\n\nOutput format:\nA single integer representing the word count.",
    "starter_code": "# Count words in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "Python is fun"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0049",
    "title": "Average of a List (Ignoring non-numeric)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a mixed list of strings and numbers as input. It should calculate the average of only the numeric values in the list. Non-numeric values should be ignored.\n\n**Constraints**\nThe list will contain between 1 and 20 elements.\nNumbers will be integers between -100 and 100.\n\nInput format:\nA space-separated string of mixed types (e.g., \"10 abc 20 30 def\").\n\nOutput format:\nA single floating-point number representing the average of numeric values, rounded to 2 decimal places. If no numeric values, output \"No numeric data\".",
    "starter_code": "# Calculate average of numeric values in a mixed list.",
    "test_cases": [
      {
        "input": [
          "10 abc 20 30 def"
        ],
        "expected_output": "20.00"
      },
      {
        "input": [
          "hello world"
        ],
        "expected_output": "No numeric data"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0050",
    "title": "Find Second Largest Number in a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and finds the second largest number in it. Assume there will always be at least two distinct numbers.\n\n**Constraints**\nThe list will contain between 2 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the second largest number.",
    "starter_code": "# Find the second largest number in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "40"
      },
      {
        "input": [
          "5 5 10 10 20"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0051",
    "title": "Queue Simulation (Enqueue, Dequeue)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a basic queue. The program should process commands: \"ENQUEUE <element>\" to add to the end of the queue, \"DEQUEUE\" to remove from the front of the queue, and \"PRINT_QUEUE\" to display the current queue. If DEQUEUE is called on an empty queue, print \"Queue is empty\".\n\n**Constraints**\nElements are strings (single words).\nThere will be between 1 and 10 commands.\n\nInput format:\nMultiple lines of commands.\n\nOutput format:\nFor DEQUEUE, print the dequeued element or error. For PRINT_QUEUE, print space-separated elements or \"Empty Queue\".",
    "starter_code": "# Simulate a queue.",
    "test_cases": [
      {
        "input": [
          "ENQUEUE A",
          "ENQUEUE B",
          "DEQUEUE",
          "PRINT_QUEUE",
          "DEQUEUE",
          "DEQUEUE"
        ],
        "expected_output": "A\nB\nB\nQueue is empty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0052",
    "title": "Stack Simulation (Push, Pop)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a basic stack. The program should process commands: \"PUSH <element>\" to add to the top of the stack, \"POP\" to remove from the top of the stack, and \"PRINT_STACK\" to display the current stack. If POP is called on an empty stack, print \"Stack is empty\".\n\n**Constraints**\nElements are strings (single words).\nThere will be between 1 and 10 commands.\n\nInput format:\nMultiple lines of commands.\n\nOutput format:\nFor POP, print the popped element or error. For PRINT_STACK, print space-separated elements (top to bottom) or \"Empty Stack\".",
    "starter_code": "# Simulate a stack.",
    "test_cases": [
      {
        "input": [
          "PUSH A",
          "PUSH B",
          "POP",
          "PRINT_STACK",
          "POP",
          "POP"
        ],
        "expected_output": "B\nA\nStack is empty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0053",
    "title": "Decimal to Binary Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a non-negative decimal integer to its binary representation.\n\n**Constraints**\nInput integer will be between 0 and 255.\n\nInput format:\nA single integer (decimal).\n\nOutput format:\nA single string representing the binary number.",
    "starter_code": "# Convert decimal to binary.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "1010"
      },
      {
        "input": [
          "255"
        ],
        "expected_output": "11111111"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0054",
    "title": "Binary to Decimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a binary string (composed of '0's and '1's) to its decimal integer representation.\n\n**Constraints**\nThe binary string length will be between 1 and 8 characters.\n\nInput format:\nA single string (binary).\n\nOutput format:\nA single integer (decimal).",
    "starter_code": "# Convert binary to decimal.",
    "test_cases": [
      {
        "input": [
          "1010"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "11111111"
        ],
        "expected_output": "255"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0055",
    "title": "Smallest Missing Positive Integer",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that finds the smallest missing positive integer in an unsorted array of integers.\n\n**Constraints**\nThe array will contain between 1 and 50 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the smallest missing positive integer.",
    "starter_code": "# Find the smallest missing positive integer.",
    "test_cases": [
      {
        "input": [
          "1 2 0"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3 4 -1 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "7 8 9 11 12"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0056",
    "title": "Check if a String is a Valid Email Address (Basic)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that performs a basic validation of an email address string. It should check for the presence of '@' and '.' characters, and ensure '@' appears before '.' and there's at least one character before '@', between '@' and '.', and after '.'.\n\n**Constraints**\nThe string length will be between 5 and 50.\n\nInput format:\nA single string (email address).\n\nOutput format:\nA string: \"Valid Email\" or \"Invalid Email\".",
    "starter_code": "# Basic email address validation.",
    "test_cases": [
      {
        "input": [
          "test@example.com"
        ],
        "expected_output": "Valid Email"
      },
      {
        "input": [
          "testexample.com"
        ],
        "expected_output": "Invalid Email"
      },
      {
        "input": [
          "@.com"
        ],
        "expected_output": "Invalid Email"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0057",
    "title": "Finding Duplicates in a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and finds all characters that appear more than once (duplicates). Print each unique duplicate character in alphabetical order.\n\n**Constraints**\nThe string length will be between 1 and 100.\n\nInput format:\nA single string.\n\nOutput format:\nA space-separated string of unique duplicate characters, sorted alphabetically. If no duplicates, print \"No Duplicates\".",
    "starter_code": "# Find duplicate characters in a string.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "l o"
      },
      {
        "input": [
          "programming"
        ],
        "expected_output": "g m r"
      },
      {
        "input": [
          "unique"
        ],
        "expected_output": "No Duplicates"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0058",
    "title": "Sum of First N Prime Numbers",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the sum of the first N prime numbers.\n\n**Constraints**\nN will be between 1 and 10.\n\nInput format:\nA single integer N.\n\nOutput format:\nA single integer representing the sum of the first N prime numbers.",
    "starter_code": "# Calculate the sum of the first N prime numbers.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "28"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0059",
    "title": "List Sorting (Ascending)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and sorts them in ascending order.\n\n**Constraints**\nThe list will contain between 1 and 20 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nSpace-separated integers in ascending order.",
    "starter_code": "# Sort a list of integers in ascending order.",
    "test_cases": [
      {
        "input": [
          "5 2 8 1 9"
        ],
        "expected_output": "1 2 5 8 9"
      },
      {
        "input": [
          "10 -5 0"
        ],
        "expected_output": "-5 0 10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0060",
    "title": "List Sorting (Descending)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and sorts them in descending order.\n\n**Constraints**\nThe list will contain between 1 and 20 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nSpace-separated integers in descending order.",
    "starter_code": "# Sort a list of integers in descending order.",
    "test_cases": [
      {
        "input": [
          "5 2 8 1 9"
        ],
        "expected_output": "9 8 5 2 1"
      },
      {
        "input": [
          "10 -5 0"
        ],
        "expected_output": "10 0 -5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0061",
    "title": "Check if a String is a Palindrome (Case-Insensitive)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is a palindrome, ignoring case. A palindrome reads the same forwards and backward.\n\n**Constraints**\nThe string length will be between 1 and 50.\n\nInput format:\nA single string.\n\nOutput format:\nA string: \"Palindrome\" or \"Not Palindrome\".",
    "starter_code": "# Check if a string is a palindrome (case-insensitive).",
    "test_cases": [
      {
        "input": [
          "Madam"
        ],
        "expected_output": "Palindrome"
      },
      {
        "input": [
          "Racecar"
        ],
        "expected_output": "Palindrome"
      },
      {
        "input": [
          "hello"
        ],
        "expected_output": "Not Palindrome"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0062",
    "title": "Remove Spaces from a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and returns a new string with all spaces removed.\n\n**Constraints**\nThe string length will be between 1 and 100.\n\nInput format:\nA single string.\n\nOutput format:\nA new string with spaces removed.",
    "starter_code": "# Remove spaces from a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "HelloWorld"
      },
      {
        "input": [
          "Python is fun"
        ],
        "expected_output": "Pythonisfun"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0063",
    "title": "Calculate the Area of a Rectangle",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the area of a rectangle given its length and width.\n\n**Constraints**\nLength and width will be positive integers between 1 and 100.\n\nInput format:\nTwo lines: length, width.\n\nOutput format:\nA single integer representing the area.",
    "starter_code": "# Calculate the area of a rectangle.",
    "test_cases": [
      {
        "input": [
          "10",
          "5"
        ],
        "expected_output": "50"
      },
      {
        "input": [
          "7",
          "7"
        ],
        "expected_output": "49"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0064",
    "title": "Calculate the Perimeter of a Rectangle",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the perimeter of a rectangle given its length and width.\n\n**Constraints**\nLength and width will be positive integers between 1 and 100.\n\nInput format:\nTwo lines: length, width.\n\nOutput format:\nA single integer representing the perimeter.",
    "starter_code": "# Calculate the perimeter of a rectangle.",
    "test_cases": [
      {
        "input": [
          "10",
          "5"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "7",
          "7"
        ],
        "expected_output": "28"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0065",
    "title": "Decimal to Hexadecimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a non-negative decimal integer to its hexadecimal representation.\n\n**Constraints**\nInput integer will be between 0 and 255.\n\nInput format:\nA single integer (decimal).\n\nOutput format:\nA single string representing the hexadecimal number (uppercase).",
    "starter_code": "# Convert decimal to hexadecimal.",
    "test_cases": [
      {
        "input": [
          "255"
        ],
        "expected_output": "FF"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "A"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0066",
    "title": "Hexadecimal to Decimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a hexadecimal string (composed of 0-9, A-F) to its decimal integer representation.\n\n**Constraints**\nThe hexadecimal string length will be between 1 and 2 characters.\n\nInput format:\nA single string (hexadecimal).\n\nOutput format:\nA single integer (decimal).",
    "starter_code": "# Convert hexadecimal to decimal.",
    "test_cases": [
      {
        "input": [
          "FF"
        ],
        "expected_output": "255"
      },
      {
        "input": [
          "A"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0067",
    "title": "Find the Longest Word in a Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and finds the longest word in it. If there are multiple words of the same maximum length, return the first one encountered.\n\n**Constraints**\nThe sentence will contain between 1 and 20 words.\nWords consist of English letters and are separated by single spaces.\n\nInput format:\nA single string (sentence).\n\nOutput format:\nA single string representing the longest word.",
    "starter_code": "# Find the longest word in a sentence.",
    "test_cases": [
      {
        "input": [
          "The quick brown fox"
        ],
        "expected_output": "quick"
      },
      {
        "input": [
          "A long sentence example"
        ],
        "expected_output": "sentence"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0068",
    "title": "Find the Shortest Word in a Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and finds the shortest word in it. If there are multiple words of the same minimum length, return the first one encountered.\n\n**Constraints**\nThe sentence will contain between 1 and 20 words.\nWords consist of English letters and are separated by single spaces.\n\nInput format:\nA single string (sentence).\n\nOutput format:\nA single string representing the shortest word.",
    "starter_code": "# Find the shortest word in a sentence.",
    "test_cases": [
      {
        "input": [
          "The quick brown fox"
        ],
        "expected_output": "The"
      },
      {
        "input": [
          "A long sentence example"
        ],
        "expected_output": "A"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0069",
    "title": "Counting Uppercase and Lowercase Letters",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and counts the number of uppercase and lowercase English letters in it. Non-alphabetic characters should be ignored.\n\n**Constraints**\nThe string length will be between 1 and 100.\n\nInput format:\nA single string.\n\nOutput format:\nTwo lines: first line with uppercase count, second line with lowercase count.",
    "starter_code": "# Count uppercase and lowercase letters in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "2\n8"
      },
      {
        "input": [
          "PYTHON"
        ],
        "expected_output": "6\n0"
      },
      {
        "input": [
          "python"
        ],
        "expected_output": "0\n6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0070",
    "title": "Calculate Body Mass Index (BMI)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates Body Mass Index (BMI) given weight in kilograms and height in meters. Round the result to 2 decimal places.\nFormula: BMI = weight / (height * height)\n\n**Constraints**\nWeight will be between 20 and 300 (float).\nHeight will be between 1.0 and 2.5 (float).\n\nInput format:\nTwo lines: weight (kg), height (m).\n\nOutput format:\nA single floating-point number representing BMI, rounded to 2 decimal places.",
    "starter_code": "# Calculate BMI.",
    "test_cases": [
      {
        "input": [
          "70",
          "1.75"
        ],
        "expected_output": "22.86"
      },
      {
        "input": [
          "90",
          "1.80"
        ],
        "expected_output": "27.78"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0071",
    "title": "Check if a Triangle is Valid",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three side lengths as input and determines if they can form a valid triangle. A triangle is valid if the sum of any two sides is greater than the third side.\n\n**Constraints**\nSide lengths will be positive integers between 1 and 100.\n\nInput format:\nThree lines: side1, side2, side3.\n\nOutput format:\nA string: \"Valid Triangle\" or \"Invalid Triangle\".",
    "starter_code": "# Check if three side lengths form a valid triangle.",
    "test_cases": [
      {
        "input": [
          "3",
          "4",
          "5"
        ],
        "expected_output": "Valid Triangle"
      },
      {
        "input": [
          "1",
          "2",
          "5"
        ],
        "expected_output": "Invalid Triangle"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0072",
    "title": "Basic File Size Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts file sizes between Kilobytes (KB) and Megabytes (MB). Assume 1 MB = 1024 KB.\n\n**Constraints**\nValue will be a positive integer up to 1000000.\nUnits are \"KB\" or \"MB\" (case-sensitive).\n\nInput format:\nTwo lines: value, unit.\n\nOutput format:\nA single string: \"<converted_value> <new_unit>\", rounded to 2 decimal places for MB.",
    "starter_code": "# Convert file sizes between KB and MB.",
    "test_cases": [
      {
        "input": [
          "1024",
          "KB"
        ],
        "expected_output": "1.00 MB"
      },
      {
        "input": [
          "2",
          "MB"
        ],
        "expected_output": "2048 KB"
      },
      {
        "input": [
          "500",
          "KB"
        ],
        "expected_output": "0.49 MB"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0073",
    "title": "Find the Most Frequent Element in a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and finds the most frequent element. If there's a tie, return the smallest element among the most frequent ones.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the most frequent element.",
    "starter_code": "# Find the most frequent element in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 1 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5 5 10 10"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "7 8 9"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0074",
    "title": "Sum of Elements at Even Indices",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and calculates the sum of elements located at even indices (0, 2, 4, ...).\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum elements at even indices in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "90"
      },
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0075",
    "title": "Sum of Elements at Odd Indices",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and calculates the sum of elements located at odd indices (1, 3, 5, ...).\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum elements at odd indices in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "60"
      },
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0076",
    "title": "Count Vowels in Each Word",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and counts the number of vowels (case-insensitive) in each word. Output each word followed by its vowel count.\n\n**Constraints**\nThe sentence will contain between 1 and 10 words.\nWords consist of English letters and are separated by single spaces.\n\nInput format:\nA single string (sentence).\n\nOutput format:\nEach word and its vowel count on a new line, separated by a space.",
    "starter_code": "# Count vowels in each word of a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "Hello 2\nWorld 1"
      },
      {
        "input": [
          "Python is fun"
        ],
        "expected_output": "Python 2\nis 1\nfun 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0077",
    "title": "Check if a Number is a Power of Two",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is a power of two (i.e., 2^n for some non-negative integer n).\n\n**Constraints**\nInput integer will be between 1 and 1024.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Power of Two\" or \"Not a Power of Two\".",
    "starter_code": "# Check if a number is a power of two.",
    "test_cases": [
      {
        "input": [
          "8"
        ],
        "expected_output": "Power of Two"
      },
      {
        "input": [
          "12"
        ],
        "expected_output": "Not a Power of Two"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "Power of Two"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0078",
    "title": "Collatz Conjecture Sequence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that generates the Collatz sequence for a given positive integer. The rules are:\n- If the number is even, divide it by 2.\n- If the number is odd, multiply it by 3 and add 1.\nThe sequence stops when it reaches 1. Print each number in the sequence.\n\n**Constraints**\nInput integer will be between 1 and 100.\nThe sequence length will not exceed 100 steps for given constraints.\n\nInput format:\nA single integer.\n\nOutput format:\nSpace-separated integers representing the sequence.",
    "starter_code": "# Generate the Collatz sequence.",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "6 3 10 5 16 8 4 2 1"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0079",
    "title": "Sum of Prime Digits",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and calculates the sum of its prime digits (2, 3, 5, 7).\n\n**Constraints**\nInput integer will be between 0 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the sum of prime digits.",
    "starter_code": "# Calculate the sum of prime digits in a number.",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "701"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "89"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0080",
    "title": "Validate a Simple Phone Number Format",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that validates a simple phone number format. It should check if the phone number is a 10-digit string consisting only of digits.\n\n**Constraints**\nPhone number string length will be between 1 and 20.\n\nInput format:\nA single string (phone number).\n\nOutput format:\nA string: \"Valid Phone Number\" or \"Invalid Phone Number\".",
    "starter_code": "# Validate simple phone number format.",
    "test_cases": [
      {
        "input": [
          "1234567890"
        ],
        "expected_output": "Valid Phone Number"
      },
      {
        "input": [
          "123-456-7890"
        ],
        "expected_output": "Invalid Phone Number"
      },
      {
        "input": [
          "12345"
        ],
        "expected_output": "Invalid Phone Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0081",
    "title": "Character Replacement in a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string, an old character, and a new character as input. It should replace all occurrences of the old character with the new character in the string.\n\n**Constraints**\nThe string length will be between 1 and 100.\nCharacters will be single English letters (case-sensitive).\n\nInput format:\nThree lines: original string, old character, new character.\n\nOutput format:\nThe modified string.",
    "starter_code": "# Replace characters in a string.",
    "test_cases": [
      {
        "input": [
          "apple",
          "p",
          "x"
        ],
        "expected_output": "axle"
      },
      {
        "input": [
          "banana",
          "a",
          "o"
        ],
        "expected_output": "bonono"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0082",
    "title": "Check if a String is a Substring",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, a main string and a potential substring, as input. It should determine if the potential substring is present within the main string (case-sensitive).\n\n**Constraints**\nString lengths will be between 1 and 100.\n\nInput format:\nTwo lines: main string, substring.\n\nOutput format:\nA string: \"Substring Found\" or \"Substring Not Found\".",
    "starter_code": "# Check if a string is a substring of another.",
    "test_cases": [
      {
        "input": [
          "Hello World",
          "World"
        ],
        "expected_output": "Substring Found"
      },
      {
        "input": [
          "Python",
          "java"
        ],
        "expected_output": "Substring Not Found"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0083",
    "title": "Concatenate Two Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and concatenates them into a single new list.\n\n**Constraints**\nEach list will contain between 1 and 10 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nTwo lines: space-separated integers for List 1, space-separated integers for List 2.\n\nOutput format:\nSpace-separated integers of the concatenated list.",
    "starter_code": "# Concatenate two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      },
      {
        "input": [
          "10",
          "20 30"
        ],
        "expected_output": "10 20 30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0084",
    "title": "Check if a List is Sorted (Ascending)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and determines if it is sorted in ascending order.\n\n**Constraints**\nThe list will contain between 1 and 20 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA string: \"Sorted\" or \"Not Sorted\".",
    "starter_code": "# Check if a list is sorted in ascending order.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "Sorted"
      },
      {
        "input": [
          "1 3 2 4"
        ],
        "expected_output": "Not Sorted"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0085",
    "title": "Calculate Days Between Two Dates (Simple)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the number of days between two given dates. Assume dates are in YYYY-MM-DD format and are within the same non-leap year (for simplicity, assume all months have 30 days). The second date will always be after or same as the first.\n\n**Constraints**\nYears: 2000-2025.\nMonths: 1-12.\nDays: 1-30.\n\nInput format:\nTwo lines: date1 (YYYY-MM-DD), date2 (YYYY-MM-DD).\n\nOutput format:\nA single integer representing the number of days.",
    "starter_code": "# Calculate days between two dates (simple).",
    "test_cases": [
      {
        "input": [
          "2023-01-01",
          "2023-01-05"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2023-01-01",
          "2023-02-01"
        ],
        "expected_output": "30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0086",
    "title": "String Capitalizer (First Letter of Each Word)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and capitalizes the first letter of each word. Other letters should be lowercase.\n\n**Constraints**\nThe string length will be between 1 and 100.\nWords consist of English letters and are separated by single spaces.\n\nInput format:\nA single string (sentence).\n\nOutput format:\nA single string with each word capitalized.",
    "starter_code": "# Capitalize the first letter of each word in a sentence.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "Hello World"
      },
      {
        "input": [
          "python is fun"
        ],
        "expected_output": "Python Is Fun"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0087",
    "title": "Reverse a List In-Place",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and reverses the order of its elements in-place (without creating a new list).\n\n**Constraints**\nThe list will contain between 1 and 20 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nSpace-separated integers of the reversed list.",
    "starter_code": "# Reverse a list in-place.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0088",
    "title": "Search for an Element in a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a target integer as input. It should determine if the target integer is present in the list.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -100 and 100.\nTarget integer will be between -100 and 100.\n\nInput format:\nFirst line: space-separated integers for the list.\nSecond line: target integer.\n\nOutput format:\nA string: \"Found\" or \"Not Found\".",
    "starter_code": "# Search for an element in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3"
        ],
        "expected_output": "Found"
      },
      {
        "input": [
          "10 20 30",
          "5"
        ],
        "expected_output": "Not Found"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0089",
    "title": "Counting Negative Numbers in a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and counts how many negative numbers are in the list.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the count of negative numbers.",
    "starter_code": "# Count negative numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 -2 3 -4 5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "10 20 0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0090",
    "title": "Generate Multiplication Table",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that generates and prints the multiplication table for a given integer up to 10.\n\n**Constraints**\nInput integer will be between 1 and 12.\n\nInput format:\nA single integer.\n\nOutput format:\nEach multiplication result on a new line in the format \"<number> x <i+1> = <result>\".",
    "starter_code": "# Generate multiplication table.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0091",
    "title": "Check if a Year is a Century Year",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a year as input and determines if it is a century year (a year ending in '00').\n\n**Constraints**\nInput year will be a positive integer.\n\nInput format:\nA single integer (year).\n\nOutput format:\nA string: \"Century Year\" or \"Not a Century Year\".",
    "starter_code": "# Check if a year is a century year.",
    "test_cases": [
      {
        "input": [
          "2000"
        ],
        "expected_output": "Century Year"
      },
      {
        "input": [
          "1999"
        ],
        "expected_output": "Not a Century Year"
      },
      {
        "input": [
          "100"
        ],
        "expected_output": "Century Year"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0092",
    "title": "Calculate the Power of a Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the result of raising a base number to an exponent (base^exponent).\n\n**Constraints**\nBase will be an integer between 1 and 10.\nExponent will be a non-negative integer between 0 and 5.\n\nInput format:\nTwo lines: base, exponent.\n\nOutput format:\nA single integer representing the result.",
    "starter_code": "# Calculate the power of a number.",
    "test_cases": [
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "5",
          "0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "3",
          "4"
        ],
        "expected_output": "81"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0093",
    "title": "String to Uppercase",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and converts all its alphabetic characters to uppercase. Non-alphabetic characters should remain unchanged.\n\n**Constraints**\nThe string length will be between 1 and 100.\n\nInput format:\nA single string.\n\nOutput format:\nA single string in uppercase.",
    "starter_code": "# Convert a string to uppercase.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "HELLO WORLD"
      },
      {
        "input": [
          "Python123"
        ],
        "expected_output": "PYTHON123"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0094",
    "title": "String to Lowercase",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and converts all its alphabetic characters to lowercase. Non-alphabetic characters should remain unchanged.\n\n**Constraints**\nThe string length will be between 1 and 100.\n\nInput format:\nA single string.\n\nOutput format:\nA single string in lowercase.",
    "starter_code": "# Convert a string to lowercase.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "hello world"
      },
      {
        "input": [
          "PYTHON123"
        ],
        "expected_output": "python123"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0095",
    "title": "Finding the Maximum of Three Numbers",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers as input and finds the largest among them.\n\n**Constraints**\nIntegers will be between -1000 and 1000.\n\nInput format:\nThree lines, each with an integer.\n\nOutput format:\nA single integer representing the maximum value.",
    "starter_code": "# Find the maximum of three numbers.",
    "test_cases": [
      {
        "input": [
          "10",
          "20",
          "5"
        ],
        "expected_output": "20"
      },
      {
        "input": [
          "-1",
          "-5",
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0096",
    "title": "Finding the Minimum of Three Numbers",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers as input and finds the smallest among them.\n\n**Constraints**\nIntegers will be between -1000 and 1000.\n\nInput format:\nThree lines, each with an integer.\n\nOutput format:\nA single integer representing the minimum value.",
    "starter_code": "# Find the minimum of three numbers.",
    "test_cases": [
      {
        "input": [
          "10",
          "20",
          "5"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "-1",
          "-5",
          "0"
        ],
        "expected_output": "-5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0097",
    "title": "Sum of Numbers from 1 to N (Inclusive)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input and calculates the sum of all integers from 1 to N (inclusive).\n\n**Constraints**\nN will be between 1 and 1000.\n\nInput format:\nA single integer N.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Calculate the sum of numbers from 1 to N.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "55"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0098",
    "title": "Validate Date Format (YYYY-MM-DD)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and validates if it is in a correct YYYY-MM-DD date format. It should check for correct number of digits and hyphens, and valid ranges for month (1-12) and day (1-31). Do not validate for specific month-day combinations (e.g., Feb 30).\n\n**Constraints**\nThe string length will be 10 characters.\n\nInput format:\nA single string.\n\nOutput format:\nA string: \"Valid Date Format\" or \"Invalid Date Format\".",
    "starter_code": "# Validate YYYY-MM-DD date format.",
    "test_cases": [
      {
        "input": [
          "2023-01-15"
        ],
        "expected_output": "Valid Date Format"
      },
      {
        "input": [
          "2023/01/15"
        ],
        "expected_output": "Invalid Date Format"
      },
      {
        "input": [
          "2023-13-01"
        ],
        "expected_output": "Invalid Date Format"
      },
      {
        "input": [
          "2023-01-32"
        ],
        "expected_output": "Invalid Date Format"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0099",
    "title": "Find the Intersection of Two Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and finds their intersection (common elements). The output should be a space-separated list of unique common elements, sorted in ascending order.\n\n**Constraints**\nEach list will contain between 1 and 20 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nTwo lines: space-separated integers for List 1, space-separated integers for List 2.\n\nOutput format:\nSpace-separated integers of the intersection, sorted. If no common elements, print \"No Intersection\".",
    "starter_code": "# Find the intersection of two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3 4 5 6 7"
        ],
        "expected_output": "3 4 5"
      },
      {
        "input": [
          "1 2",
          "3 4"
        ],
        "expected_output": "No Intersection"
      },
      {
        "input": [
          "1 1 2",
          "1 2 2"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0100",
    "title": "Check if a Number is a Multiple of Another",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers, `number` and `divisor`, as input and determines if `number` is a multiple of `divisor`.\n\n**Constraints**\nBoth integers will be positive, between 1 and 1000.\n\nInput format:\nTwo lines: number, divisor.\n\nOutput format:\nA string: \"Multiple\" or \"Not a Multiple\".",
    "starter_code": "# Check if a number is a multiple of another.",
    "test_cases": [
      {
        "input": [
          "10",
          "5"
        ],
        "expected_output": "Multiple"
      },
      {
        "input": [
          "7",
          "3"
        ],
        "expected_output": "Not a Multiple"
      },
      {
        "input": [
          "100",
          "10"
        ],
        "expected_output": "Multiple"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0101",
    "title": "Palindrome Checker",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single string as input and determines if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring case and non-alphanumeric characters.\n\n**Constraints**\nThe input string will have a length between 1 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"Palindrome\" or \"Not a Palindrome\".",
    "starter_code": "# Check if a string is a palindrome.",
    "test_cases": [
      {
        "input": [
          "madam"
        ],
        "expected_output": "Palindrome"
      },
      {
        "input": [
          "A man, a plan, a canal: Panama"
        ],
        "expected_output": "Palindrome"
      },
      {
        "input": [
          "hello"
        ],
        "expected_output": "Not a Palindrome"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0102",
    "title": "Count Vowels and Consonants",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single string as input and counts the total number of vowels (a, e, i, o, u, case-insensitive) and consonants (any other letter, case-insensitive).\n\n**Constraints**\nThe input string will have a length between 1 and 100 characters and contain only English letters and spaces.\n\nInput format:\nA single line with the string.\n\nOutput format:\nTwo space-separated integers: first count of vowels, second count of consonants.",
    "starter_code": "# Count vowels and consonants in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "3 7"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "1 5"
      },
      {
        "input": [
          "AEIOU"
        ],
        "expected_output": "5 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0103",
    "title": "Find Largest and Smallest in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and finds both the largest and smallest numbers in the list.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nTwo space-separated integers: first the largest, second the smallest.",
    "starter_code": "# Find the largest and smallest numbers in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15"
        ],
        "expected_output": "20 5"
      },
      {
        "input": [
          "-1 -5 -2"
        ],
        "expected_output": "-1 -5"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "7 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0104",
    "title": "Reverse Words in a Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and reverses the order of the words in the sentence. Each word should remain intact.\n\n**Constraints**\nThe input sentence will have a length between 1 and 100 characters.\nWords are separated by single spaces.\n\nInput format:\nA single line with the sentence.\n\nOutput format:\nA single line with the words in reversed order, separated by spaces.",
    "starter_code": "# Reverse the order of words in a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "World Hello"
      },
      {
        "input": [
          "Python is fun"
        ],
        "expected_output": "fun is Python"
      },
      {
        "input": [
          "SingleWord"
        ],
        "expected_output": "SingleWord"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0105",
    "title": "Calculate List Average",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and calculates their average. The average should be printed as a floating-point number.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single floating-point number representing the average, rounded to two decimal places.",
    "starter_code": "# Calculate the average of numbers in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "20.00"
      },
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3.00"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "7.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0106",
    "title": "Fibonacci Number Generator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `n` as input and calculates the $n$-th Fibonacci number. The Fibonacci sequence starts with $F_0 = 0, F_1 = 1$, and $F_n = F_{n-1} + F_{n-2}$ for $n > 1$.\n\n**Constraints**\n`n` will be between 0 and 20.\n\nInput format:\nA single integer `n`.\n\nOutput format:\nA single integer representing the $n$-th Fibonacci number.",
    "starter_code": "# Generate the n-th Fibonacci number.",
    "test_cases": [
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "6"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "55"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0107",
    "title": "Leap Year Checker",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a year as input and determines if it is a leap year. A leap year is divisible by 4, but not by 100 unless it is also divisible by 400.\n\n**Constraints**\nYear will be between 1900 and 2100.\n\nInput format:\nA single integer representing the year.\n\nOutput format:\nA string: \"Leap Year\" or \"Not a Leap Year\".",
    "starter_code": "# Check if a year is a leap year.",
    "test_cases": [
      {
        "input": [
          "2000"
        ],
        "expected_output": "Leap Year"
      },
      {
        "input": [
          "2004"
        ],
        "expected_output": "Leap Year"
      },
      {
        "input": [
          "1900"
        ],
        "expected_output": "Not a Leap Year"
      },
      {
        "input": [
          "2003"
        ],
        "expected_output": "Not a Leap Year"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0108",
    "title": "Custom FizzBuzz",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that iterates from 1 to a given number `N`. For each number, print:\n- \"Fizz\" if it's divisible by 3.\n- \"Buzz\" if it's divisible by 5.\n- \"FizzBuzz\" if it's divisible by both 3 and 5.\n- The number itself if none of the above conditions are met.\nEach output should be on a new line.\n\n**Constraints**\n`N` will be between 1 and 50.\n\nInput format:\nA single integer `N`.\n\nOutput format:\n`N` lines, each with the corresponding output.",
    "starter_code": "# Implement a custom FizzBuzz.",
    "test_cases": [
      {
        "input": [
          "15"
        ],
        "expected_output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "1\n2\nFizz\n4\nBuzz"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0109",
    "title": "Caesar Cipher Encoder",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that implements a simple Caesar cipher. It takes a string and an integer shift value as input. Each letter in the string should be shifted forward by the specified number of positions in the alphabet. Maintain case. Non-alphabetic characters should remain unchanged.\n\n**Constraints**\nThe input string will have a length between 1 and 100 characters.\nThe shift value will be between 0 and 25.\n\nInput format:\nTwo lines: first line with the string, second line with the shift value.\n\nOutput format:\nA single line with the encoded string.",
    "starter_code": "# Implement a Caesar cipher encoder.",
    "test_cases": [
      {
        "input": [
          "Hello",
          "3"
        ],
        "expected_output": "Khoor"
      },
      {
        "input": [
          "World",
          "0"
        ],
        "expected_output": "World"
      },
      {
        "input": [
          "ABC",
          "25"
        ],
        "expected_output": "ZAB"
      },
      {
        "input": [
          "xyz",
          "3"
        ],
        "expected_output": "abc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0110",
    "title": "Find Factors of a Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and finds all its positive factors (divisors) in ascending order.\n\n**Constraints**\nThe input integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA space-separated list of integers representing the factors.",
    "starter_code": "# Find all factors of a number.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "1 2 3 4 6 12"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "1 7"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0111",
    "title": "Greatest Common Divisor (GCD)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers as input and calculates their Greatest Common Divisor (GCD).\n\n**Constraints**\nBoth integers will be between 1 and 1000.\n\nInput format:\nTwo lines: first integer, second integer.\n\nOutput format:\nA single integer representing the GCD.",
    "starter_code": "# Calculate the GCD of two numbers.",
    "test_cases": [
      {
        "input": [
          "48",
          "18"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "7",
          "5"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "100",
          "50"
        ],
        "expected_output": "50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0112",
    "title": "Least Common Multiple (LCM)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers as input and calculates their Least Common Multiple (LCM).\n\n**Constraints**\nBoth integers will be between 1 and 1000.\n\nInput format:\nTwo lines: first integer, second integer.\n\nOutput format:\nA single integer representing the LCM.",
    "starter_code": "# Calculate the LCM of two numbers.",
    "test_cases": [
      {
        "input": [
          "4",
          "6"
        ],
        "expected_output": "12"
      },
      {
        "input": [
          "7",
          "5"
        ],
        "expected_output": "35"
      },
      {
        "input": [
          "10",
          "20"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0113",
    "title": "Anagram Checker",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and determines if they are anagrams of each other. Anagrams are words or phrases formed by rearranging the letters of another, typically using all the original letters exactly once. Ignore case and spaces.\n\n**Constraints**\nBoth strings will have a length between 1 and 100 characters.\n\nInput format:\nTwo lines: first string, second string.\n\nOutput format:\nA string: \"Anagrams\" or \"Not Anagrams\".",
    "starter_code": "# Check if two strings are anagrams.",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "Anagrams"
      },
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "Not Anagrams"
      },
      {
        "input": [
          "Debit card",
          "Bad credit"
        ],
        "expected_output": "Anagrams"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0114",
    "title": "Remove Duplicates from List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and returns a new list containing only the unique elements from the original list, maintaining their original order of appearance.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA space-separated list of unique integers.",
    "starter_code": "# Remove duplicates from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 1 4"
        ],
        "expected_output": "1 2 3 4"
      },
      {
        "input": [
          "5 5 5"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0115",
    "title": "Find Missing Number in Sequence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of $N-1$ unique integers. These integers are supposed to be from the sequence 1 to $N$. Find the single missing number in the sequence.\n\n**Constraints**\n$N$ will be between 2 and 50.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the missing number.",
    "starter_code": "# Find the missing number in a sequence.",
    "test_cases": [
      {
        "input": [
          "1 2 4 5"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 3 4 5"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 2 3 5"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0116",
    "title": "Simple Calculator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a simple calculator. It takes two numbers and an operator (+, -, *, /) as input and performs the corresponding operation.\n\n**Constraints**\nNumbers will be integers between -1000 and 1000.\nOperator will be one of: +, -, *, /.\nDivision by zero will not occur in test cases.\n\nInput format:\nThree lines: first number, operator, second number.\n\nOutput format:\nA single integer or floating-point number representing the result, rounded to two decimal places for division.",
    "starter_code": "# Implement a simple calculator.",
    "test_cases": [
      {
        "input": [
          "10",
          "+",
          "5"
        ],
        "expected_output": "15"
      },
      {
        "input": [
          "20",
          "/",
          "4"
        ],
        "expected_output": "5.00"
      },
      {
        "input": [
          "7",
          "*",
          "3"
        ],
        "expected_output": "21"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0117",
    "title": "Temperature Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts temperatures between Celsius and Fahrenheit. It takes a temperature value and its unit ('C' for Celsius, 'F' for Fahrenheit) as input and converts it to the other unit.\n\nFormulae:\n$F = C \times 9/5 + 32$\n$C = (F - 32) \times 5/9$\n\n**Constraints**\nTemperature value will be between -100 and 100.\nUnit will be 'C' or 'F'.\n\nInput format:\nTwo lines: temperature value (integer), unit (char).\n\nOutput format:\nA single floating-point number representing the converted temperature, rounded to two decimal places.",
    "starter_code": "# Convert temperature between Celsius and Fahrenheit.",
    "test_cases": [
      {
        "input": [
          "0",
          "C"
        ],
        "expected_output": "32.00"
      },
      {
        "input": [
          "32",
          "F"
        ],
        "expected_output": "0.00"
      },
      {
        "input": [
          "100",
          "C"
        ],
        "expected_output": "212.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0118",
    "title": "Body Mass Index (BMI) Calculator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the Body Mass Index (BMI) given a person's weight in kilograms and height in meters. Then, categorize the BMI as follows:\n- Underweight: BMI < 18.5\n- Normal weight: 18.5 <= BMI < 25\n- Overweight: 25 <= BMI < 30\n- Obese: BMI >= 30\n\nFormula:\n$BMI = weight / (height \times height)$\n\n**Constraints**\nWeight will be between 1 and 200 kg.\nHeight will be between 0.5 and 2.5 meters.\n\nInput format:\nTwo lines: weight (float), height (float).\n\nOutput format:\nTwo lines: first line with BMI (rounded to two decimal places), second line with category.",
    "starter_code": "# Calculate BMI and categorize.",
    "test_cases": [
      {
        "input": [
          "70",
          "1.75"
        ],
        "expected_output": "22.86\nNormal weight"
      },
      {
        "input": [
          "50",
          "1.70"
        ],
        "expected_output": "17.30\nUnderweight"
      },
      {
        "input": [
          "90",
          "1.80"
        ],
        "expected_output": "27.78\nOverweight"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0119",
    "title": "Area of Geometric Shapes",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the area of different geometric shapes based on user input. It should support rectangle, circle, and triangle.\n\nInput format:\nFirst line: shape type (\"rectangle\", \"circle\", or \"triangle\")\nFollowing lines: dimensions based on shape:\n- rectangle: length (float), width (float)\n- circle: radius (float)\n- triangle: base (float), height (float)\n\n**Constraints**\nDimensions will be positive numbers between 0.1 and 100.0.\nUse $pi = 3.14159$.\n\nOutput format:\nA single floating-point number representing the area, rounded to two decimal places.",
    "starter_code": "# Calculate the area of geometric shapes.",
    "test_cases": [
      {
        "input": [
          "rectangle",
          "5",
          "10"
        ],
        "expected_output": "50.00"
      },
      {
        "input": [
          "circle",
          "2.5"
        ],
        "expected_output": "19.63"
      },
      {
        "input": [
          "triangle",
          "4",
          "6"
        ],
        "expected_output": "12.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0120",
    "title": "Count Words in Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and counts the number of words in it. Assume words are separated by one or more spaces.\n\n**Constraints**\nThe input sentence will have a length between 1 and 200 characters.\n\nInput format:\nA single line with the sentence.\n\nOutput format:\nA single integer representing the word count.",
    "starter_code": "# Count words in a sentence.",
    "test_cases": [
      {
        "input": [
          "This is a test sentence."
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "SingleWord"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "  leading and trailing spaces  "
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0121",
    "title": "Sum of Digits",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and calculates the sum of its digits.\n\n**Constraints**\nThe input integer will be between 0 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the sum of digits.",
    "starter_code": "# Calculate the sum of digits of a number.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "9876"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0122",
    "title": "Check for Pangram",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is a pangram. A pangram is a sentence or phrase that contains every letter of the alphabet at least once, case-insensitive.\n\n**Constraints**\nThe input string will have a length between 1 and 500 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"Pangram\" or \"Not a Pangram\".",
    "starter_code": "# Check if a string is a pangram.",
    "test_cases": [
      {
        "input": [
          "The quick brown fox jumps over the lazy dog."
        ],
        "expected_output": "Pangram"
      },
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "Not a Pangram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0123",
    "title": "String to Integer Conversion",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string representing an integer as input and converts it to its integer equivalent. Handle positive and negative numbers.\n\n**Constraints**\nThe input string will represent an integer between -100000 and 100000.\n\nInput format:\nA single line with the string integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Convert a string to an integer.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "123"
      },
      {
        "input": [
          "-45"
        ],
        "expected_output": "-45"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0124",
    "title": "Integer to String Conversion",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and converts it to its string representation. Handle positive and negative numbers.\n\n**Constraints**\nThe input integer will be between -100000 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single string representing the integer.",
    "starter_code": "# Convert an integer to a string.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "123"
      },
      {
        "input": [
          "-45"
        ],
        "expected_output": "-45"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0125",
    "title": "Even or Odd Counter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and counts how many even numbers and how many odd numbers are in the list.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nTwo space-separated integers: first count of even numbers, second count of odd numbers.",
    "starter_code": "# Count even and odd numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "3 3"
      },
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "3 0"
      },
      {
        "input": [
          "1 3 5"
        ],
        "expected_output": "0 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0126",
    "title": "Simple Password Validator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input representing a password and validates it based on the following rules:\n- At least 8 characters long.\n- Contains at least one uppercase letter.\n- Contains at least one lowercase letter.\n- Contains at least one digit.\n\n**Constraints**\nThe input string will have a length between 1 and 50 characters.\n\nInput format:\nA single line with the password string.\n\nOutput format:\nA string: \"Valid Password\" or \"Invalid Password\".",
    "starter_code": "# Validate a simple password.",
    "test_cases": [
      {
        "input": [
          "Abc12345"
        ],
        "expected_output": "Valid Password"
      },
      {
        "input": [
          "abc1234"
        ],
        "expected_output": "Invalid Password"
      },
      {
        "input": [
          "ABCDEFG"
        ],
        "expected_output": "Invalid Password"
      },
      {
        "input": [
          "abcdefg1"
        ],
        "expected_output": "Invalid Password"
      },
      {
        "input": [
          "ABCDEFGH"
        ],
        "expected_output": "Invalid Password"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0127",
    "title": "Calculate String Length Without Built-in Function",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and calculates its length without using any built-in `len()` or similar length-calculating functions.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single integer representing the length.",
    "starter_code": "# Calculate string length manually.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "",
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0128",
    "title": "Reverse a List Without Built-in Function",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and prints the elements in reverse order without using any built-in `reverse()` or slicing[::-1]` functions.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA space-separated list of integers in reverse order.",
    "starter_code": "# Reverse a list manually.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0129",
    "title": "Check if List is Sorted",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and determines if the list is sorted in ascending order.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA string: \"Sorted\" or \"Not Sorted\".",
    "starter_code": "# Check if a list is sorted.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "Sorted"
      },
      {
        "input": [
          "5 1 2 3 4"
        ],
        "expected_output": "Not Sorted"
      },
      {
        "input": [
          "1 5 3"
        ],
        "expected_output": "Not Sorted"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "Sorted"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "Sorted"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0130",
    "title": "Count Occurrences of a Character",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a character as input, and counts how many times that character appears in the string, case-insensitive.\n\n**Constraints**\nThe input string will have a length between 1 and 100 characters.\nThe character will be a single letter.\n\nInput format:\nTwo lines: first line with the string, second line with the character.\n\nOutput format:\nA single integer representing the count.",
    "starter_code": "# Count occurrences of a character in a string.",
    "test_cases": [
      {
        "input": [
          "Programming",
          "g"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "Apple",
          "P"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "Hello",
          "z"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0131",
    "title": "Decimal to Binary Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer (decimal) as input and converts it to its binary representation. Do not use built-in base conversion functions.\n\n**Constraints**\nThe input integer will be between 0 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string representing the binary number.",
    "starter_code": "# Convert decimal to binary.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "1010"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "111"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "16"
        ],
        "expected_output": "10000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0132",
    "title": "Binary to Decimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a binary string as input and converts it to its decimal integer equivalent. Do not use built-in base conversion functions.\n\n**Constraints**\nThe input string will contain only '0's and '1's, and have a length between 1 and 10 characters.\n\nInput format:\nA single string representing the binary number.\n\nOutput format:\nA single integer representing the decimal number.",
    "starter_code": "# Convert binary to decimal.",
    "test_cases": [
      {
        "input": [
          "1010"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "111"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "10000"
        ],
        "expected_output": "16"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0133",
    "title": "Smallest Divisor",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer greater than 1 as input and finds its smallest positive divisor (excluding 1).\n\n**Constraints**\nThe input integer will be between 2 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the smallest divisor.",
    "starter_code": "# Find the smallest divisor of a number.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0134",
    "title": "Check if List Contains Element",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and a target integer as input. Determine if the target integer is present in the list.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\nTarget integer will be between -1000 and 1000.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with target integer.\n\nOutput format:\nA string: \"Found\" or \"Not Found\".",
    "starter_code": "# Check if a list contains a specific element.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3"
        ],
        "expected_output": "Found"
      },
      {
        "input": [
          "10 20 30",
          "15"
        ],
        "expected_output": "Not Found"
      },
      {
        "input": [
          "7",
          "7"
        ],
        "expected_output": "Found"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0135",
    "title": "Longest Word in Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and finds the longest word in it. If there are multiple words of the same maximum length, return the first one encountered. Ignore punctuation and case for length comparison.\n\n**Constraints**\nThe input sentence will have a length between 1 and 200 characters.\n\nInput format:\nA single line with the sentence.\n\nOutput format:\nA single string representing the longest word.",
    "starter_code": "# Find the longest word in a sentence.",
    "test_cases": [
      {
        "input": [
          "This is a simple sentence"
        ],
        "expected_output": "sentence"
      },
      {
        "input": [
          "hello world"
        ],
        "expected_output": "hello"
      },
      {
        "input": [
          "programming is fun"
        ],
        "expected_output": "programming"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0136",
    "title": "Shortest Word in Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and finds the shortest word in it. If there are multiple words of the same minimum length, return the first one encountered. Ignore punctuation and case for length comparison.\n\n**Constraints**\nThe input sentence will have a length between 1 and 200 characters.\n\nInput format:\nA single line with the sentence.\n\nOutput format:\nA single string representing the shortest word.",
    "starter_code": "# Find the shortest word in a sentence.",
    "test_cases": [
      {
        "input": [
          "This is a simple sentence"
        ],
        "expected_output": "a"
      },
      {
        "input": [
          "hello world"
        ],
        "expected_output": "hello"
      },
      {
        "input": [
          "programming is fun"
        ],
        "expected_output": "is"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0137",
    "title": "Calculate Factorial (Recursive)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the factorial of a non-negative integer using a recursive approach.\n\n**Constraints**\nInput integer will be between 0 and 10.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the factorial.",
    "starter_code": "# Calculate factorial recursively.",
    "test_cases": [
      {
        "input": [
          "0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0138",
    "title": "Check for Armstrong Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is an Armstrong number. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\nFor example, 153 is an Armstrong number: $1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153$.\n\n**Constraints**\nThe input integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Armstrong Number\" or \"Not an Armstrong Number\".",
    "starter_code": "# Check if a number is an Armstrong number.",
    "test_cases": [
      {
        "input": [
          "153"
        ],
        "expected_output": "Armstrong Number"
      },
      {
        "input": [
          "370"
        ],
        "expected_output": "Armstrong Number"
      },
      {
        "input": [
          "123"
        ],
        "expected_output": "Not an Armstrong Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0139",
    "title": "Count Prime Numbers in Range",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers, `start` and `end`, as input and counts how many prime numbers are there in the range [start, end] (inclusive).\n\n**Constraints**\n`start` and `end` will be between 1 and 100.\n`start` <= `end`.\n\nInput format:\nTwo lines: first line with `start`, second line with `end`.\n\nOutput format:\nA single integer representing the count of prime numbers.",
    "starter_code": "# Count prime numbers in a given range.",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "10",
          "20"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0140",
    "title": "Find Nth Smallest Element in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and an integer `N` as input. Find the $N$-th smallest element in the list. Assume the list is unsorted.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n`N` will be between 1 and the length of the list.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `N`.\n\nOutput format:\nA single integer representing the $N$-th smallest element.",
    "starter_code": "# Find the Nth smallest element in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15",
          "2"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "3 1 4 1 5 9 2 6",
          "4"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "100 10 50 20",
          "1"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0141",
    "title": "Check for Palindromic Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and determines if it is a palindromic number. A palindromic number reads the same forwards and backwards.\n\n**Constraints**\nThe input integer will be between 0 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Palindromic Number\" or \"Not a Palindromic Number\".",
    "starter_code": "# Check if a number is palindromic.",
    "test_cases": [
      {
        "input": [
          "121"
        ],
        "expected_output": "Palindromic Number"
      },
      {
        "input": [
          "123"
        ],
        "expected_output": "Not a Palindromic Number"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "Palindromic Number"
      },
      {
        "input": [
          "1221"
        ],
        "expected_output": "Palindromic Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0142",
    "title": "Sum of Even Fibonacci Numbers",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that generates Fibonacci numbers up to a given limit `N` and calculates the sum of all even Fibonacci numbers in that range.\n\n**Constraints**\n`N` will be between 1 and 1000.\n\nInput format:\nA single integer `N`.\n\nOutput format:\nA single integer representing the sum of even Fibonacci numbers.",
    "starter_code": "# Sum even Fibonacci numbers up to N.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "34"
        ],
        "expected_output": "44"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0143",
    "title": "Simple Bank Account Operations",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates basic bank account operations: deposit, withdraw, and check balance. It starts with an initial balance and then processes a series of transactions.\n\n**Constraints**\nInitial balance will be between 0 and 1000.\nNumber of transactions will be between 1 and 10.\nTransaction amounts will be positive, between 1 and 500.\nWithdrawals will not exceed the current balance.\n\nInput format:\nFirst line: initial balance (integer).\nFollowing lines: transaction type (\"deposit\" or \"withdraw\") and amount (integer), one transaction per line.\n\nOutput format:\nFor each transaction, print the new balance. If an invalid operation or overdraft attempt occurs, print \"Invalid operation\" and the balance remains unchanged. Each output on a new line.",
    "starter_code": "# Simulate bank account operations.",
    "test_cases": [
      {
        "input": [
          "100",
          "deposit 50",
          "withdraw 30",
          "deposit 20"
        ],
        "expected_output": "150\n120\n140"
      },
      {
        "input": [
          "50",
          "withdraw 100",
          "deposit 50"
        ],
        "expected_output": "Invalid operation\n100"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0144",
    "title": "Reverse a Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and reverses its digits. For example, 123 becomes 321, and 500 becomes 5.\n\n**Constraints**\nThe input integer will be between 0 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the reversed number.",
    "starter_code": "# Reverse the digits of a number.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "321"
      },
      {
        "input": [
          "500"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "9"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0145",
    "title": "Calculate Power of a Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `base` and `exponent`, as input and calculates `base` raised to the power of `exponent` ($base^{exponent}$). Do not use built-in power functions.\n\n**Constraints**\n`base` will be between 1 and 10.\n`exponent` will be between 0 and 5.\n\nInput format:\nTwo lines: first line with `base`, second line with `exponent`.\n\nOutput format:\nA single integer representing the result.",
    "starter_code": "# Calculate power of a number manually.",
    "test_cases": [
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "5",
          "0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "10",
          "2"
        ],
        "expected_output": "100"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0146",
    "title": "Find Common Elements in Two Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two space-separated lists of integers as input and finds all common elements (elements present in both lists). The output should contain only unique common elements, sorted in ascending order.\n\n**Constraints**\nEach list will contain between 1 and 50 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nTwo lines: space-separated integers for List 1, space-separated integers for List 2.\n\nOutput format:\nSpace-separated integers of the common elements, sorted. If no common elements, print \"No Common Elements\".",
    "starter_code": "# Find common elements in two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3 4 5 6 7"
        ],
        "expected_output": "3 4 5"
      },
      {
        "input": [
          "1 2",
          "3 4"
        ],
        "expected_output": "No Common Elements"
      },
      {
        "input": [
          "1 1 2",
          "1 2 2"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0147",
    "title": "Merge Two Sorted Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two space-separated sorted lists of integers as input and merges them into a single sorted list. The merged list should also be sorted in ascending order.\n\n**Constraints**\nEach list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nTwo lines: space-separated integers for List 1, space-separated integers for List 2.\n\nOutput format:\nSpace-separated integers of the merged sorted list.",
    "starter_code": "# Merge two sorted lists.",
    "test_cases": [
      {
        "input": [
          "1 3 5",
          "2 4 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      },
      {
        "input": [
          "10 20",
          "5 15 25"
        ],
        "expected_output": "5 10 15 20 25"
      },
      {
        "input": [
          "",
          "1 2 3"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0148",
    "title": "Check if Number is Perfect",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper positive divisors (excluding the number itself).\nFor example, 6 is a perfect number because its divisors are 1, 2, 3, and $1 + 2 + 3 = 6$.\n\n**Constraints**\nThe input integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Perfect Number\" or \"Not a Perfect Number\".",
    "starter_code": "# Check if a number is perfect.",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "Perfect Number"
      },
      {
        "input": [
          "28"
        ],
        "expected_output": "Perfect Number"
      },
      {
        "input": [
          "12"
        ],
        "expected_output": "Not a Perfect Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0149",
    "title": "Calculate Digit Frequency",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and calculates the frequency of each digit (0-9) present in the number. Output the digit and its count, only for digits that appear.\n\n**Constraints**\nThe input integer will be between 0 and 10000000.\n\nInput format:\nA single integer.\n\nOutput format:\nMultiple lines, each in the format \"Digit: Count\", sorted by digit in ascending order.",
    "starter_code": "# Calculate digit frequency.",
    "test_cases": [
      {
        "input": [
          "12134"
        ],
        "expected_output": "1: 2\n2: 1\n3: 1\n4: 1"
      },
      {
        "input": [
          "555"
        ],
        "expected_output": "5: 3"
      },
      {
        "input": [
          "10020"
        ],
        "expected_output": "0: 2\n1: 1\n2: 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0150",
    "title": "Count Occurrences of a Word",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and a word as input, and counts how many times that word appears in the sentence, case-insensitive.\n\n**Constraints**\nThe input sentence will have a length between 1 and 200 characters.\nThe target word will have a length between 1 and 20 characters.\n\nInput format:\nTwo lines: first line with the sentence, second line with the word.\n\nOutput format:\nA single integer representing the count.",
    "starter_code": "# Count occurrences of a word in a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello world, hello Python.",
          "hello"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "The quick brown fox jumps over the lazy dog.",
          "the"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "Programming is fun",
          "code"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0151",
    "title": "Filter Even Numbers from List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and returns a new list containing only the even numbers from the original list, maintaining their relative order.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA space-separated list of even integers. If no even numbers, print an empty line.",
    "starter_code": "# Filter even numbers from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "2 4 6"
      },
      {
        "input": [
          "1 3 5 7"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "-2 0 2 4"
        ],
        "expected_output": "-2 0 2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0152",
    "title": "Filter Odd Numbers from List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and returns a new list containing only the odd numbers from the original list, maintaining their relative order.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA space-separated list of odd integers. If no odd numbers, print an empty line.",
    "starter_code": "# Filter odd numbers from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "1 3 5"
      },
      {
        "input": [
          "2 4 6 8"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "-1 0 1"
        ],
        "expected_output": "-1 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0153",
    "title": "Sum of Elements at Even Indices",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and calculates the sum of elements located at even indices (0, 2, 4, ...).\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum elements at even indices.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "90"
      },
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "-1 -2 -3 -4"
        ],
        "expected_output": "-4"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0154",
    "title": "Sum of Elements at Odd Indices",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and calculates the sum of elements located at odd indices (1, 3, 5, ...).\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum elements at odd indices.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "60"
      },
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "-1 -2 -3 -4"
        ],
        "expected_output": "-6"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0155",
    "title": "Check if String Contains Only Digits",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it contains only digits (0-9). An empty string should return false.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Check if a string contains only digits.",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abc123"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "-123"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0156",
    "title": "Sort Words Alphabetically",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated sentence as input and prints its words in alphabetical order.\n\n**Constraints**\nThe input sentence will have a length between 1 and 100 characters.\nWords contain only English letters.\n\nInput format:\nA single line with the sentence.\n\nOutput format:\nA space-separated string of words, sorted alphabetically.",
    "starter_code": "# Sort words in a sentence alphabetically.",
    "test_cases": [
      {
        "input": [
          "banana apple cherry"
        ],
        "expected_output": "apple banana cherry"
      },
      {
        "input": [
          "zebra cat dog"
        ],
        "expected_output": "cat dog zebra"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0157",
    "title": "Replace Substring",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a main string, a substring to find, and a replacement substring as input. Replace all occurrences of the target substring with the replacement substring in the main string.\n\n**Constraints**\nAll strings will have lengths between 1 and 100 characters.\nCase-sensitive replacement.\n\nInput format:\nThree lines: main string, substring to find, replacement substring.\n\nOutput format:\nA single string with replacements.",
    "starter_code": "# Replace all occurrences of a substring.",
    "test_cases": [
      {
        "input": [
          "hello world hello",
          "hello",
          "hi"
        ],
        "expected_output": "hi world hi"
      },
      {
        "input": [
          "apple orange apple",
          "apple",
          "banana"
        ],
        "expected_output": "banana orange banana"
      },
      {
        "input": [
          "test string",
          "xyz",
          "abc"
        ],
        "expected_output": "test string"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0158",
    "title": "Calculate Median of a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and calculates its median. The median is the middle number in a sorted, ascending or descending, list of numbers. If the list has an odd number of observations, the median is the middle value. If a list has an even number of observations, the median is the average of the two middle values.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single floating-point number representing the median, rounded to two decimal places.",
    "starter_code": "# Calculate the median of a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3.00"
      },
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "2.50"
      },
      {
        "input": [
          "10 5 20"
        ],
        "expected_output": "10.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0159",
    "title": "Sum of First N Natural Numbers",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and calculates the sum of the first `N` natural numbers.\n\n**Constraints**\n`N` will be between 1 and 1000.\n\nInput format:\nA single integer `N`.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum first N natural numbers.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "55"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0160",
    "title": "Check if Year is Century Year",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a year as input and determines if it is a century year (i.e., ends with '00').\n\n**Constraints**\nYear will be between 1000 and 3000.\n\nInput format:\nA single integer representing the year.\n\nOutput format:\nA string: \"Century Year\" or \"Not a Century Year\".",
    "starter_code": "# Check if a year is a century year.",
    "test_cases": [
      {
        "input": [
          "2000"
        ],
        "expected_output": "Century Year"
      },
      {
        "input": [
          "1999"
        ],
        "expected_output": "Not a Century Year"
      },
      {
        "input": [
          "1800"
        ],
        "expected_output": "Century Year"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0161",
    "title": "Concatenate Two Strings",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and concatenates them without using the `+` operator or `join()` method directly (e.g., use a loop or string formatting).\n\n**Constraints**\nEach string will have a length between 0 and 50 characters.\n\nInput format:\nTwo lines: first string, second string.\n\nOutput format:\nA single string representing the concatenation.",
    "starter_code": "# Concatenate two strings manually.",
    "test_cases": [
      {
        "input": [
          "Hello",
          "World"
        ],
        "expected_output": "HelloWorld"
      },
      {
        "input": [
          "",
          "Python"
        ],
        "expected_output": "Python"
      },
      {
        "input": [
          "Code",
          ""
        ],
        "expected_output": "Code"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0162",
    "title": "First Non-Repeating Character",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and finds the first non-repeating character in it. If all characters repeat, or the string is empty, print an empty line.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters, containing only lowercase English letters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single character or an empty line.",
    "starter_code": "# Find the first non-repeating character.",
    "test_cases": [
      {
        "input": [
          "aabbcdeeff"
        ],
        "expected_output": "c"
      },
      {
        "input": [
          "aabb"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "programming"
        ],
        "expected_output": "p"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0163",
    "title": "Reverse Case of String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and reverses the case of each letter (lowercase becomes uppercase, uppercase becomes lowercase). Other characters remain unchanged.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single string with reversed case.",
    "starter_code": "# Reverse the case of characters in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "hELLO wORLD"
      },
      {
        "input": [
          "PyThOn"
        ],
        "expected_output": "pYtHoN"
      },
      {
        "input": [
          "123!@#"
        ],
        "expected_output": "123!@#"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0164",
    "title": "Check if all elements in list are positive",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and determines if all elements in the list are positive.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Check if all elements in a list are positive.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "-1 2 3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "0 1 2"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0165",
    "title": "Count Spaces in a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and counts the number of spaces in it.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single integer representing the count of spaces.",
    "starter_code": "# Count spaces in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "  leading and trailing  "
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "NoSpaces"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0166",
    "title": "Calculate Simple Interest",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates simple interest. It takes principal amount, rate of interest, and time period as input.\n\nFormula:\n$Simple Interest = (Principal \times Rate \times Time) / 100$\n\n**Constraints**\nPrincipal will be between 1 and 10000.\nRate will be between 1 and 100.\nTime will be between 1 and 10.\n\nInput format:\nThree lines: principal (float), rate (float), time (float).\n\nOutput format:\nA single floating-point number representing the simple interest, rounded to two decimal places.",
    "starter_code": "# Calculate simple interest.",
    "test_cases": [
      {
        "input": [
          "1000",
          "5",
          "1"
        ],
        "expected_output": "50.00"
      },
      {
        "input": [
          "5000",
          "10",
          "3"
        ],
        "expected_output": "1500.00"
      },
      {
        "input": [
          "200",
          "2.5",
          "2"
        ],
        "expected_output": "10.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0167",
    "title": "Convert Days to Years, Weeks, Days",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a number of days as input and converts it into years, weeks, and remaining days. Assume 365 days in a year and 7 days in a week.\n\n**Constraints**\nInput days will be between 0 and 10000.\n\nInput format:\nA single integer representing days.\n\nOutput format:\nThree space-separated integers: years, weeks, days.",
    "starter_code": "# Convert days to years, weeks, and days.",
    "test_cases": [
      {
        "input": [
          "365"
        ],
        "expected_output": "1 0 0"
      },
      {
        "input": [
          "372"
        ],
        "expected_output": "1 1 0"
      },
      {
        "input": [
          "100"
        ],
        "expected_output": "0 14 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0168",
    "title": "Check if Triangle is Valid",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers representing the lengths of the sides of a triangle. Determine if these side lengths can form a valid triangle. A triangle is valid if the sum of any two sides is greater than the third side.\n\n**Constraints**\nSide lengths will be positive integers between 1 and 1000.\n\nInput format:\nThree lines: side1, side2, side3 (integers).\n\nOutput format:\nA string: \"Valid Triangle\" or \"Not a Valid Triangle\".",
    "starter_code": "# Check if a triangle is valid.",
    "test_cases": [
      {
        "input": [
          "3",
          "4",
          "5"
        ],
        "expected_output": "Valid Triangle"
      },
      {
        "input": [
          "1",
          "2",
          "5"
        ],
        "expected_output": "Not a Valid Triangle"
      },
      {
        "input": [
          "7",
          "10",
          "5"
        ],
        "expected_output": "Valid Triangle"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0169",
    "title": "Concatenate Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two space-separated lists of integers as input and concatenates them into a single list.\n\n**Constraints**\nEach list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nTwo lines: space-separated integers for List 1, space-separated integers for List 2.\n\nOutput format:\nA space-separated list of concatenated integers.",
    "starter_code": "# Concatenate two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      },
      {
        "input": [
          "10 20",
          ""
        ],
        "expected_output": "10 20"
      },
      {
        "input": [
          "",
          "abc"
        ],
        "expected_output": "abc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0170",
    "title": "Generate Multiplication Table",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and generates its multiplication table up to 10.\n\n**Constraints**\n`N` will be between 1 and 20.\n\nInput format:\nA single integer `N`.\n\nOutput format:\n10 lines, each in the format \"$N \times i = result$\", where `i` goes from 1 to 10.",
    "starter_code": "# Generate multiplication table.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0171",
    "title": "String Capitalize First Letter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and capitalizes the first letter of each word in the string. Other letters should be lowercase.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\nWords are separated by single spaces.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single string with each word's first letter capitalized.",
    "starter_code": "# Capitalize first letter of each word.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "Hello World"
      },
      {
        "input": [
          "python is fun"
        ],
        "expected_output": "Python Is Fun"
      },
      {
        "input": [
          "singleword"
        ],
        "expected_output": "Singleword"
      },
      {
        "input": [
          "  leading and trailing spaces  "
        ],
        "expected_output": "  Leading And Trailing Spaces  "
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0172",
    "title": "Check if Number is Automorphic",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is an automorphic number. An automorphic number is a number whose square ends in the number itself.\nFor example, 5 is automorphic because $5^2 = 25$, which ends in 5. 25 is automorphic because $25^2 = 625$, which ends in 25.\n\n**Constraints**\nThe input integer will be between 1 and 100.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Automorphic Number\" or \"Not an Automorphic Number\".",
    "starter_code": "# Check if a number is automorphic.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "Automorphic Number"
      },
      {
        "input": [
          "25"
        ],
        "expected_output": "Automorphic Number"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "Not an Automorphic Number"
      },
      {
        "input": [
          "6"
        ],
        "expected_output": "Automorphic Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0173",
    "title": "Count Uppercase and Lowercase Letters",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and counts the number of uppercase letters and lowercase letters separately.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nTwo space-separated integers: first count of uppercase, second count of lowercase.",
    "starter_code": "# Count uppercase and lowercase letters.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "2 8"
      },
      {
        "input": [
          "PYTHON"
        ],
        "expected_output": "6 0"
      },
      {
        "input": [
          "abc"
        ],
        "expected_output": "0 3"
      },
      {
        "input": [
          "123!@#"
        ],
        "expected_output": "0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0174",
    "title": "Find Second Largest Number in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and finds the second largest number in the list. Assume there will always be at least two distinct numbers.\n\n**Constraints**\nThe list will contain between 2 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the second largest number.",
    "starter_code": "# Find the second largest number in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15"
        ],
        "expected_output": "15"
      },
      {
        "input": [
          "5 5 5 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "100 10 50 20"
        ],
        "expected_output": "50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0175",
    "title": "Sum of Elements Greater Than Average",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input, calculates its average, and then sums all elements that are strictly greater than the average.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the sum of elements greater than average.",
    "starter_code": "# Sum elements greater than average.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "5 5 5"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0176",
    "title": "Count Negative Numbers in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and counts how many negative numbers are in the list.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the count of negative numbers.",
    "starter_code": "# Count negative numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 -2 3 -4 5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "-1 -2 -3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0177",
    "title": "Find Sum of Array Diagonals (Square Matrix)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a square matrix (2D list) as input and calculates the sum of its main diagonal (top-left to bottom-right) and anti-diagonal (top-right to bottom-left) elements. Print both sums.\n\n**Constraints**\nThe matrix size `N` will be between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: integer `N` (size of matrix).\nFollowing `N` lines: `N` space-separated integers for each row.\n\nOutput format:\nTwo space-separated integers: sum of main diagonal, sum of anti-diagonal.",
    "starter_code": "# Calculate sums of matrix diagonals.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "15 15"
      },
      {
        "input": [
          "2",
          "1 2",
          "3 4"
        ],
        "expected_output": "5 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0178",
    "title": "Matrix Transpose",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and prints its transpose. The transpose of a matrix is obtained by changing rows to columns and columns to rows.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\n$N$ lines: $M$ space-separated integers for each row of the transposed matrix.",
    "starter_code": "# Transpose a matrix.",
    "test_cases": [
      {
        "input": [
          "2 3",
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "1 4\n2 5\n3 6"
      },
      {
        "input": [
          "3 2",
          "1 2",
          "3 4",
          "5 6"
        ],
        "expected_output": "1 3 5\n2 4 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0179",
    "title": "Swap First and Last Characters of String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and swaps its first and last characters. If the string has fewer than two characters, return the string as is.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single string with first and last characters swapped.",
    "starter_code": "# Swap first and last characters of a string.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "oellh"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "a"
      },
      {
        "input": [
          "ab"
        ],
        "expected_output": "ba"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0180",
    "title": "Check if Character is Vowel or Consonant",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character as input and determines if it is a vowel, a consonant, or neither (non-alphabetic character). Case-insensitive.\n\n**Constraints**\nThe input will be a single character.\n\nInput format:\nA single character.\n\nOutput format:\nA string: \"Vowel\", \"Consonant\", or \"Neither\".",
    "starter_code": "# Check if character is vowel, consonant, or neither.",
    "test_cases": [
      {
        "input": [
          "a"
        ],
        "expected_output": "Vowel"
      },
      {
        "input": [
          "B"
        ],
        "expected_output": "Consonant"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "Neither"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0181",
    "title": "Sum of Prime Numbers in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and calculates the sum of all prime numbers present in the list.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between 1 and 100.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the sum of prime numbers.",
    "starter_code": "# Sum prime numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6 7"
        ],
        "expected_output": "17"
      },
      {
        "input": [
          "10 12 14"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "2 2 3 5"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0182",
    "title": "Count Digits, Letters, and Special Characters",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and counts the number of digits, letters, and special characters (anything that is not a digit or a letter) in it.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nThree space-separated integers: digits_count, letters_count, special_chars_count.",
    "starter_code": "# Count digits, letters, and special characters.",
    "test_cases": [
      {
        "input": [
          "Hello123!"
        ],
        "expected_output": "3 5 1"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "0 6 0"
      },
      {
        "input": [
          "@#$"
        ],
        "expected_output": "0 0 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0183",
    "title": "Check for Happy Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is a happy number. A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it enters a cycle that does not include 1. Numbers for which this process ends in 1 are happy numbers.\n\n**Constraints**\nThe input integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Happy Number\" or \"Not a Happy Number\".",
    "starter_code": "# Check if a number is happy.",
    "test_cases": [
      {
        "input": [
          "19"
        ],
        "expected_output": "Happy Number"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "Not a Happy Number"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "Happy Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0184",
    "title": "Find All Substrings of String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and prints all possible substrings of that string. Substrings should be printed one per line, in lexicographical order (alphabetical), and then by length if lengths are equal.\n\n**Constraints**\nThe input string will have a length between 1 and 5 characters, containing only lowercase English letters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nMultiple lines, each with a substring, sorted.",
    "starter_code": "# Find all substrings of a string.",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "a\nab\nabc\nb\nbc\nc"
      },
      {
        "input": [
          "aa"
        ],
        "expected_output": "a\na\naa"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0185",
    "title": "Find Longest Common Prefix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of strings as input and finds the longest common prefix among them. If there is no common prefix, print an empty line.\n\n**Constraints**\nThe list will contain between 1 and 5 strings.\nEach string will have a length between 1 and 20 characters, containing only lowercase English letters.\n\nInput format:\nA single line with space-separated strings.\n\nOutput format:\nA single string representing the longest common prefix, or an empty line.",
    "starter_code": "# Find the longest common prefix.",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      },
      {
        "input": [
          "dog racecar car"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "apple apron april"
        ],
        "expected_output": "ap"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0186",
    "title": "Calculate Sum of Even Numbers in Range",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input and calculates the sum of all even numbers in the range [start, end] (inclusive).\n\n**Constraints**\n`start` and `end` will be between -100 and 100.\n`start` <= `end`.\n\nInput format:\nTwo lines: first line with `start`, second line with `end`.\n\nOutput format:\nA single integer representing the sum of even numbers.",
    "starter_code": "# Sum even numbers in a range.",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "2",
          "2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "-5",
          "5"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0187",
    "title": "Calculate Sum of Odd Numbers in Range",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input and calculates the sum of all odd numbers in the range [start, end] (inclusive).\n\n**Constraints**\n`start` and `end` will be between -100 and 100.\n`start` <= `end`.\n\nInput format:\nTwo lines: first line with `start`, second line with `end`.\n\nOutput format:\nA single integer representing the sum of odd numbers.",
    "starter_code": "# Sum odd numbers in a range.",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output": "25"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2",
          "2"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "-5",
          "5"
        ],
        "expected_output": "-5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0188",
    "title": "Check if String is Palindrome (ignoring spaces)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is a palindrome, ignoring spaces and case. Only consider letters.\n\n**Constraints**\nThe input string will have a length between 1 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"Palindrome\" or \"Not a Palindrome\".",
    "starter_code": "# Check if a string is a palindrome, ignoring spaces and case.",
    "test_cases": [
      {
        "input": [
          "race car"
        ],
        "expected_output": "Palindrome"
      },
      {
        "input": [
          "Madam"
        ],
        "expected_output": "Palindrome"
      },
      {
        "input": [
          "hello world"
        ],
        "expected_output": "Not a Palindrome"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0189",
    "title": "Find Duplicates in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and finds all duplicate elements. The output should contain only unique duplicate elements, sorted in ascending order.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nSpace-separated integers of the duplicate elements, sorted. If no duplicates, print \"No Duplicates\".",
    "starter_code": "# Find duplicate elements in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 1 4"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "No Duplicates"
      },
      {
        "input": [
          "5 5 5 5"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0190",
    "title": "Count Words Starting With Specific Letter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and a single character as input. Count how many words in the sentence start with that specific character, case-insensitive.\n\n**Constraints**\nThe input sentence will have a length between 1 and 100 characters.\nThe character will be a single English letter.\n\nInput format:\nTwo lines: first line with the sentence, second line with the character.\n\nOutput format:\nA single integer representing the count.",
    "starter_code": "# Count words starting with a specific letter.",
    "test_cases": [
      {
        "input": [
          "Apple Banana Cherry",
          "a"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "Python Programming Practice",
          "p"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "Hello World",
          "z"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0191",
    "title": "Longest Word Without Specific Character",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and a single character as input. Find the longest word in the sentence that does NOT contain the given character. If there are multiple words of the same maximum length, return the first one encountered. If no such word exists, print an empty line.\n\n**Constraints**\nThe input sentence will have a length between 1 and 200 characters.\nThe character will be a single English letter.\nWords contain only English letters.\n\nInput format:\nTwo lines: first line with the sentence, second line with the character.\n\nOutput format:\nA single string representing the longest word without the character, or an empty line.",
    "starter_code": "# Find longest word without specific character.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry",
          "a"
        ],
        "expected_output": "cherry"
      },
      {
        "input": [
          "programming is fun",
          "i"
        ],
        "expected_output": "programming"
      },
      {
        "input": [
          "hello world",
          "o"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0192",
    "title": "Sum of Squares of Digits",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and calculates the sum of the squares of its digits.\n\n**Constraints**\nThe input integer will be between 0 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer representing the sum of squares of digits.",
    "starter_code": "# Sum squares of digits.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "14"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "25"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0193",
    "title": "Simple ATM Withdrawal",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates an ATM withdrawal. It takes an initial balance and a withdrawal amount. If the balance is sufficient, deduct the amount and print the new balance. Otherwise, print \"Insufficient Funds\" and the balance remains unchanged.\n\n**Constraints**\nInitial balance and withdrawal amount will be positive integers between 1 and 10000.\n\nInput format:\nTwo lines: initial balance, withdrawal amount.\n\nOutput format:\nA single integer for new balance or \"Insufficient Funds\".",
    "starter_code": "# Simulate ATM withdrawal.",
    "test_cases": [
      {
        "input": [
          "500",
          "200"
        ],
        "expected_output": "300"
      },
      {
        "input": [
          "100",
          "150"
        ],
        "expected_output": "Insufficient Funds"
      },
      {
        "input": [
          "1000",
          "1000"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0194",
    "title": "Check if Number is Abundant",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is an abundant number. An abundant number is a number for which the sum of its proper divisors (excluding the number itself) is greater than the number itself.\nFor example, 12 is an abundant number: its proper divisors are 1, 2, 3, 4, 6, and $1 + 2 + 3 + 4 + 6 = 16 > 12$.\n\n**Constraints**\nThe input integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Abundant Number\" or \"Not an Abundant Number\".",
    "starter_code": "# Check if a number is abundant.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "Abundant Number"
      },
      {
        "input": [
          "6"
        ],
        "expected_output": "Not an Abundant Number"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "Not an Abundant Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0195",
    "title": "Check if Number is Deficient",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is a deficient number. A deficient number is a number for which the sum of its proper divisors (excluding the number itself) is less than the number itself.\n\n**Constraints**\nThe input integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Deficient Number\" or \"Not a Deficient Number\".",
    "starter_code": "# Check if a number is deficient.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "Deficient Number"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "Deficient Number"
      },
      {
        "input": [
          "6"
        ],
        "expected_output": "Not a Deficient Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0196",
    "title": "Find Sum of Each Row in Matrix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and calculates the sum of elements for each row. Print each row's sum on a new line.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\n$M$ lines, each with the sum of a row.",
    "starter_code": "# Calculate sum of each row in a matrix.",
    "test_cases": [
      {
        "input": [
          "2 3",
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "6\n15"
      },
      {
        "input": [
          "1 5",
          "1 1 1 1 1"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0197",
    "title": "Find Sum of Each Column in Matrix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and calculates the sum of elements for each column. Print each column's sum on a new line.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\n$N$ lines, each with the sum of a column.",
    "starter_code": "# Calculate sum of each column in a matrix.",
    "test_cases": [
      {
        "input": [
          "2 3",
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "5\n7\n9"
      },
      {
        "input": [
          "3 1",
          "1",
          "2",
          "3"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0198",
    "title": "Check if Two Strings are Permutations",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and determines if one is a permutation of the other. A string is a permutation of another if it contains the same characters with the same frequencies, ignoring case and spaces.\n\n**Constraints**\nBoth strings will have a length between 0 and 50 characters.\n\nInput format:\nTwo lines: first string, second string.\n\nOutput format:\nA string: \"Permutations\" or \"Not Permutations\".",
    "starter_code": "# Check if two strings are permutations.",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "Permutations"
      },
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "Not Permutations"
      },
      {
        "input": [
          "God",
          "dog"
        ],
        "expected_output": "Permutations"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0199",
    "title": "Decimal to Hexadecimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer (decimal) as input and converts it to its hexadecimal representation. Do not use built-in base conversion functions.\n\n**Constraints**\nThe input integer will be between 0 and 255.\n\nInput format:\nA single integer.\n\nOutput format:\nA string representing the hexadecimal number (uppercase letters for A-F).",
    "starter_code": "# Convert decimal to hexadecimal.",
    "test_cases": [
      {
        "input": [
          "255"
        ],
        "expected_output": "FF"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "A"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "16"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0200",
    "title": "Hexadecimal to Decimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a hexadecimal string as input and converts it to its decimal integer equivalent. Do not use built-in base conversion functions.\n\n**Constraints**\nThe input string will contain hexadecimal digits (0-9, A-F, case-insensitive) and have a length between 1 and 2 characters.\n\nInput format:\nA single string representing the hexadecimal number.\n\nOutput format:\nA single integer representing the decimal number.",
    "starter_code": "# Convert hexadecimal to decimal.",
    "test_cases": [
      {
        "input": [
          "FF"
        ],
        "expected_output": "255"
      },
      {
        "input": [
          "A"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "16"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0201",
    "title": "Sum of Elements in Range of Indices",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and two indices, `start_index` and `end_index`, as input. Calculate the sum of elements in the list within the specified range of indices (inclusive).\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n`start_index` and `end_index` will be valid indices within the list, and `start_index` <= `end_index`.\n\nInput format:\nThree lines: first line with space-separated integers, second line with `start_index`, third line with `end_index`.\n\nOutput format:\nA single integer representing the sum.",
    "starter_code": "# Sum elements in a specified range of indices.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "1",
          "3"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "10 20 30 40",
          "0",
          "0"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "-1 -2 -3 -4",
          "0",
          "3"
        ],
        "expected_output": "-10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0202",
    "title": "Rotate List Left by N Positions",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and an integer `N` as input. Rotate the list to the left by `N` positions. Elements that are rotated off the beginning should wrap around to the end.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n`N` will be between 0 and the length of the list.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `N`.\n\nOutput format:\nA space-separated list of integers after rotation.",
    "starter_code": "# Rotate a list left by N positions.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "3 4 5 1 2"
      },
      {
        "input": [
          "10 20 30",
          "0"
        ],
        "expected_output": "10 20 30"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0203",
    "title": "Rotate List Right by N Positions",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and an integer `N` as input. Rotate the list to the right by `N` positions. Elements that are rotated off the end should wrap around to the beginning.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n`N` will be between 0 and the length of the list.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `N`.\n\nOutput format:\nA space-separated list of integers after rotation.",
    "starter_code": "# Rotate a list right by N positions.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "4 5 1 2 3"
      },
      {
        "input": [
          "10 20 30",
          "0"
        ],
        "expected_output": "10 20 30"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0204",
    "title": "Check if String Contains Vowels",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it contains any vowels (a, e, i, o, u, case-insensitive).\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Check if string contains vowels.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "rhythm"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "PYTHN"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0205",
    "title": "Find Sum of Even Numbers in Matrix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and calculates the sum of all even numbers within the matrix.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\nA single integer representing the sum of even numbers.",
    "starter_code": "# Sum even numbers in a matrix.",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 2",
          "3 4"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "1 3",
          "1 3 5"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "2 2",
          "2 4",
          "6 8"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0206",
    "title": "Find Max Element in Each Row of Matrix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and finds the maximum element in each row. Print each row's maximum on a new line.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\n$M$ lines, each with the maximum element of a row.",
    "starter_code": "# Find max element in each row of a matrix.",
    "test_cases": [
      {
        "input": [
          "2 3",
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "3\n6"
      },
      {
        "input": [
          "1 5",
          "10 5 20 8 15"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0207",
    "title": "Find Min Element in Each Column of Matrix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and finds the minimum element in each column. Print each column's minimum on a new line.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\n$N$ lines, each with the minimum element of a column.",
    "starter_code": "# Find min element in each column of a matrix.",
    "test_cases": [
      {
        "input": [
          "2 3",
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "1\n2\n3"
      },
      {
        "input": [
          "3 1",
          "10",
          "5",
          "15"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0208",
    "title": "Check if Square Matrix is Symmetric",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a square matrix as input and determines if it is symmetric. A square matrix is symmetric if it is equal to its transpose (i.e., $A_{ij} = A_{ji}$ for all $i, j$).\n\n**Constraints**\nThe matrix size `N` will be between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: integer `N` (size of matrix).\nFollowing `N` lines: `N` space-separated integers for each row.\n\nOutput format:\nA string: \"Symmetric\" or \"Not Symmetric\".",
    "starter_code": "# Check if a square matrix is symmetric.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "2 4 5",
          "3 5 6"
        ],
        "expected_output": "Symmetric"
      },
      {
        "input": [
          "2",
          "1 2",
          "3 4"
        ],
        "expected_output": "Not Symmetric"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0209",
    "title": "Calculate Perimeter of Rectangle",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the length and width of a rectangle as input and calculates its perimeter.\n\nFormula:\n$Perimeter = 2 \times (Length + Width)$\n\n**Constraints**\nLength and width will be positive floating-point numbers between 0.1 and 100.0.\n\nInput format:\nTwo lines: length (float), width (float).\n\nOutput format:\nA single floating-point number representing the perimeter, rounded to two decimal places.",
    "starter_code": "# Calculate perimeter of a rectangle.",
    "test_cases": [
      {
        "input": [
          "5",
          "10"
        ],
        "expected_output": "30.00"
      },
      {
        "input": [
          "2.5",
          "3.5"
        ],
        "expected_output": "12.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0210",
    "title": "Find All Divisors of Number in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and a single target integer `N` as input. Find all numbers in the list that are divisors of `N`.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nList integers will be between 1 and 1000.\n`N` will be between 1 and 1000.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `N`.\n\nOutput format:\nA space-separated list of divisors found in the list, sorted in ascending order. If no divisors found, print an empty line.",
    "starter_code": "# Find divisors of N present in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6",
          "12"
        ],
        "expected_output": "1 2 3 4 6"
      },
      {
        "input": [
          "7 8 9",
          "5"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "10 20 30",
          "10"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0211",
    "title": "Generate Prime Factors",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and generates all its prime factors.\n\n**Constraints**\n`N` will be between 2 and 1000.\n\nInput format:\nA single integer `N`.\n\nOutput format:\nA space-separated list of prime factors in ascending order.",
    "starter_code": "# Generate prime factors of a number.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "2 2 3"
      },
      {
        "input": [
          "30"
        ],
        "expected_output": "2 3 5"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0212",
    "title": "Simple Unit Converter (Length)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts length units. It takes a value, source unit (\"m\" for meters, \"cm\" for centimeters, \"km\" for kilometers), and target unit as input. Convert the value from source unit to target unit.\n\nConversion factors: 1m = 100cm, 1km = 1000m.\n\n**Constraints**\nValue will be positive float between 0.1 and 1000.\nUnits will be \"m\", \"cm\", or \"km\".\n\nInput format:\nThree lines: value (float), source unit (string), target unit (string).\n\nOutput format:\nA single floating-point number representing the converted value, rounded to two decimal places.",
    "starter_code": "# Simple unit converter for length.",
    "test_cases": [
      {
        "input": [
          "10",
          "m",
          "cm"
        ],
        "expected_output": "1000.00"
      },
      {
        "input": [
          "2.5",
          "km",
          "m"
        ],
        "expected_output": "2500.00"
      },
      {
        "input": [
          "500",
          "cm",
          "m"
        ],
        "expected_output": "5.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0213",
    "title": "Simple Grade Calculator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a numeric score as input and assigns a letter grade based on the following scale:\n- A: 90-100\n- B: 80-89\n- C: 70-79\n- D: 60-69\n- F: Below 60\n\n**Constraints**\nScore will be an integer between 0 and 100.\n\nInput format:\nA single integer representing the score.\n\nOutput format:\nA single string representing the letter grade.",
    "starter_code": "# Calculate letter grade from score.",
    "test_cases": [
      {
        "input": [
          "95"
        ],
        "expected_output": "A"
      },
      {
        "input": [
          "82"
        ],
        "expected_output": "B"
      },
      {
        "input": [
          "65"
        ],
        "expected_output": "D"
      },
      {
        "input": [
          "50"
        ],
        "expected_output": "F"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0214",
    "title": "Check if Character is Alphabet",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character as input and determines if it is an alphabet (a-z or A-Z).\n\n**Constraints**\nThe input will be a single character.\n\nInput format:\nA single character.\n\nOutput format:\nA string: \"Alphabet\" or \"Not an Alphabet\".",
    "starter_code": "# Check if character is an alphabet.",
    "test_cases": [
      {
        "input": [
          "A"
        ],
        "expected_output": "Alphabet"
      },
      {
        "input": [
          "z"
        ],
        "expected_output": "Alphabet"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "Not an Alphabet"
      },
      {
        "input": [
          "#"
        ],
        "expected_output": "Not an Alphabet"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0215",
    "title": "Find Max Element in Matrix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and finds the single largest element in the entire matrix.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\nA single integer representing the maximum element.",
    "starter_code": "# Find the maximum element in a matrix.",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 2",
          "3 4"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "3 1",
          "10",
          "5",
          "20"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0216",
    "title": "Find Min Element in Matrix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (2D list) as input and finds the single smallest element in the entire matrix.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\nA single integer representing the minimum element.",
    "starter_code": "# Find the minimum element in a matrix.",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 2",
          "3 4"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "3 1",
          "10",
          "5",
          "20"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0217",
    "title": "Count Positive, Negative, Zero in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and counts the number of positive, negative, and zero elements in the list.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nThree space-separated integers: positive_count, negative_count, zero_count.",
    "starter_code": "# Count positive, negative, and zero numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 -2 0 4 -5 0"
        ],
        "expected_output": "2 2 2"
      },
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "3 0 0"
      },
      {
        "input": [
          "-1 -2 -3"
        ],
        "expected_output": "0 3 0"
      },
      {
        "input": [
          "0 0 0"
        ],
        "expected_output": "0 0 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0218",
    "title": "Filter Words by Length",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and an integer `min_length` as input. Return a new string containing only words from the sentence that have a length greater than or equal to `min_length`. Words should retain their original order.\n\n**Constraints**\nThe input sentence will have a length between 0 and 100 characters.\n`min_length` will be between 1 and 20.\nWords contain only English letters and are separated by single spaces.\n\nInput format:\nTwo lines: first line with the sentence, second line with `min_length`.\n\nOutput format:\nA single string with filtered words, space-separated.",
    "starter_code": "# Filter words by length.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry",
          "6"
        ],
        "expected_output": "banana cherry"
      },
      {
        "input": [
          "hello world",
          "5"
        ],
        "expected_output": "hello world"
      },
      {
        "input": [
          "a bc def",
          "3"
        ],
        "expected_output": "def"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0219",
    "title": "Find Longest Word Without Vowels",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and finds the longest word in it that does NOT contain any vowels (a, e, i, o, u, case-insensitive). If there are multiple such words of the same maximum length, return the first one encountered. If no such word exists, print an empty line.\n\n**Constraints**\nThe input sentence will have a length between 1 and 200 characters.\nWords contain only English letters.\n\nInput format:\nA single line with the sentence.\n\nOutput format:\nA single string representing the longest word without vowels, or an empty line.",
    "starter_code": "# Find longest word without vowels.",
    "test_cases": [
      {
        "input": [
          "rhythm sky fly by"
        ],
        "expected_output": "rhythm"
      },
      {
        "input": [
          "hello world"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "crypt myth"
        ],
        "expected_output": "crypt"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0220",
    "title": "Generate Pascal's Triangle Row",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `row_index` as input and generates the `row_index`-th row of Pascal's Triangle.\nPascal's Triangle is a triangular array of the binomial coefficients. Row 0 is [1], Row 1 is [1, 1], Row 2 is [1, 2, 1], etc.\n\n**Constraints**\n`row_index` will be between 0 and 10.\n\nInput format:\nA single integer `row_index`.\n\nOutput format:\nA space-separated list of integers representing the elements of the row.",
    "starter_code": "# Generate a row of Pascal's Triangle.",
    "test_cases": [
      {
        "input": [
          "0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1 1"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "1 2 1"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "1 3 3 1"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "1 4 6 4 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0221",
    "title": "Convert Roman Numerals to Integer",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a Roman numeral string as input and converts it to its integer equivalent.\n\nRoman numerals and their values:\nI: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000\n\n**Constraints**\nThe input Roman numeral will be valid and represent a number between 1 and 3999.\n\nInput format:\nA single string representing the Roman numeral.\n\nOutput format:\nA single integer representing the converted value.",
    "starter_code": "# Convert Roman numerals to integer.",
    "test_cases": [
      {
        "input": [
          "III"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "IV"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "IX"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "LVIII"
        ],
        "expected_output": "58"
      },
      {
        "input": [
          "MCMXCIV"
        ],
        "expected_output": "1994"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0222",
    "title": "Calculate Simple Arithemetic Series Sum",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the sum of an arithmetic series given its first term `a`, common difference `d`, and number of terms `n`.\n\nFormula:\n$Sum = (n/2) \times (2a + (n-1)d)$\n\n**Constraints**\n`a`, `d`, `n` will be integers between 1 and 100.\n\nInput format:\nThree lines: `a`, `d`, `n` (integers).\n\nOutput format:\nA single integer representing the sum of the series.",
    "starter_code": "# Calculate sum of an arithmetic series.",
    "test_cases": [
      {
        "input": [
          "1",
          "1",
          "5"
        ],
        "expected_output": "15"
      },
      {
        "input": [
          "2",
          "3",
          "4"
        ],
        "expected_output": "26"
      },
      {
        "input": [
          "1",
          "0",
          "10"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0223",
    "title": "Check if List is Monotonic",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and determines if it is monotonic. A list is monotonic if it is either entirely non-decreasing or entirely non-increasing.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA string: \"Monotonic\" or \"Not Monotonic\".",
    "starter_code": "# Check if a list is monotonic.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "Monotonic"
      },
      {
        "input": [
          "5 4 3 2 1"
        ],
        "expected_output": "Monotonic"
      },
      {
        "input": [
          "1 3 2"
        ],
        "expected_output": "Not Monotonic"
      },
      {
        "input": [
          "1 1 2 2"
        ],
        "expected_output": "Monotonic"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "Monotonic"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "Monotonic"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0224",
    "title": "Find Mode of a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and finds the mode (the most frequently occurring element(s)). If there are multiple modes, return all of them, sorted in ascending order.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA space-separated list of integers representing the mode(s).",
    "starter_code": "# Find the mode(s) of a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 3 3 4"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 2 2 3 3"
        ],
        "expected_output": "2 3"
      },
      {
        "input": [
          "5 5 5"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0225",
    "title": "Swap Two Numbers Without Temp Variable",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers `a` and `b` as input and swaps their values without using a third (temporary) variable.\n\n**Constraints**\n`a` and `b` will be integers between -1000 and 1000.\n\nInput format:\nTwo lines: `a`, then `b`.\n\nOutput format:\nTwo space-separated integers: new `a`, then new `b`.",
    "starter_code": "# Swap two numbers without a temporary variable.",
    "test_cases": [
      {
        "input": [
          "10",
          "20"
        ],
        "expected_output": "20 10"
      },
      {
        "input": [
          "-5",
          "5"
        ],
        "expected_output": "5 -5"
      },
      {
        "input": [
          "7",
          "7"
        ],
        "expected_output": "7 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0226",
    "title": "Find Union of Two Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two space-separated lists of integers as input and finds their union (all unique elements from both lists). The output should contain only unique elements, sorted in ascending order.\n\n**Constraints**\nEach list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nTwo lines: space-separated integers for List 1, space-separated integers for List 2.\n\nOutput format:\nSpace-separated integers of the union, sorted.",
    "starter_code": "# Find the union of two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "3 4 5"
        ],
        "expected_output": "1 2 3 4 5"
      },
      {
        "input": [
          "1 2",
          "1 2"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "10",
          "20 30"
        ],
        "expected_output": "10 20 30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0227",
    "title": "Check if Number is Perfect Square",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and determines if it is a perfect square (i.e., its square root is an integer).\n\n**Constraints**\nThe input integer will be between 0 and 10000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Perfect Square\" or \"Not a Perfect Square\".",
    "starter_code": "# Check if a number is a perfect square.",
    "test_cases": [
      {
        "input": [
          "9"
        ],
        "expected_output": "Perfect Square"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "Not a Perfect Square"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "Perfect Square"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "Perfect Square"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0228",
    "title": "Count Vowels in Each Word",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and counts the number of vowels in each word. Print each word followed by its vowel count on a new line.\n\n**Constraints**\nThe input sentence will have a length between 1 and 100 characters.\nWords contain only English letters and are separated by single spaces.\n\nInput format:\nA single line with the sentence.\n\nOutput format:\nMultiple lines, each in the format \"Word: VowelCount\".",
    "starter_code": "# Count vowels in each word of a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "Hello: 2\nWorld: 1"
      },
      {
        "input": [
          "Python is fun"
        ],
        "expected_output": "Python: 1\nis: 1\nfun: 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0229",
    "title": "Check if String is Anagram of Palindrome",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is an anagram of a palindrome. This means the letters in the string can be rearranged to form a palindrome. Ignore spaces and case.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Check if a string is an anagram of a palindrome.",
    "test_cases": [
      {
        "input": [
          "aabb"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "aabbc"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "aabbcd"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "Tact Coa"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0230",
    "title": "Sum of Elements in Nested List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a nested list (list of lists) of integers as input and calculates the sum of all elements across all inner lists.\n\n**Constraints**\nThe outer list will contain between 1 and 3 inner lists.\nEach inner list will contain between 0 and 5 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nFirst line: integer `M` (number of inner lists).\nFollowing `M` lines: space-separated integers for each inner list.\n\nOutput format:\nA single integer representing the total sum.",
    "starter_code": "# Sum all elements in a nested list.",
    "test_cases": [
      {
        "input": [
          "2",
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "21"
      },
      {
        "input": [
          "1",
          "10 20"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "3",
          "1",
          "2",
          "3"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "2",
          "",
          "5"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0231",
    "title": "Merge Two Unsorted Lists Without Duplicates",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two space-separated lists of integers as input. Merge them into a single list, remove duplicates, and then sort the resulting list in ascending order.\n\n**Constraints**\nEach list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nTwo lines: space-separated integers for List 1, space-separated integers for List 2.\n\nOutput format:\nA space-separated list of unique, sorted integers.",
    "starter_code": "# Merge two unsorted lists, remove duplicates, and sort.",
    "test_cases": [
      {
        "input": [
          "1 3 2",
          "4 2 5"
        ],
        "expected_output": "1 2 3 4 5"
      },
      {
        "input": [
          "10 20",
          "20 30"
        ],
        "expected_output": "10 20 30"
      },
      {
        "input": [
          "",
          "5 1"
        ],
        "expected_output": "1 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0232",
    "title": "Check if String is Isogram",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is an isogram. An isogram is a word or phrase in which no letter is repeated. Ignore case.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters, containing only English letters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"Isogram\" or \"Not an Isogram\".",
    "starter_code": "# Check if a string is an isogram.",
    "test_cases": [
      {
        "input": [
          "lumberjack"
        ],
        "expected_output": "Isogram"
      },
      {
        "input": [
          "hello"
        ],
        "expected_output": "Not an Isogram"
      },
      {
        "input": [
          "Ape"
        ],
        "expected_output": "Isogram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0233",
    "title": "Find Second Smallest Number in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and finds the second smallest number in the list. Assume there will always be at least two distinct numbers.\n\n**Constraints**\nThe list will contain between 2 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the second smallest number.",
    "starter_code": "# Find the second smallest number in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "2 5 5 5"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "100 10 50 20"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0234",
    "title": "Remove All Occurrences of Character from String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a character as input. Remove all occurrences of the given character from the string, case-insensitive.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\nThe character will be a single English letter.\n\nInput format:\nTwo lines: first line with the string, second line with the character.\n\nOutput format:\nA single string with the character removed.",
    "starter_code": "# Remove all occurrences of a character from a string.",
    "test_cases": [
      {
        "input": [
          "Hello World",
          "l"
        ],
        "expected_output": "Heo Word"
      },
      {
        "input": [
          "Programming",
          "g"
        ],
        "expected_output": "Programmin"
      },
      {
        "input": [
          "Apple",
          "p"
        ],
        "expected_output": "Ale"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0235",
    "title": "Count Words of Specific Length",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and an integer `target_length` as input. Count how many words in the sentence have exactly that length.\n\n**Constraints**\nThe input sentence will have a length between 0 and 100 characters.\n`target_length` will be between 1 and 20.\nWords contain only English letters and are separated by single spaces.\n\nInput format:\nTwo lines: first line with the sentence, second line with `target_length`.\n\nOutput format:\nA single integer representing the count.",
    "starter_code": "# Count words of specific length.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry",
          "6"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "hello world",
          "5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "a bc def",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0236",
    "title": "Simple Login System",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a basic login system. It has a predefined username and password. Take user input for username and password and check if they match. Assume case-sensitive.\n\nPredefined Username: `user123`\nPredefined Password: `Pass@123`\n\n**Constraints**\nInput strings will have lengths between 1 and 50 characters.\n\nInput format:\nTwo lines: first line with entered username, second line with entered password.\n\nOutput format:\nA string: \"Login Successful\" or \"Invalid Credentials\".",
    "starter_code": "# Simulate a simple login system.",
    "test_cases": [
      {
        "input": [
          "user123",
          "Pass@123"
        ],
        "expected_output": "Login Successful"
      },
      {
        "input": [
          "user123",
          "WrongPass"
        ],
        "expected_output": "Invalid Credentials"
      },
      {
        "input": [
          "wronguser",
          "Pass@123"
        ],
        "expected_output": "Invalid Credentials"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0237",
    "title": "Convert Base 10 to Base N",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a decimal integer `N` and a target base `B` as input, and converts `N` to its representation in base `B`. Base `B` can be between 2 and 10. Do not use built-in base conversion functions.\n\n**Constraints**\n`N` will be between 0 and 1000.\n`B` will be between 2 and 10.\n\nInput format:\nTwo lines: `N` (integer), `B` (integer).\n\nOutput format:\nA string representing the number in base `B`.",
    "starter_code": "# Convert base 10 to base N.",
    "test_cases": [
      {
        "input": [
          "10",
          "2"
        ],
        "expected_output": "1010"
      },
      {
        "input": [
          "10",
          "8"
        ],
        "expected_output": "12"
      },
      {
        "input": [
          "25",
          "3"
        ],
        "expected_output": "221"
      },
      {
        "input": [
          "0",
          "2"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0238",
    "title": "Convert Base N to Base 10",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `S` representing a number in base `B`, and the base `B` itself, as input. Convert `S` to its decimal (base 10) integer equivalent. Base `B` can be between 2 and 10. Do not use built-in base conversion functions.\n\n**Constraints**\n`S` will have a length between 1 and 10 characters and contain valid digits for base `B`.\n`B` will be between 2 and 10.\n\nInput format:\nTwo lines: `S` (string), `B` (integer).\n\nOutput format:\nA single integer representing the decimal value.",
    "starter_code": "# Convert base N to base 10.",
    "test_cases": [
      {
        "input": [
          "1010",
          "2"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "12",
          "8"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "221",
          "3"
        ],
        "expected_output": "25"
      },
      {
        "input": [
          "0",
          "5"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0239",
    "title": "Check if String is Balanced Parentheses",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string containing only '(', ')', '{', '}', '[' and ']' as input, and determines if the input string is valid. An input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA string: \"Valid\" or \"Invalid\".",
    "starter_code": "# Check if string has balanced parentheses.",
    "test_cases": [
      {
        "input": [
          "()[]{}"
        ],
        "expected_output": "Valid"
      },
      {
        "input": [
          "([{}])"
        ],
        "expected_output": "Valid"
      },
      {
        "input": [
          "(]"
        ],
        "expected_output": "Invalid"
      },
      {
        "input": [
          "{[]"
        ],
        "expected_output": "Invalid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0240",
    "title": "Find Nth Largest Element in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and an integer `N` as input. Find the $N$-th largest element in the list. Assume the list is unsorted.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n`N` will be between 1 and the length of the list.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `N`.\n\nOutput format:\nA single integer representing the $N$-th largest element.",
    "starter_code": "# Find the Nth largest element in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15",
          "2"
        ],
        "expected_output": "15"
      },
      {
        "input": [
          "3 1 4 1 5 9 2 6",
          "4"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "100 10 50 20",
          "1"
        ],
        "expected_output": "100"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0241",
    "title": "Check if List is Sorted Descending",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and determines if the list is sorted in descending order.\n\n**Constraints**\nThe list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA string: \"Sorted Descending\" or \"Not Sorted Descending\".",
    "starter_code": "# Check if a list is sorted in descending order.",
    "test_cases": [
      {
        "input": [
          "5 4 3 2 1"
        ],
        "expected_output": "Sorted Descending"
      },
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "Not Sorted Descending"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "Sorted Descending"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "Sorted Descending"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0242",
    "title": "Remove Nth Occurrence of Character",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string, a character, and an integer `N` as input. Remove the `N`-th occurrence of the character from the string. If the `N`-th occurrence does not exist, return the original string.\n\n**Constraints**\nThe input string will have a length between 0 and 100 characters.\nThe character will be a single English letter.\n`N` will be between 1 and 100.\n\nInput format:\nThree lines: first line with the string, second line with the character, third line with `N`.\n\nOutput format:\nA single string.",
    "starter_code": "# Remove Nth occurrence of a character.",
    "test_cases": [
      {
        "input": [
          "banana",
          "a",
          "2"
        ],
        "expected_output": "bnana"
      },
      {
        "input": [
          "Programming",
          "m",
          "1"
        ],
        "expected_output": "Prograiming"
      },
      {
        "input": [
          "test",
          "t",
          "3"
        ],
        "expected_output": "test"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0243",
    "title": "Generate Random Password",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `length` as input and generates a random password of that length. The password should consist of a mix of uppercase letters, lowercase letters, and digits. (Note: for testing purposes, a simple combination can be used, actual randomness is not strictly required but the mix of chars is).\n\n**Constraints**\n`length` will be between 5 and 15.\n\nInput format:\nA single integer `length`.\n\nOutput format:\nA single string representing the random password.",
    "starter_code": "# Generate a random password.",
    "test_cases": [
      {
        "input": [
          "8"
        ],
        "expected_output": "Example for length 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0244",
    "title": "Check if Point is Inside Circle",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the coordinates of the center of a circle $(cx, cy)$, its radius $r$, and the coordinates of a point $(px, py)$ as input. Determine if the point lies inside or on the boundary of the circle.\n\nFormula: distance between two points $(x_1, y_1)$ and $(x_2, y_2)$ is $\\sqrt{(x_2-x_1)^2 + (y_2-y_1)^2}$.\n\n**Constraints**\nAll coordinates and radius will be floating-point numbers between -100.0 and 100.0.\n\nInput format:\nFour lines: $cx, cy, r, px, py$ (floats).\n\nOutput format:\nA string: \"Inside/On Boundary\" or \"Outside\".",
    "starter_code": "# Check if a point is inside a circle.",
    "test_cases": [
      {
        "input": [
          "0",
          "0",
          "5",
          "3",
          "3"
        ],
        "expected_output": "Inside/On Boundary"
      },
      {
        "input": [
          "0",
          "0",
          "5",
          "4",
          "4"
        ],
        "expected_output": "Inside/On Boundary"
      },
      {
        "input": [
          "0",
          "0",
          "5",
          "6",
          "6"
        ],
        "expected_output": "Outside"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0245",
    "title": "Check if a Number is a Power of Two",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is a power of two (i.e., can be expressed as $2^k$ for some non-negative integer $k$).\n\n**Constraints**\nThe input integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Check if a number is a power of two.",
    "test_cases": [
      {
        "input": [
          "8"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "6"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0246",
    "title": "Find Majority Element in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers as input and finds the majority element. The majority element is the element that appears more than $N/2$ times, where $N$ is the size of the list. Assume a majority element always exists.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA single line with space-separated integers.\n\nOutput format:\nA single integer representing the majority element.",
    "starter_code": "# Find the majority element in a list.",
    "test_cases": [
      {
        "input": [
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0247",
    "title": "Sort String Alphabetically",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and sorts its characters alphabetically. Ignore case for sorting but preserve original case in output. (e.g., 'bAc' -> 'Acb' or 'aBc') for now, let's just sort by ASCII value to simplify.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters, containing only English letters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single string with characters sorted alphabetically (by ASCII value).",
    "starter_code": "# Sort a string alphabetically.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "ehllo"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "HnoptY"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0248",
    "title": "Check if List is Subset of Another",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two space-separated lists of integers (List A and List B) as input and determines if List A is a subset of List B (i.e., all elements of A are present in B).\n\n**Constraints**\nEach list will contain between 0 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nTwo lines: space-separated integers for List A, space-separated integers for List B.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Check if List A is a subset of List B.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "1 2 3 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 5",
          "1 2 3 4"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "",
          "1 2 3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0249",
    "title": "Find Longest Palindromic Substring",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and finds the longest palindromic substring within it. If there are multiple such substrings, return the first one encountered (leftmost).\n\n**Constraints**\nThe input string will have a length between 1 and 20 characters, containing only lowercase English letters.\n\nInput format:\nA single line with the string.\n\nOutput format:\nA single string representing the longest palindromic substring.",
    "starter_code": "# Find the longest palindromic substring.",
    "test_cases": [
      {
        "input": [
          "babad"
        ],
        "expected_output": "bab"
      },
      {
        "input": [
          "cbbd"
        ],
        "expected_output": "bb"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "a"
      },
      {
        "input": [
          "racecar"
        ],
        "expected_output": "racecar"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0250",
    "title": "Calculate Permutations (nPr)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the number of permutations ($nPr$) of `r` items selected from a set of `n` items.\n\nFormula:\n$nPr = n! / (n-r)!$\n\n**Constraints**\n`n` will be between 0 and 10.\n`r` will be between 0 and `n`.\n\nInput format:\nTwo lines: `n` (integer), `r` (integer).\n\nOutput format:\nA single integer representing the number of permutations.",
    "starter_code": "# Calculate permutations (nPr).",
    "test_cases": [
      {
        "input": [
          "5",
          "2"
        ],
        "expected_output": "20"
      },
      {
        "input": [
          "3",
          "3"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "4",
          "0"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0251",
    "title": "Binary Search in a Sorted List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that performs a binary search on a sorted list of integers to find a target value. Return the index of the target if found, otherwise return -1.\n\n**Constraints**\nThe list will contain between 1 and 100 integers, sorted in ascending order.\nIntegers will be between -1000 and 1000.\nTarget will be an integer between -1000 and 1000.\n\nInput format:\nFirst line: space-separated integers for the sorted list.\nSecond line: the target integer.\n\nOutput format:\nA single integer representing the index or -1.",
    "starter_code": "# Perform binary search on a sorted list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50",
          "30"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1 5 10 15 20",
          "7"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "5",
          "5"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0252",
    "title": "Implement Queue using List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a basic queue using a list. Implement 'ENQUEUE <value>' to add an element to the rear and 'DEQUEUE' to remove an element from the front. If DEQUEUE is called on an empty queue, output \"Queue Empty\". After all operations, print the remaining elements of the queue.\n\n**Constraints**\nValues are integers between 0 and 100.\nThere will be between 1 and 10 operations.\n\nInput format:\nMultiple lines: operations.\n\nOutput format:\nSpace-separated integers representing the final queue elements, or \"Queue Empty\" if no elements remaining.",
    "starter_code": "# Implement a queue using a list.",
    "test_cases": [
      {
        "input": [
          "ENQUEUE 10",
          "ENQUEUE 20",
          "DEQUEUE",
          "ENQUEUE 30",
          "DEQUEUE"
        ],
        "expected_output": "30"
      },
      {
        "input": [
          "DEQUEUE",
          "ENQUEUE 5"
        ],
        "expected_output": "Queue Empty\n5"
      },
      {
        "input": [
          "DEQUEUE"
        ],
        "expected_output": "Queue Empty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0253",
    "title": "Check if a String is a Pangram",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is a pangram. A pangram is a sentence or phrase that contains every letter of the alphabet at least once (case-insensitive).\n\n**Constraints**\nThe string will contain between 1 and 200 characters.\n\nInput format:\nA single string.\n\nOutput format:\nA string: \"Pangram\" or \"Not a Pangram\".",
    "starter_code": "# Check if a string is a pangram.",
    "test_cases": [
      {
        "input": [
          "The quick brown fox jumps over the lazy dog"
        ],
        "expected_output": "Pangram"
      },
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "Not a Pangram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0254",
    "title": "Run-Length Encoding",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement Run-Length Encoding (RLE) for a given string. RLE is a form of data compression where consecutive identical characters are replaced by the count of the character and the character itself. For example, \"AAABBC\" becomes \"3A2B1C\".\n\n**Constraints**\nThe string will contain only uppercase English letters, between 1 and 50 characters long.\n\nInput format:\nA single string.\n\nOutput format:\nThe RLE encoded string.",
    "starter_code": "# Implement Run-Length Encoding.",
    "test_cases": [
      {
        "input": [
          "AAABBC"
        ],
        "expected_output": "3A2B1C"
      },
      {
        "input": [
          "ABC"
        ],
        "expected_output": "1A1B1C"
      },
      {
        "input": [
          "AAAAA"
        ],
        "expected_output": "5A"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0255",
    "title": "Find Second Largest Element in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and finds the second largest element. Assume there will always be at least two distinct elements.\n\n**Constraints**\nThe list will contain between 2 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the second largest element.",
    "starter_code": "# Find the second largest element in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "40"
      },
      {
        "input": [
          "100 10 50 20"
        ],
        "expected_output": "50"
      },
      {
        "input": [
          "5 5 5 10 10"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0256",
    "title": "Decimal to Hexadecimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a non-negative decimal integer to its hexadecimal representation.\n\n**Constraints**\nInput integer will be between 0 and 255.\n\nInput format:\nA single integer (decimal).\n\nOutput format:\nA single string representing the hexadecimal number (uppercase letters for A-F).",
    "starter_code": "# Convert decimal to hexadecimal.",
    "test_cases": [
      {
        "input": [
          "255"
        ],
        "expected_output": "FF"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "A"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "26"
        ],
        "expected_output": "1A"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0257",
    "title": "Hexadecimal to Decimal Converter",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a hexadecimal string (composed of '0's-'9's, 'A's-'F's) to its decimal integer representation.\n\n**Constraints**\nThe hexadecimal string length will be between 1 and 2 characters.\n\nInput format:\nA single string (hexadecimal).\n\nOutput format:\nA single integer (decimal).",
    "starter_code": "# Convert hexadecimal to decimal.",
    "test_cases": [
      {
        "input": [
          "FF"
        ],
        "expected_output": "255"
      },
      {
        "input": [
          "A"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "1A"
        ],
        "expected_output": "26"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0258",
    "title": "Simple Regular Expression Matcher",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that checks if a given string matches a very simple regular expression pattern. The pattern can only contain literal characters and the wildcard '.' (matches any single character). Return \"Match\" or \"No Match\".\n\n**Constraints**\nString and pattern length will be between 1 and 20.\n\nInput format:\nFirst line: the string.\nSecond line: the pattern.\n\nOutput format:\nA string: \"Match\" or \"No Match\".",
    "starter_code": "# Implement a simple regex matcher.",
    "test_cases": [
      {
        "input": [
          "apple",
          "ap.le"
        ],
        "expected_output": "Match"
      },
      {
        "input": [
          "banana",
          "b.nana"
        ],
        "expected_output": "Match"
      },
      {
        "input": [
          "cat",
          "dog"
        ],
        "expected_output": "No Match"
      },
      {
        "input": [
          "data",
          "dat."
        ],
        "expected_output": "Match"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0259",
    "title": "Check if a Number is Armstrong",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is an Armstrong number. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\nFor example, 153 is an Armstrong number because $1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153$.\n\n**Constraints**\nInput integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Armstrong Number\" or \"Not an Armstrong Number\".",
    "starter_code": "# Check if a number is an Armstrong number.",
    "test_cases": [
      {
        "input": [
          "153"
        ],
        "expected_output": "Armstrong Number"
      },
      {
        "input": [
          "370"
        ],
        "expected_output": "Armstrong Number"
      },
      {
        "input": [
          "123"
        ],
        "expected_output": "Not an Armstrong Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0260",
    "title": "Reverse a Linked List (Conceptual)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sequence of integers representing the values in a singly linked list, reverse the list conceptually and print the values of the reversed list.\n\n**Constraints**\nThe list will contain between 0 and 10 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nSpace-separated integers representing the linked list nodes.\n\nOutput format:\nSpace-separated integers representing the reversed linked list.",
    "starter_code": "# Reverse a conceptual linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0261",
    "title": "Find Intersection of Multiple Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an N number of lists of integers as input and finds the intersection of all lists (elements common to all lists). The output should contain only unique common elements, sorted in ascending order.\n\n**Constraints**\nThere will be between 2 and 5 lists.\nEach list will contain between 1 and 20 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nMultiple lines, each with space-separated integers for a list.\n\nOutput format:\nSpace-separated integers of the intersection, sorted. If no common elements, print \"No Intersection\".",
    "starter_code": "# Find the intersection of multiple lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3 4 5 6 7",
          "4 5 8 9",
          ""
        ],
        "expected_output": "4 5"
      },
      {
        "input": [
          "1 2",
          "3 4",
          "5 6",
          ""
        ],
        "expected_output": "No Intersection"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0262",
    "title": "Find Union of Multiple Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an N number of lists of integers as input and finds the union of all lists (all unique elements from all lists). The output should contain all unique elements, sorted in ascending order.\n\n**Constraints**\nThere will be between 2 and 5 lists.\nEach list will contain between 1 and 20 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nMultiple lines, each with space-separated integers for a list.\n\nOutput format:\nSpace-separated integers of the union, sorted.",
    "starter_code": "# Find the union of multiple lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "3 4 5",
          "5 6 7"
        ],
        "expected_output": "1 2 3 4 5 6 7"
      },
      {
        "input": [
          "10 20",
          "30 40"
        ],
        "expected_output": "10 20 30 40"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0263",
    "title": "Matrix Transpose (2x2)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the transpose of a 2x2 matrix. The transpose of a matrix is obtained by changing rows to columns and columns to rows.\n\n**Constraints**\nMatrix elements will be integers between -100 and 100.\n\nInput format:\nTwo lines, each representing a row of the matrix. Elements are space-separated.\nExample: A11 A12\nA21 A22\n\nOutput format:\nThe resulting 2x2 transposed matrix, row by row, with elements space-separated.",
    "starter_code": "# Calculate the transpose of a 2x2 matrix.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4"
        ],
        "expected_output": "1 3\n2 4"
      },
      {
        "input": [
          "5 6",
          "7 8"
        ],
        "expected_output": "5 7\n6 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0264",
    "title": "Check if a String is an Isogram",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is an isogram. An isogram is a word or phrase in which no letter is repeated. Case-insensitive, ignore spaces and hyphens.\n\n**Constraints**\nThe string will contain between 1 and 50 characters.\n\nInput format:\nA single string.\n\nOutput format:\nA string: \"Isogram\" or \"Not an Isogram\".",
    "starter_code": "# Check if a string is an isogram.",
    "test_cases": [
      {
        "input": [
          "dermatoglyphics"
        ],
        "expected_output": "Isogram"
      },
      {
        "input": [
          "hello"
        ],
        "expected_output": "Not an Isogram"
      },
      {
        "input": [
          "six-year-old"
        ],
        "expected_output": "Isogram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0265",
    "title": "Find Missing Number in Sequence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers from 1 to N (inclusive) with one number missing. Find the missing number.\n\n**Constraints**\nThe list will contain between 0 and 99 integers.\nN will be between 1 and 100.\n\nInput format:\nFirst line: space-separated integers for the list.\nSecond line: N (the maximum number in the sequence).\n\nOutput format:\nA single integer representing the missing number.",
    "starter_code": "# Find the missing number in a sequence.",
    "test_cases": [
      {
        "input": [
          "1 2 4 5",
          "5"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 3 4",
          "4"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0266",
    "title": "Find Kth Smallest Element in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and an integer `K` as input. Find the $K$-th smallest element in the list. Assume the list is unsorted.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n`K` will be between 1 and the length of the list.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `K`.\n\nOutput format:\nA single integer representing the $K$-th smallest element.",
    "starter_code": "# Find the Kth smallest element in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15",
          "2"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "3 1 4 1 5 9 2 6",
          "4"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "100 10 50 20",
          "1"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0267",
    "title": "Calculate Standard Deviation",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of numbers as input and calculates their population standard deviation. Round the result to 2 decimal places.\n\n**Constraints**\nThe list will contain between 2 and 20 numbers.\nNumbers will be integers between 0 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single floating-point number representing the standard deviation.",
    "starter_code": "# Calculate standard deviation.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "1.41"
      },
      {
        "input": [
          "10 10 10 10"
        ],
        "expected_output": "0.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0268",
    "title": "Validate Email Address Format",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and validates if it is a simple email address. A valid email should contain exactly one '@' symbol and at least one '.' after the '@' symbol. It must not start or end with '@' or '.'.\n\n**Constraints**\nThe input string will have a length between 5 and 50 characters.\n\nInput format:\nA single line with the email string.\n\nOutput format:\nA string: \"Valid Email\" or \"Invalid Email\".",
    "starter_code": "# Validate email address format.",
    "test_cases": [
      {
        "input": [
          "test@example.com"
        ],
        "expected_output": "Valid Email"
      },
      {
        "input": [
          "invalid-email"
        ],
        "expected_output": "Invalid Email"
      },
      {
        "input": [
          "user@.com"
        ],
        "expected_output": "Invalid Email"
      },
      {
        "input": [
          "@example.com"
        ],
        "expected_output": "Invalid Email"
      },
      {
        "input": [
          "user@example.c"
        ],
        "expected_output": "Invalid Email"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0269",
    "title": "Longest Common Prefix",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings as input and finds the longest common prefix string amongst them. If there is no common prefix, return an empty string.\n\n**Constraints**\nThere will be between 1 and 10 strings in the list.\nEach string length will be between 0 and 20.\nStrings consist of lowercase English letters.\n\nInput format:\nMultiple lines, each with a string.\n\nOutput format:\nA single string representing the longest common prefix.",
    "starter_code": "# Find the longest common prefix.",
    "test_cases": [
      {
        "input": [
          "flower",
          "flow",
          "flight"
        ],
        "expected_output": "fl"
      },
      {
        "input": [
          "dog",
          "racecar",
          "car"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "apple",
          "apricot"
        ],
        "expected_output": "ap"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0270",
    "title": "Convert Base N to Decimal",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a number represented as a string in a given base N to its decimal (base 10) integer equivalent.\n\n**Constraints**\nThe input number string will have a length between 1 and 10.\nThe base N will be an integer between 2 and 16.\nFor bases > 10, use 'A'-'F' for digits 10-15.\n\nInput format:\nFirst line: the number string.\nSecond line: the base N (integer).\n\nOutput format:\nA single integer (decimal).",
    "starter_code": "# Convert a number from base N to decimal.",
    "test_cases": [
      {
        "input": [
          "101",
          "2"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "A",
          "16"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "1A",
          "16"
        ],
        "expected_output": "26"
      },
      {
        "input": [
          "23",
          "4"
        ],
        "expected_output": "11"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0271",
    "title": "Matrix Diagonal Sum",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the sum of the elements on the main diagonal of a square matrix.\n\n**Constraints**\nMatrix dimensions $N \times N$ where $N$ is between 1 and 5.\nElements will be integers between -100 and 100.\n\nInput format:\nFirst line: $N$ (dimension).\nFollowing $N$ lines: $N$ space-separated integers for each row.\n\nOutput format:\nA single integer representing the sum of the diagonal elements.",
    "starter_code": "# Calculate the sum of the main diagonal of a matrix.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "15"
      },
      {
        "input": [
          "2",
          "10 20",
          "30 40"
        ],
        "expected_output": "50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0272",
    "title": "Subarray with Given Sum (Positive Numbers)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that finds a contiguous subarray within a list of positive integers that sums to a given target sum. If multiple subarrays exist, return the starting and ending indices (1-based) of the first one found. If no such subarray exists, print \"No Subarray Found\".\n\n**Constraints**\nThe list will contain between 1 and 50 positive integers.\nIntegers will be between 1 and 100.\nTarget sum will be between 1 and 5000.\n\nInput format:\nFirst line: space-separated integers for the list.\nSecond line: the target sum.\n\nOutput format:\nTwo space-separated integers (start_index end_index) or \"No Subarray Found\".",
    "starter_code": "# Find subarray with given sum.",
    "test_cases": [
      {
        "input": [
          "1 4 20 3 10 5",
          "33"
        ],
        "expected_output": "2 4"
      },
      {
        "input": [
          "1 2 3 4 5",
          "9"
        ],
        "expected_output": "2 4"
      },
      {
        "input": [
          "1 2 3",
          "7"
        ],
        "expected_output": "No Subarray Found"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0273",
    "title": "Kadane's Algorithm (Max Subarray Sum)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers (containing both positive and negative integers).\n\n**Constraints**\nThe array will contain between 1 and 50 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the maximum subarray sum.",
    "starter_code": "# Implement Kadane's Algorithm to find max subarray sum.",
    "test_cases": [
      {
        "input": [
          "-2 1 -3 4 -1 2 1 -5 4"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5 4 -1 7 8"
        ],
        "expected_output": "23"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0274",
    "title": "Count Inversions in an Array",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that counts the number of inversions in a given array. An inversion is a pair of indices (i, j) such that i < j and A[i] > A[j].\n\n**Constraints**\nThe array will contain between 1 and 20 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the number of inversions.",
    "starter_code": "# Count inversions in an array.",
    "test_cases": [
      {
        "input": [
          "1 20 6 4 5"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "5 4 3 2 1"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0275",
    "title": "Implement Stack using List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a basic stack using a list. Implement 'PUSH <value>' to add an element to the top and 'POP' to remove an element from the top. If POP is called on an empty stack, output \"Stack Empty\". After all operations, print the remaining elements of the stack (from bottom to top).\n\n**Constraints**\nValues are integers between 0 and 100.\nThere will be between 1 and 10 operations.\n\nInput format:\nMultiple lines: operations.\n\nOutput format:\nSpace-separated integers representing the final stack elements, or \"Stack Empty\" if no elements remaining.",
    "starter_code": "# Implement a stack using a list.",
    "test_cases": [
      {
        "input": [
          "PUSH 10",
          "PUSH 20",
          "POP",
          "PUSH 30",
          "POP"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "POP",
          "PUSH 5"
        ],
        "expected_output": "Stack Empty\n5"
      },
      {
        "input": [
          "POP"
        ],
        "expected_output": "Stack Empty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0276",
    "title": "Validate Credit Card Number (Luhn Algorithm)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that validates a credit card number using the Luhn Algorithm. The input will be a string of digits. Return \"Valid\" or \"Invalid\".\n\n**Constraints**\nThe credit card number string will have a length between 13 and 19 characters, containing only digits.\n\nInput format:\nA single string (credit card number).\n\nOutput format:\nA string: \"Valid\" or \"Invalid\".",
    "starter_code": "# Validate credit card number using Luhn Algorithm.",
    "test_cases": [
      {
        "input": [
          "79927398713"
        ],
        "expected_output": "Invalid"
      },
      {
        "input": [
          "49927398716"
        ],
        "expected_output": "Valid"
      },
      {
        "input": [
          "1234567890123456"
        ],
        "expected_output": "Invalid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0277",
    "title": "Find All Permutations of a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that generates all possible permutations of a given string. The permutations should be printed in lexicographical (alphabetical) order.\n\n**Constraints**\nThe input string will contain unique lowercase English letters and have a length between 1 and 5.\n\nInput format:\nA single string.\n\nOutput format:\nEach permutation on a new line, sorted lexicographically.",
    "starter_code": "# Find all permutations of a string.",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "abc\nacb\nbac\nbca\ncab\ncba"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "a"
      },
      {
        "input": [
          "ab"
        ],
        "expected_output": "ab\nba"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0278",
    "title": "Find Longest Substring Without Repeating Characters",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that finds the length of the longest substring in a given string without repeating characters.\n\n**Constraints**\nThe input string will have a length between 0 and 50 characters.\n\nInput format:\nA single string.\n\nOutput format:\nA single integer representing the length of the longest substring.",
    "starter_code": "# Find longest substring without repeating characters.",
    "test_cases": [
      {
        "input": [
          "abcabcbb"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "bbbbb"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "pwwkew"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "au"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0279",
    "title": "Trapping Rain Water (Simple)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. Consider a simplified scenario where walls are adjacent.\n\n**Constraints**\nThe array will contain between 1 and 20 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nA space-separated string of integers representing heights.\n\nOutput format:\nA single integer representing the trapped water.",
    "starter_code": "# Calculate trapped rain water.",
    "test_cases": [
      {
        "input": [
          "0 1 0 2 1 0 1 3 2 1 2 1"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "4 2 0 3 2 5"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0280",
    "title": "Evaluate Postfix Expression",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that evaluates a postfix expression. The expression will consist of integers and the operators '+', '-', '*', '/'. Assume valid postfix expressions.\n\n**Constraints**\nOperands will be integers between -100 and 100.\nOperators will be '+', '-', '*', '/'.\nExpression elements are space-separated.\n\nInput format:\nA single string representing the postfix expression.\n\nOutput format:\nA single integer result.",
    "starter_code": "# Evaluate a postfix expression.",
    "test_cases": [
      {
        "input": [
          "2 3 +"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "10 2 3 + *"
        ],
        "expected_output": "50"
      },
      {
        "input": [
          "4 2 /"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "10 5 / 2 *"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0281",
    "title": "Smallest K Elements in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and an integer `K` as input. Find the smallest `K` elements in the list. The output should be sorted in ascending order.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n`K` will be between 1 and the length of the list.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `K`.\n\nOutput format:\nSpace-separated integers representing the smallest K elements.",
    "starter_code": "# Find the smallest K elements in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15",
          "3"
        ],
        "expected_output": "5 8 10"
      },
      {
        "input": [
          "3 1 4 1 5 9 2 6",
          "2"
        ],
        "expected_output": "1 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0282",
    "title": "Largest K Elements in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated list of integers and an integer `K` as input. Find the largest `K` elements in the list. The output should be sorted in descending order.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n`K` will be between 1 and the length of the list.\n\nInput format:\nTwo lines: first line with space-separated integers, second line with `K`.\n\nOutput format:\nSpace-separated integers representing the largest K elements.",
    "starter_code": "# Find the largest K elements in a list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 8 15",
          "3"
        ],
        "expected_output": "20 15 10"
      },
      {
        "input": [
          "3 1 4 1 5 9 2 6",
          "2"
        ],
        "expected_output": "9 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0283",
    "title": "Next Permutation",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement the \"next permutation\" algorithm. Given a list of integers, rearrange them into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\n\n**Constraints**\nThe list will contain between 1 and 10 integers.\nIntegers will be between 0 and 9.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nSpace-separated integers of the next permutation.",
    "starter_code": "# Implement next permutation.",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 3 2"
      },
      {
        "input": [
          "3 2 1"
        ],
        "expected_output": "1 2 3"
      },
      {
        "input": [
          "1 1 5"
        ],
        "expected_output": "1 5 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0284",
    "title": "Rotate Matrix 90 Degrees Clockwise",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that rotates a square matrix by 90 degrees clockwise. The rotation should be in-place if possible (conceptually for this problem).\n\n**Constraints**\nMatrix dimensions $N \times N$ where $N$ is between 1 and 5.\nElements will be integers between 0 and 100.\n\nInput format:\nFirst line: $N$ (dimension).\nFollowing $N$ lines: $N$ space-separated integers for each row.\n\nOutput format:\nThe rotated matrix, row by row, with elements space-separated.",
    "starter_code": "# Rotate a matrix 90 degrees clockwise.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "7 4 1\n8 5 2\n9 6 3"
      },
      {
        "input": [
          "2",
          "1 2",
          "3 4"
        ],
        "expected_output": "3 1\n4 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0285",
    "title": "Spiral Matrix Traversal (Simple)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a rectangular matrix, return all elements of the matrix in spiral order, starting from the top-left corner and moving clockwise.\n\n**Constraints**\nMatrix dimensions $M \times N$ where $M, N$ are between 1 and 3.\nElements will be integers between 0 and 100.\n\nInput format:\nFirst line: two integers $M$ (rows) and $N$ (columns).\nFollowing $M$ lines: $N$ space-separated integers for each row.\n\nOutput format:\nSpace-separated integers representing the spiral order traversal.",
    "starter_code": "# Perform spiral matrix traversal.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 2 3",
          "8 9 4",
          "7 6 5"
        ],
        "expected_output": "1 2 3 4 5 6 7 8 9"
      },
      {
        "input": [
          "1 4",
          "1 2 3 4"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0286",
    "title": "Longest Increasing Subsequence (Length Only)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that finds the length of the longest increasing subsequence in a given list of integers.\n\n**Constraints**\nThe list will contain between 1 and 20 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the length of the longest increasing subsequence.",
    "starter_code": "# Find the length of the longest increasing subsequence.",
    "test_cases": [
      {
        "input": [
          "10 9 2 5 3 7 101 18"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 1 0 3 2 3"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "7 7 7 7 7"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0287",
    "title": "Coin Change (Minimum Coins)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an amount and a list of coin denominations, find the minimum number of coins needed to make up that amount. If the amount cannot be made up, return -1.\n\n**Constraints**\nAmount will be between 1 and 100.\nCoin denominations will be positive integers, unique, and between 1 and 50.\nThere will be between 1 and 5 coin denominations.\n\nInput format:\nFirst line: the amount (integer).\nSecond line: space-separated integers for coin denominations.\n\nOutput format:\nA single integer representing the minimum number of coins or -1.",
    "starter_code": "# Calculate minimum coins for coin change.",
    "test_cases": [
      {
        "input": [
          "11",
          "1 2 5"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "2"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "10",
          "1 5 10"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0288",
    "title": "Tower of Hanoi (Steps Only)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the minimum number of moves required to solve the Tower of Hanoi puzzle for N disks. Do not simulate the moves, just return the count.\n\n**Constraints**\nN (number of disks) will be an integer between 1 and 10.\n\nInput format:\nA single integer N.\n\nOutput format:\nA single integer representing the minimum number of moves.",
    "starter_code": "# Calculate minimum moves for Tower of Hanoi.",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "31"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0289",
    "title": "Find the Median of a List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and finds its median. If the list has an odd number of elements, the median is the middle element. If it has an even number, the median is the average of the two middle elements. Round to 2 decimal places if necessary.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between -1000 and 1000.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single floating-point number representing the median.",
    "starter_code": "# Find the median of a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3.00"
      },
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "2.50"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "10.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0290",
    "title": "Check if Two Strings are Permutations",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and determines if one is a permutation of the other. All characters must be considered (case-sensitive).\n\n**Constraints**\nStrings will contain between 0 and 50 characters.\n\nInput format:\nTwo lines, each with a string.\n\nOutput format:\nA string: \"Permutations\" or \"Not Permutations\".",
    "starter_code": "# Check if two strings are permutations.",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "Permutations"
      },
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "Not Permutations"
      },
      {
        "input": [
          "aabbc",
          "abcab"
        ],
        "expected_output": "Permutations"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0291",
    "title": "Find the First Non-Repeating Character",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and finds the first non-repeating character in it. If no such character exists, return an underscore '_'.\n\n**Constraints**\nThe string will contain between 0 and 50 lowercase English letters.\n\nInput format:\nA single string.\n\nOutput format:\nA single character or '_'.",
    "starter_code": "# Find the first non-repeating character.",
    "test_cases": [
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "l"
      },
      {
        "input": [
          "loveleetcode"
        ],
        "expected_output": "v"
      },
      {
        "input": [
          "aabb"
        ],
        "expected_output": "_"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0292",
    "title": "Find Smallest Common Multiple (LCM of N numbers)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of positive integers as input and finds their Least Common Multiple (LCM). Assume the LCM will not exceed 10^9.\n\n**Constraints**\nThe list will contain between 2 and 5 integers.\nIntegers will be between 1 and 50.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the LCM.",
    "starter_code": "# Find the LCM of N numbers.",
    "test_cases": [
      {
        "input": [
          "2 3 4"
        ],
        "expected_output": "12"
      },
      {
        "input": [
          "7 5"
        ],
        "expected_output": "35"
      },
      {
        "input": [
          "6 8 12"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0293",
    "title": "Pascal's Triangle Row Generator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input and generates the N-th row of Pascal's Triangle (0-indexed). Each number in Pascal's triangle is the sum of the two numbers directly above it.\n\n**Constraints**\nN will be an integer between 0 and 10.\n\nInput format:\nA single integer N.\n\nOutput format:\nSpace-separated integers representing the N-th row.",
    "starter_code": "# Generate the Nth row of Pascal's Triangle.",
    "test_cases": [
      {
        "input": [
          "0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1 1"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "1 4 6 4 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0294",
    "title": "Count Words in a Sentence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and counts the total number of words in it. Words are separated by one or more spaces. Ignore leading/trailing spaces and multiple spaces between words.\n\n**Constraints**\nThe sentence will contain between 0 and 100 characters.\n\nInput format:\nA single string (sentence).\n\nOutput format:\nA single integer representing the word count.",
    "starter_code": "# Count words in a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "  Python   is   fun  "
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "SingleWord"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "   "
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0295",
    "title": "Implement Simple Hash Map (Conceptual)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a simple hash map (dictionary). Support 'PUT <key> <value>' to add/update an entry and 'GET <key>' to retrieve a value. If GET is called for a non-existent key, output \"Key Not Found\". After all operations, print the key-value pairs sorted by key.\n\n**Constraints**\nKeys and values are strings (single words, lowercase letters only), length up to 10.\nThere will be between 1 and 10 operations.\n\nInput format:\nMultiple lines: operations.\n\nOutput format:\nKey-value pairs (key value) on new lines, sorted by key. If empty, print \"Empty Map\".",
    "starter_code": "# Implement a simple hash map.",
    "test_cases": [
      {
        "input": [
          "PUT apple 10",
          "PUT banana 20",
          "GET apple",
          "PUT apple 15"
        ],
        "expected_output": "apple 15\nbanana 20"
      },
      {
        "input": [
          "GET orange",
          "PUT grape 5"
        ],
        "expected_output": "Key Not Found\ngrape 5"
      },
      {
        "input": [
          "GET kiwi"
        ],
        "expected_output": "Key Not Found"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0296",
    "title": "Validate IP Address (IPv4 Simple)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that validates if a given string is a valid IPv4 address. A valid IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (e.g., \"192.168.1.1\"). No leading zeros for numbers greater than 0.\n\n**Constraints**\nThe input string will have a length between 7 and 15 characters.\n\nInput format:\nA single string (IP address).\n\nOutput format:\nA string: \"Valid IP\" or \"Invalid IP\".",
    "starter_code": "# Validate IPv4 address format.",
    "test_cases": [
      {
        "input": [
          "192.168.1.1"
        ],
        "expected_output": "Valid IP"
      },
      {
        "input": [
          "255.255.255.255"
        ],
        "expected_output": "Valid IP"
      },
      {
        "input": [
          "192.168.1.01"
        ],
        "expected_output": "Invalid IP"
      },
      {
        "input": [
          "0.0.0.0"
        ],
        "expected_output": "Valid IP"
      },
      {
        "input": [
          "256.0.0.0"
        ],
        "expected_output": "Invalid IP"
      },
      {
        "input": [
          "1.2.3.4.5"
        ],
        "expected_output": "Invalid IP"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0297",
    "title": "Reverse Words in a String (Advanced)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string containing words and spaces as input and reverses the order of words. Handle multiple spaces between words and leading/trailing spaces by reducing them to single spaces in the output, and ensure no leading/trailing spaces in the result.\n\n**Constraints**\nThe string will contain between 0 and 100 characters.\n\nInput format:\nA single string.\n\nOutput format:\nA single string with words reversed and proper spacing.",
    "starter_code": "# Reverse words in a string (advanced).",
    "test_cases": [
      {
        "input": [
          "the sky is blue"
        ],
        "expected_output": "blue is sky the"
      },
      {
        "input": [
          "  hello world  "
        ],
        "expected_output": "world hello"
      },
      {
        "input": [
          "a good   example"
        ],
        "expected_output": "example good a"
      },
      {
        "input": [
          "  "
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0298",
    "title": "Find All Substrings of a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and generates all possible substrings. The substrings should be printed in lexicographical order.\n\n**Constraints**\nThe input string will contain lowercase English letters and have a length between 1 and 5.\n\nInput format:\nA single string.\n\nOutput format:\nEach substring on a new line, sorted lexicographically.",
    "starter_code": "# Find all substrings of a string.",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "a\nab\nabc\nb\nbc\nc"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "a"
      },
      {
        "input": [
          "dog"
        ],
        "expected_output": "d\ndo\ndog\no\nog\ng"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0299",
    "title": "Find Largest Product of Two Numbers in List",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and finds the largest product that can be obtained from multiplying any two distinct numbers in the list.\n\n**Constraints**\nThe list will contain between 2 and 50 integers.\nIntegers will be between -100 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the largest product.",
    "starter_code": "# Find the largest product of two numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "20"
      },
      {
        "input": [
          "-10 -5 1 2 3"
        ],
        "expected_output": "50"
      },
      {
        "input": [
          "-1 -2 -3"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0300",
    "title": "Remove Nth Node From End of List (Conceptual)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sequence of integers representing the values in a singly linked list, remove the Nth node from the end of the list conceptually and print the values of the modified list.\n\n**Constraints**\nThe list will contain between 1 and 10 integers.\nIntegers will be between 0 and 100.\nN will be between 1 and the length of the list.\n\nInput format:\nFirst line: space-separated integers for the list.\nSecond line: N (integer).\n\nOutput format:\nSpace-separated integers of the modified list. If the list becomes empty, print \"Empty List\".",
    "starter_code": "# Remove Nth node from end of conceptual linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "1 2 3 5"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "Empty List"
      },
      {
        "input": [
          "1 2",
          "2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0301",
    "title": "Binary Tree Level Order Traversal (Conceptual)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sequence of integers representing a complete binary tree (where -1 signifies a null node), perform a level-order (breadth-first) traversal and print the nodes. Assume the input creates a valid complete binary tree.\n\n**Constraints**\nTree will have between 1 and 15 nodes (including nulls).\nNode values will be integers between 0 and 100 or -1 for null.\n\nInput format:\nSpace-separated integers representing the binary tree nodes (level-order, left-to-right).\n\nOutput format:\nSpace-separated integers of the level-order traversal (excluding nulls).",
    "starter_code": "# Perform level-order traversal of a conceptual binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 -1 -1 15 7"
        ],
        "expected_output": "3 9 20 15 7"
      },
      {
        "input": [
          "1 2 3 4 5 -1 -1"
        ],
        "expected_output": "1 2 3 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0302",
    "title": "Find the Peak Element in a Mountain Array",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that finds a peak element in a mountain array. A mountain array is defined as an array that first strictly increases and then strictly decreases. A peak element is an element that is greater than its neighbors.\n\n**Constraints**\nThe array will contain between 3 and 50 integers.\nIntegers will be between 0 and 1000.\nThere will always be exactly one peak element.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the peak element.",
    "starter_code": "# Find the peak element in a mountain array.",
    "test_cases": [
      {
        "input": [
          "0 1 2 3 4 5 4 3 2 1 0"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "10 20 15"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0303",
    "title": "Check if a Number is a Power of Two",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and determines if it is a power of two (i.e., it can be expressed as 2^n for some non-negative integer n).\n\n**Constraints**\nInput integer will be between 1 and 100000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Power of Two\" or \"Not a Power of Two\".",
    "starter_code": "# Check if a number is a power of two.",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "Power of Two"
      },
      {
        "input": [
          "16"
        ],
        "expected_output": "Power of Two"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "Not a Power of Two"
      },
      {
        "input": [
          "1024"
        ],
        "expected_output": "Power of Two"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0304",
    "title": "Sum of Two Numbers (Two Pointers in Sorted Array)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted array of integers and a target sum, find if there exist two numbers in the array that add up to the target sum. Return \"True\" or \"False\".\n\n**Constraints**\nThe array will contain between 2 and 50 integers, sorted ascending.\nIntegers will be between -1000 and 1000.\nTarget sum will be between -2000 and 2000.\n\nInput format:\nFirst line: space-separated integers for the sorted array.\nSecond line: the target sum.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Find if two numbers sum to target in sorted array.",
    "test_cases": [
      {
        "input": [
          "2 7 11 15",
          "9"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 4 5",
          "10"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "-3 -1 0 2 4",
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0305",
    "title": "Reverse Polish Notation (RPN) Converter (Infix to Postfix)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nConvert an infix expression to its equivalent postfix (Reverse Polish Notation) form. The expression will consist of single-digit integers and operators '+', '-', '*', '/', '(', ')'. Assume valid infix expressions.\n\n**Constraints**\nExpression length will be between 1 and 20 characters.\n\nInput format:\nA single string representing the infix expression (no spaces).\n\nOutput format:\nSpace-separated elements of the postfix expression.",
    "starter_code": "# Convert infix to postfix (RPN).",
    "test_cases": [
      {
        "input": [
          "A+B"
        ],
        "expected_output": "A B +"
      },
      {
        "input": [
          "A+B*C"
        ],
        "expected_output": "A B C * +"
      },
      {
        "input": [
          "(A+B)*C"
        ],
        "expected_output": "A B + C *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0306",
    "title": "Find the Majority Element",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that finds the majority element in a list. The majority element is the element that appears more than \u230an / 2\u230b times. You can assume that the list is non-empty and the majority element always exists.\n\n**Constraints**\nThe list will contain between 1 and 50 integers.\nIntegers will be between 0 and 100.\n\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA single integer representing the majority element.",
    "starter_code": "# Find the majority element.",
    "test_cases": [
      {
        "input": [
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0307",
    "title": "Power Function (x^n)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement `pow(x, n)`, which calculates `x` raised to the power `n` (i.e., x^n). Consider both positive and negative `n`. For negative `n`, return the reciprocal.\n\n**Constraints**\nx will be a float between -100.0 and 100.0.\nn will be an integer between -10 and 10.\n\nInput format:\nFirst line: float x.\nSecond line: integer n.\n\nOutput format:\nA single floating-point number, rounded to 4 decimal places.",
    "starter_code": "# Implement power function x^n.",
    "test_cases": [
      {
        "input": [
          "2.0",
          "10"
        ],
        "expected_output": "1024.0000"
      },
      {
        "input": [
          "2.1",
          "3"
        ],
        "expected_output": "9.2610"
      },
      {
        "input": [
          "2.0",
          "-2"
        ],
        "expected_output": "0.2500"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0308",
    "title": "Check if a Number is a Happy Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that determines if a given positive integer is a \"happy number\". A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it enters a loop which does not include 1. Those numbers for which this process ends in 1 are happy numbers.\n\n**Constraints**\nInput integer will be between 1 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA string: \"Happy Number\" or \"Not a Happy Number\".",
    "starter_code": "# Check if a number is a happy number.",
    "test_cases": [
      {
        "input": [
          "19"
        ],
        "expected_output": "Happy Number"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "Not a Happy Number"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "Happy Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0309",
    "title": "Validate Binary Search Tree",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sequence of integers representing a binary tree in level-order (with -1 for null nodes), determine if it is a valid Binary Search Tree (BST). A BST is valid if: the left subtree of a node contains only nodes with keys less than the node's key; the right subtree contains only nodes with keys greater than the node's key; and both the left and right subtrees are also binary search trees.\n\n**Constraints**\nTree will have between 1 and 20 nodes.\nNode values will be integers between -1000 and 1000.\n\nInput format:\nSpace-separated integers for the tree.\n\nOutput format:\nA string: \"Valid BST\" or \"Invalid BST\".",
    "starter_code": "# Check if a conceptual binary tree is a valid BST.",
    "test_cases": [
      {
        "input": [
          "10 5 15 -1 -1 6 20"
        ],
        "expected_output": "Invalid BST"
      },
      {
        "input": [
          "5 3 8 1 4 7 9"
        ],
        "expected_output": "Valid BST"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0310",
    "title": "Lowest Common Ancestor of a BST",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the root of a Binary Search Tree (BST) and two nodes, find the Lowest Common Ancestor (LCA) of the two nodes. The input will be the level-order representation of the BST and the values of the two nodes. Assume the two nodes exist in the tree.\n\n**Constraints**\nTree will have between 2 and 20 nodes.\nNode values are unique integers between 0 and 1000.\n\nInput format:\nFirst line: space-separated integers for the BST.\nSecond line: two space-separated integers for the two nodes.\n\nOutput format:\nA single integer for the LCA's value.",
    "starter_code": "# Find the LCA of two nodes in a BST.",
    "test_cases": [
      {
        "input": [
          "20 10 30 5 15 25 35",
          "5 15"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "20 10 30 5 15 25 35",
          "10 35"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0311",
    "title": "Maximum Depth of Binary Tree",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree represented by a level-order sequence of integers (-1 for null), calculate its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n**Constraints**\nTree will have between 0 and 20 nodes.\n\nInput format:\nSpace-separated integers for the tree. An empty line represents an empty tree.\n\nOutput format:\nA single integer for the maximum depth.",
    "starter_code": "# Calculate the maximum depth of a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 -1 -1 15 7"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 -1 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0312",
    "title": "Kth Largest Element in a Stream (Using Min-Heap)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign a class to find the Kth largest element in a stream of numbers. Implement it conceptually. You are given an initial list of numbers and an integer K. Then, a series of numbers are added to the stream. For each added number, print the current Kth largest element. Use a min-heap of size K for an efficient solution.\n\n**Constraints**\nK is between 1 and 10.\nInitial list has between K and 20 numbers.\nStream adds between 1 and 10 numbers.\nNumbers are between -100 and 100.\n\nInput format:\nFirst line: integer K.\nSecond line: space-separated integers for the initial list.\nSubsequent lines: integers to add to the stream.\n\nOutput format:\nFor each number added, print the Kth largest element on a new line.",
    "starter_code": "# Find Kth largest element in a stream.",
    "test_cases": [
      {
        "input": [
          "3",
          "4 5 8 2",
          "3",
          "5",
          "10",
          "9"
        ],
        "expected_output": "4\n5\n5\n8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0313",
    "title": "Graph Traversal (BFS)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a graph represented by an adjacency list and a starting node, perform a Breadth-First Search (BFS) traversal. Print the nodes in the order they are visited.\n\n**Constraints**\nGraph has up to 10 nodes (0-9).\nGraph is undirected.\n\nInput format:\nFirst line: number of edges E.\nNext E lines: two space-separated integers for an edge.\nLast line: the starting node.\n\nOutput format:\nSpace-separated integers of the BFS traversal.",
    "starter_code": "# Perform BFS on a graph.",
    "test_cases": [
      {
        "input": [
          "6",
          "0 1",
          "0 2",
          "1 2",
          "2 0",
          "2 3",
          "3 3",
          "2"
        ],
        "expected_output": "2 0 1 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0314",
    "title": "Graph Traversal (DFS)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a graph represented by an adjacency list and a starting node, perform a Depth-First Search (DFS) traversal. Print the nodes in the order they are visited.\n\n**Constraints**\nGraph has up to 10 nodes (0-9).\nGraph is undirected.\n\nInput format:\nFirst line: number of edges E.\nNext E lines: two space-separated integers for an edge.\nLast line: the starting node.\n\nOutput format:\nSpace-separated integers of the DFS traversal.",
    "starter_code": "# Perform DFS on a graph.",
    "test_cases": [
      {
        "input": [
          "6",
          "0 1",
          "0 2",
          "1 2",
          "2 0",
          "2 3",
          "3 3",
          "2"
        ],
        "expected_output": "2 0 1 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0315",
    "title": "Detect Cycle in a Directed Graph",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a directed graph represented by an adjacency list, determine if it contains a cycle.\n\n**Constraints**\nGraph has up to 10 nodes (0-9).\n\nInput format:\nFirst line: number of nodes N.\nSecond line: number of edges E.\nNext E lines: two space-separated integers `u v` for a directed edge from `u` to `v`.\n\nOutput format:\nA string: \"Cycle Detected\" or \"No Cycle\".",
    "starter_code": "# Detect a cycle in a directed graph.",
    "test_cases": [
      {
        "input": [
          "4",
          "4",
          "0 1",
          "1 2",
          "2 3",
          "3 1"
        ],
        "expected_output": "Cycle Detected"
      },
      {
        "input": [
          "4",
          "3",
          "0 1",
          "1 2",
          "2 3"
        ],
        "expected_output": "No Cycle"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0316",
    "title": "Coin Change 2 (Number of Combinations)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0. Assume you have an infinite number of each kind of coin. This is a classic unbounded knapsack-style DP problem.\n\n**Constraints**\n`amount` is 0-100. `coins` has 1-5 denominations, values 1-50.\n\nInput format:\nFirst line: integer `amount`.\nSecond line: space-separated integers for `coins`.\n\nOutput format:\nAn integer for the number of combinations.",
    "starter_code": "# Find the number of coin change combinations.",
    "test_cases": [
      {
        "input": [
          "5",
          "1 2 5"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "3",
          "2"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "10",
          "10"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0317",
    "title": "0/1 Knapsack Problem (Value)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value. You cannot break an item. This is the 0/1 knapsack problem.\n\n**Constraints**\nN will be between 1 and 10.\nW will be between 1 and 20.\nWeights and values are between 1 and 100.\n\nInput format:\nFirst line: N W (number of items, knapsack capacity).\nNext N lines: weight value.\n\nOutput format:\nA single integer for the maximum value.",
    "starter_code": "# Solve the 0/1 knapsack problem.",
    "test_cases": [
      {
        "input": [
          "3 50",
          "10 60",
          "20 100",
          "30 120"
        ],
        "expected_output": "220"
      },
      {
        "input": [
          "2 5",
          "3 10",
          "4 12"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0318",
    "title": "Longest Common Subsequence (Length)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings, find the length of the longest common subsequence (LCS). A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.\n\n**Constraints**\nString lengths will be between 1 and 20.\nStrings contain uppercase English letters.\n\nInput format:\nTwo lines, each with a string.\n\nOutput format:\nA single integer for the LCS length.",
    "starter_code": "# Find the length of the Longest Common Subsequence.",
    "test_cases": [
      {
        "input": [
          "ABCDE",
          "ACE"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "AGGTAB",
          "GXTXAYB"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0319",
    "title": "Generate Valid Parentheses",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses. This is a classic backtracking problem.\n\n**Constraints**\n`n` will be between 1 and 4.\n\nInput format:\nA single integer `n`.\n\nOutput format:\nEach valid combination on a new line, sorted lexicographically.",
    "starter_code": "# Generate all valid parentheses combinations.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "((()))\n(()())\n(())()\n()(())\n()()()"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "()"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0320",
    "title": "Combination Sum",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a set of candidate numbers (without duplicates) and a target number, find all unique combinations in candidates where the candidate numbers sum to target. The same repeated number may be chosen from candidates unlimited number of times.\n\n**Constraints**\nUp to 5 candidate numbers between 1 and 10.\nTarget is between 1 and 15.\n\nInput format:\nFirst line: space-separated candidate numbers.\nSecond line: target integer.\n\nOutput format:\nEach unique combination on a new line, with elements space-separated and sorted. Lines should be sorted.",
    "starter_code": "# Find all unique combinations that sum to a target.",
    "test_cases": [
      {
        "input": [
          "2 3 6 7",
          "7"
        ],
        "expected_output": "2 2 3\n7"
      },
      {
        "input": [
          "2 3 5",
          "8"
        ],
        "expected_output": "2 2 2 2\n2 3 3\n3 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0321",
    "title": "Count Set Bits (Hamming Weight)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\n**Constraints**\nInput integer will be between 0 and 1000.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer, the count of set bits.",
    "starter_code": "# Count the number of set bits in an integer.",
    "test_cases": [
      {
        "input": [
          "11"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "128"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0322",
    "title": "Single Number",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array of integers, every element appears twice except for one. Find that single one. This can be efficiently solved using bit manipulation (XOR).\n\n**Constraints**\nArray will contain between 1 and 21 integers.\n\nInput format:\nSpace-separated integers.\n\nOutput format:\nThe single integer that appears only once.",
    "starter_code": "# Find the single number in a list where others appear twice.",
    "test_cases": [
      {
        "input": [
          "2 2 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4 1 2 1 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0323",
    "title": "Container With Most Water",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven n non-negative integers where each represents a point at coordinate (i, ai), n vertical lines are drawn. Find two lines that together with the x-axis form a container, such that the container contains the most water. This can be solved efficiently using a two-pointer approach.\n\n**Constraints**\nList will contain between 2 and 20 integers.\nHeights are between 0 and 100.\n\nInput format:\nSpace-separated integers representing heights.\n\nOutput format:\nA single integer for the maximum area.",
    "starter_code": "# Find the container with the most water.",
    "test_cases": [
      {
        "input": [
          "1 8 6 2 5 4 8 3 7"
        ],
        "expected_output": "49"
      },
      {
        "input": [
          "1 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0324",
    "title": "3Sum",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers, find all unique triplets in the array which gives the sum of zero. The solution set must not contain duplicate triplets.\n\n**Constraints**\nArray will contain between 3 and 20 integers.\nValues are between -10 and 10.\n\nInput format:\nSpace-separated integers.\n\nOutput format:\nEach unique triplet on a new line, elements sorted and space-separated. Lines should be sorted.",
    "starter_code": "# Find all unique triplets that sum to zero.",
    "test_cases": [
      {
        "input": [
          "-1 0 1 2 -1 -4"
        ],
        "expected_output": "-1 -1 2\n-1 0 1"
      },
      {
        "input": [
          "0 0 0 0"
        ],
        "expected_output": "0 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0325",
    "title": "Search in Rotated Sorted Array",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nAn array sorted in ascending order is rotated at some unknown pivot. Given a target value to search, if found in the array return its index, otherwise return -1. You must write an algorithm with $O(\\log n)$ runtime complexity.\n\n**Constraints**\nArray will contain between 1 and 20 unique integers.\n\nInput format:\nFirst line: space-separated integers for the rotated array.\nSecond line: target integer.\n\nOutput format:\nThe index of the target or -1.",
    "starter_code": "# Search for a target in a rotated sorted array.",
    "test_cases": [
      {
        "input": [
          "4 5 6 7 0 1 2",
          "0"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "4 5 6 7 0 1 2",
          "3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0326",
    "title": "LRU Cache Simulation",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a Least Recently Used (LRU) cache. You will be given a capacity and a series of operations. 'PUT <key> <value>' inserts/updates a key. 'GET <key>' retrieves a key's value. When the cache is full, a PUT operation should evict the least recently used item. A GET operation makes an item the most recently used.\n\n**Constraints**\nCapacity is between 1 and 5.\nKeys and values are integers 0-99.\nUp to 10 operations.\n\nInput format:\nFirst line: Capacity.\nSubsequent lines: 'PUT <key> <value>' or 'GET <key>'.\n\nOutput format:\nFor GET, print the value or -1 if not found. After all operations, print final cache state (key:value) from most to least recently used.",
    "starter_code": "# Simulate an LRU Cache.",
    "test_cases": [
      {
        "input": [
          "2",
          "PUT 1 1",
          "PUT 2 2",
          "GET 1",
          "PUT 3 3",
          "GET 2",
          "PUT 4 4",
          "GET 1",
          "GET 3",
          "GET 4"
        ],
        "expected_output": "1\n-1\n-1\n3\n4\n4:4 3:3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0327",
    "title": "Merge Intervals",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a collection of intervals, merge all overlapping intervals.\n\n**Constraints**\nUp to 10 intervals.\nInterval values are between 0 and 100.\n\nInput format:\nFirst line: Number of intervals N.\nNext N lines: space-separated integers for start and end of an interval.\n\nOutput format:\nEach merged interval on a new line, sorted by start time.",
    "starter_code": "# Merge overlapping intervals.",
    "test_cases": [
      {
        "input": [
          "4",
          "1 3",
          "2 6",
          "8 10",
          "15 18"
        ],
        "expected_output": "1 6\n8 10\n15 18"
      },
      {
        "input": [
          "2",
          "1 4",
          "4 5"
        ],
        "expected_output": "1 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0328",
    "title": "Best Time to Buy and Sell Stock",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit. If you cannot achieve any profit, return 0.\n\n**Constraints**\nList will contain between 1 and 20 prices.\nPrices are between 0 and 100.\n\nInput format:\nSpace-separated integers for stock prices.\n\nOutput format:\nA single integer for the maximum profit.",
    "starter_code": "# Find the max profit from buying and selling stock once.",
    "test_cases": [
      {
        "input": [
          "7 1 5 3 6 4"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "7 6 4 3 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0329",
    "title": "Word Break Problem",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty string and a dictionary containing a list of non-empty words, determine if the string can be segmented into a space-separated sequence of one or more dictionary words. This is a classic dynamic programming problem.\n\n**Constraints**\nString length 1 to 20.\nDictionary has 1 to 10 words, each length 1 to 10.\n\nInput format:\nFirst line: The string to segment.\nSecond line: space-separated words for the dictionary.\n\nOutput format:\nA string: \"True\" or \"False\".",
    "starter_code": "# Solve the word break problem.",
    "test_cases": [
      {
        "input": [
          "leetcode",
          "leet code"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "applepenapple",
          "apple pen"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "catsandog",
          "cats cat and sand dog"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0330",
    "title": "Trie (Prefix Tree) Implementation",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a Trie data structure. You will be given a series of operations: 'INSERT <word>' to add a word to the trie, 'SEARCH <word>' to check if a word exists, and 'STARTSWITH <prefix>' to check if any word starts with the given prefix.\n\n**Constraints**\nWords and prefixes contain lowercase English letters, length 1-10.\nUp to 10 operations.\n\nInput format:\nMultiple lines of operations.\n\nOutput format:\nFor SEARCH and STARTSWITH, print \"True\" or \"False\" on a new line.",
    "starter_code": "# Simulate a Trie (Prefix Tree).",
    "test_cases": [
      {
        "input": [
          "INSERT apple",
          "SEARCH apple",
          "SEARCH app",
          "STARTSWITH app",
          "INSERT app",
          "SEARCH app"
        ],
        "expected_output": "True\nFalse\nTrue\nTrue"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0331",
    "title": "Minimum Size Subarray Sum",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of positive integers and a positive integer `s`, find the minimal length of a contiguous subarray of which the sum is greater than or equal to `s`. If there isn't one, return 0 instead. This can be solved with a sliding window approach.\n\n**Constraints**\n`s` is between 1 and 1000.\nArray has 1 to 20 numbers between 1 and 100.\n\nInput format:\nFirst line: target sum `s`.\nSecond line: space-separated integers for the array.\n\nOutput format:\nA single integer for the minimal length.",
    "starter_code": "# Find the minimum size subarray sum.",
    "test_cases": [
      {
        "input": [
          "7",
          "2 3 1 2 4 3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "15",
          "1 2 3 4 5"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0332",
    "title": "Edit Distance",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two words, find the minimum number of operations (insert, delete, or substitute a character) required to convert one word to the other. This is the Levenshtein distance, a classic dynamic programming problem.\n\n**Constraints**\nWord lengths are between 0 and 20.\nWords contain lowercase English letters.\n\nInput format:\nTwo lines, each with a word.\n\nOutput format:\nA single integer for the edit distance.",
    "starter_code": "# Calculate the edit distance between two words.",
    "test_cases": [
      {
        "input": [
          "horse",
          "ros"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "intention",
          "execution"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0333",
    "title": "Number of Connected Components in Graph",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an undirected graph, find the number of connected components in it.\n\n**Constraints**\nGraph has up to 15 nodes (0-14).\n\nInput format:\nFirst line: number of nodes N.\nSecond line: number of edges E.\nNext E lines: two space-separated integers for an edge.\n\nOutput format:\nA single integer for the number of connected components.",
    "starter_code": "# Find the number of connected components in a graph.",
    "test_cases": [
      {
        "input": [
          "5",
          "4",
          "0 1",
          "1 2",
          "3 4",
          "0 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "6",
          "3",
          "0 1",
          "2 3",
          "4 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0334",
    "title": "Reverse Bits",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nReverse the bits of a given 8-bit unsigned integer.\n\n**Constraints**\nInput is an integer between 0 and 255.\n\nInput format:\nA single integer.\n\nOutput format:\nA single integer, the result of reversing the bits.",
    "starter_code": "# Reverse the bits of an 8-bit integer.",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "128"
      },
      {
        "input": [
          "43"
        ],
        "expected_output": "178"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0335",
    "title": "Shortest Path in Unweighted Graph",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unweighted, undirected graph, a source node, and a destination node, find the length of the shortest path between them. If no path exists, return -1. BFS is ideal for this.\n\n**Constraints**\nGraph has up to 10 nodes (0-9).\n\nInput format:\nFirst line: number of edges E.\nNext E lines: two space-separated integers for an edge.\nLast line: two space-separated integers for source and destination.\n\nOutput format:\nAn integer for the shortest path length or -1.",
    "starter_code": "# Find the shortest path length in an unweighted graph.",
    "test_cases": [
      {
        "input": [
          "9",
          "0 1",
          "0 3",
          "1 2",
          "1 3",
          "2 6",
          "3 4",
          "4 5",
          "5 6",
          "6 7",
          "0 7"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "0 1",
          "2 3",
          "4 5",
          "0 5"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0336",
    "title": "Product of Array Except Self",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. You must write an algorithm that runs in $O(n)$ time and without using the division operation.\n\n**Constraints**\nArray will contain between 2 and 10 integers.\nValues are between -10 and 10.\n\nInput format:\nSpace-separated integers.\n\nOutput format:\nSpace-separated integers for the resulting array.",
    "starter_code": "# Calculate the product of array except self.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "24 12 8 6"
      },
      {
        "input": [
          "-1 1 0 -3 3"
        ],
        "expected_output": "0 0 9 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0337",
    "title": "Task Scheduler (Simple)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a char array representing tasks, and a non-negative integer `n` representing the cooldown period between two same tasks, find the least number of units of time that the CPU will take to finish all the given tasks. For example, if tasks are ['A','A','A'] and n=2, CPU could do A -> idle -> idle -> A -> idle -> idle -> A.\n\n**Constraints**\nTasks are uppercase letters 'A'-'Z'.\nUp to 20 tasks.\n`n` is between 0 and 5.\n\nInput format:\nFirst line: space-separated characters for tasks.\nSecond line: integer `n`.\n\nOutput format:\nAn integer for the minimum time units.",
    "starter_code": "# Solve the task scheduler problem.",
    "test_cases": [
      {
        "input": [
          "A A A B B B",
          "2"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "A A A B C D",
          "1"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0338",
    "title": "Gas Station Circuit",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are N gas stations along a circular route, where the amount of gas at station i is `gas[i]`. You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from station i to its next station (i+1). You begin with an empty tank. Return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.\n\n**Constraints**\nN is between 1 and 10.\nGas and cost values are between 0 and 100.\n\nInput format:\nFirst line: space-separated integers for gas amounts.\nSecond line: space-separated integers for costs.\n\nOutput format:\nAn integer for the starting index or -1.",
    "starter_code": "# Find if a gas station circuit is possible.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3 4 5 1 2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 3 4",
          "3 4 3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0339",
    "title": "Bitwise AND of Numbers Range",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a range `[m, n]` where `0 <= m <= n <= 2147483647`, return the bitwise AND of all numbers in this range, inclusive.\n\n**Constraints**\n`m` and `n` will be between 0 and 1000 for simplicity in testing.\n\nInput format:\nTwo space-separated integers `m` and `n`.\n\nOutput format:\nAn integer for the result of the bitwise AND.",
    "starter_code": "# Calculate the bitwise AND of a range of numbers.",
    "test_cases": [
      {
        "input": [
          "5 7"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 1"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "12 15"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0340",
    "title": "Integer to Roman",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer, convert it to a Roman numeral.\n\n**Constraints**\nInput integer will be between 1 and 500.\n\nInput format:\nA single integer.\n\nOutput format:\nA string for the Roman numeral.",
    "starter_code": "# Convert an integer to a Roman numeral.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "III"
      },
      {
        "input": [
          "58"
        ],
        "expected_output": "LVIII"
      },
      {
        "input": [
          "199"
        ],
        "expected_output": "CXCIX"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0341",
    "title": "Longest Consecutive Sequence",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity, which can be achieved with a Set.\n\n**Constraints**\nArray will contain between 0 and 20 integers.\nValues are between -100 and 100.\n\nInput format:\nSpace-separated integers. An empty line represents an empty list.\n\nOutput format:\nAn integer for the length of the longest consecutive sequence.",
    "starter_code": "# Find the longest consecutive sequence in a list.",
    "test_cases": [
      {
        "input": [
          "100 4 200 1 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 3 7 2 5 8 4 6 0 1"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0342",
    "title": "Unique Paths in a Grid",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nA robot is located at the top-left corner of a `m x n` grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner. How many possible unique paths are there? This can be solved with dynamic programming.\n\n**Constraints**\n`m` and `n` will be between 1 and 7.\n\nInput format:\nTwo space-separated integers `m` and `n`.\n\nOutput format:\nAn integer for the number of unique paths.",
    "starter_code": "# Find the number of unique paths in a grid.",
    "test_cases": [
      {
        "input": [
          "3 7"
        ],
        "expected_output": "28"
      },
      {
        "input": [
          "3 2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0343",
    "title": "Sudoku Validator",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nDetermine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n1. Each row must contain the digits 1-9 without repetition.\n2. Each column must contain the digits 1-9 without repetition.\n3. Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\n**Constraints**\nInput is a 9x9 grid. '.' represents empty cells.\n\nInput format:\n9 lines, each with 9 characters (digits '1'-'9' or '.').\n\nOutput format:\nA string: \"Valid\" or \"Invalid\".",
    "starter_code": "# Validate a Sudoku board.",
    "test_cases": [
      {
        "input": [
          "53..7....",
          "6..195...",
          ".98....6.",
          "8...6...3",
          "4..8.3..1",
          "7...2...6",
          ".6....28.",
          "...419..5",
          "....8..79"
        ],
        "expected_output": "Valid"
      },
      {
        "input": [
          "83..7....",
          "6..195...",
          ".98....6.",
          "8...6...3",
          "4..8.3..1",
          "7...2...6",
          ".6....28.",
          "...419..5",
          "....8..79"
        ],
        "expected_output": "Invalid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0344",
    "title": "N-Queens Problem (Count Solutions)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nThe n-queens puzzle is the problem of placing n queens on an n\u00d7n chessboard such that no two queens attack each other. Given an integer n, return the number of distinct solutions to the n-queens puzzle. This is a classic backtracking problem.\n\n**Constraints**\n`n` will be between 1 and 8.\n\nInput format:\nA single integer `n`.\n\nOutput format:\nAn integer for the number of solutions.",
    "starter_code": "# Count the number of solutions to the N-Queens problem.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "92"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0345",
    "title": "Game of Life (One Step)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate one step of Conway's Game of Life. Given a board with 1s (live cells) and 0s (dead cells), compute the next state. A live cell with < 2 or > 3 live neighbors dies. A dead cell with exactly 3 live neighbors becomes a live cell. A live cell with 2 or 3 live neighbors lives on.\n\n**Constraints**\nBoard will be a square grid between 3x3 and 8x8.\n\nInput format:\nFirst line: integer N for grid size.\nNext N lines: N space-separated integers (0 or 1).\n\nOutput format:\nN lines of the next state of the board, space-separated.",
    "starter_code": "# Simulate one step of Conway's Game of Life.",
    "test_cases": [
      {
        "input": [
          "4",
          "0 1 0 0",
          "0 0 1 0",
          "1 1 1 0",
          "0 0 0 0"
        ],
        "expected_output": "0 0 0 0\n1 0 1 0\n0 1 1 0\n0 1 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0346",
    "title": "Merge K Sorted Lists",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of `k` linked lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it. For this problem, lists are given as lines of text.\n\n**Constraints**\n`k` is between 0 and 5.\nEach list has between 0 and 10 elements.\n\nInput format:\nFirst line: integer `k` for the number of lists.\nNext `k` lines: space-separated integers for each sorted list.\n\nOutput format:\nOne line of space-separated integers for the final merged list.",
    "starter_code": "# Merge K sorted lists.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 4 5",
          "1 3 4",
          "2 6"
        ],
        "expected_output": "1 1 2 3 4 4 5 6"
      },
      {
        "input": [
          "1",
          "1 2 3"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0347",
    "title": "Top K Frequent Elements",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array of integers, return the `k` most frequent elements. You may return the answer in any order.\n\n**Constraints**\nArray has 1 to 20 elements.\n`k` is between 1 and the number of unique elements.\n\nInput format:\nFirst line: integer `k`.\nSecond line: space-separated integers for the array.\n\nOutput format:\nSpace-separated integers for the top k frequent elements.",
    "starter_code": "# Find the top K frequent elements.",
    "test_cases": [
      {
        "input": [
          "2",
          "1 1 1 2 2 3"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0348",
    "title": "Find the Celebrity",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nIn a party of `n` people, a celebrity is a person who is known by everyone but knows no one. Find the celebrity. You are given a function `knows(a, b)` which returns true if a knows b. For this problem, you are given the relationship matrix where `knows[i][j] = 1` means i knows j. Find the celebrity's ID (0-indexed) or return -1 if none.\n\n**Constraints**\n`n` is between 1 and 10.\n\nInput format:\nFirst line: integer `n`.\nNext `n` lines: the `n x n` relationship matrix (0s and 1s).\n\nOutput format:\nAn integer for the celebrity ID or -1.",
    "starter_code": "# Find the celebrity in a party.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 1 0",
          "0 1 0",
          "1 1 1"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "3",
          "1 0 1",
          "1 1 1",
          "0 0 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0349",
    "title": "Sliding Window Maximum",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of integers and a window of size `k`. You are to find the maximum value in the window as it slides from left to right. \n\n**Constraints**\nArray has 1 to 20 elements. `k` is between 1 and array length.\n\nInput format:\nFirst line: integer `k`.\nSecond line: space-separated integers for the array.\n\nOutput format:\nSpace-separated integers for the maximums in each window.",
    "starter_code": "# Find the maximum in a sliding window.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 3 -1 -3 5 3 6 7"
        ],
        "expected_output": "3 3 5 5 6 7"
      },
      {
        "input": [
          "1",
          "1 2 3 4"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0350",
    "title": "Rotate Image (In-Place)",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. \n\n**Constraints**\n`n` is between 1 and 5.\n\nInput format:\nFirst line: integer `n`.\nNext `n` lines: `n` space-separated integers for each row.\n\nOutput format:\n`n` lines of the rotated matrix.",
    "starter_code": "# Rotate an image (matrix) by 90 degrees clockwise.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "7 4 1\n8 5 2\n9 6 3"
      },
      {
        "input": [
          "2",
          "1 2",
          "3 4"
        ],
        "expected_output": "3 1\n4 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0351",
    "title": "Word Search",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. This is a classic backtracking problem.\n\n**Constraints**\nBoard size up to 5x5. Word length up to 10.\n\nInput format:\nFirst line: word to search.\nSecond line: M N (rows, cols).\nNext M lines: N characters for each row.\n\nOutput format:\nA string: \"Found\" or \"Not Found\".",
    "starter_code": "# Search for a word in a 2D grid of characters.",
    "test_cases": [
      {
        "input": [
          "ABCCED",
          "3 4",
          "ABCE",
          "SFCS",
          "ADEE"
        ],
        "expected_output": "Found"
      },
      {
        "input": [
          "SEE",
          "3 4",
          "ABCE",
          "SFCS",
          "ADEE"
        ],
        "expected_output": "Found"
      },
      {
        "input": [
          "ABCB",
          "3 4",
          "ABCE",
          "SFCS",
          "ADEE"
        ],
        "expected_output": "Not Found"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0352",
    "title": "Set Matrix Zeroes",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` matrix, if an element is 0, set its entire row and column to 0. Do it in-place.\n\n**Constraints**\nMatrix size up to 5x5.\n\nInput format:\nFirst line: M N (rows, cols).\nNext M lines: N space-separated integers for each row.\n\nOutput format:\nThe modified matrix, M lines with N space-separated integers.",
    "starter_code": "# Set matrix rows and columns to zero if an element is zero.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 1 1",
          "1 0 1",
          "1 1 1"
        ],
        "expected_output": "1 0 1\n0 0 0\n1 0 1"
      },
      {
        "input": [
          "3 4",
          "0 1 2 0",
          "3 4 5 2",
          "1 3 1 5"
        ],
        "expected_output": "0 0 0 0\n0 4 5 0\n0 3 1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0353",
    "title": "Decode String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an encoded string, return its decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. `k` is a positive integer.\n\n**Constraints**\nString length 1-30. `k` is 1-10.\n\nInput format:\nA single encoded string.\n\nOutput format:\nThe decoded string.",
    "starter_code": "# Decode a string with repeating substrings.",
    "test_cases": [
      {
        "input": [
          "3[a]2[bc]"
        ],
        "expected_output": "aaabcbc"
      },
      {
        "input": [
          "3[a2[c]]"
        ],
        "expected_output": "accaccacc"
      },
      {
        "input": [
          "2[abc]3[cd]ef"
        ],
        "expected_output": "abcabccdcdcdef"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0354",
    "title": "Find All Anagrams in a String",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a non-empty string `p`, find all the start indices of `p`'s anagrams in `s`. Strings consist of lowercase English letters.\n\n**Constraints**\nString lengths 1 to 50.\n\nInput format:\nFirst line: string `s`.\nSecond line: string `p`.\n\nOutput format:\nSpace-separated integers for the starting indices. If none, print \"None\".",
    "starter_code": "# Find all starting indices of anagrams of p in s.",
    "test_cases": [
      {
        "input": [
          "cbaebabacd",
          "abc"
        ],
        "expected_output": "0 6"
      },
      {
        "input": [
          "abab",
          "ab"
        ],
        "expected_output": "0 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0355",
    "title": "Minimum Window Substring",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. If there is no such window in `s` that covers all characters in `t`, return an empty string.\n\n**Constraints**\nString lengths 1 to 50.\n\nInput format:\nFirst line: string `s`.\nSecond line: string `t`.\n\nOutput format:\nThe minimum window substring or \"None\".",
    "starter_code": "# Find the minimum window substring.",
    "test_cases": [
      {
        "input": [
          "ADOBECODEBANC",
          "ABC"
        ],
        "expected_output": "BANC"
      },
      {
        "input": [
          "a",
          "aa"
        ],
        "expected_output": "None"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0356",
    "title": "Group Anagrams",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of strings, group the anagrams together. You can return the answer in any order.\n\n**Constraints**\nUp to 10 strings, each length 1-15.\n\nInput format:\nSpace-separated strings.\n\nOutput format:\nEach group of anagrams on a new line, sorted lexicographically.",
    "starter_code": "# Group anagrams from a list of strings.",
    "test_cases": [
      {
        "input": [
          "eat tea tan ate nat bat"
        ],
        "expected_output": "ate eat tea\nbat\nnat tan"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0357",
    "title": "Jump Game",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of non-negative integers, you are initially positioned at the first index. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.\n\n**Constraints**\nArray has 1 to 20 elements, values 0-10.\n\nInput format:\nSpace-separated integers.\n\nOutput format:\n\"True\" or \"False\".",
    "starter_code": "# Determine if you can jump to the end of the array.",
    "test_cases": [
      {
        "input": [
          "2 3 1 1 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 2 1 0 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0358",
    "title": "Binary Tree In-order Traversal",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the root of a binary tree (in level-order), return the in-order traversal of its nodes' values. (Left, Root, Right)\n\n**Constraints**\nTree has 0 to 20 nodes.\n\nInput format:\nSpace-separated integers for the tree (-1 for null).\n\nOutput format:\nSpace-separated integers of the in-order traversal.",
    "starter_code": "# Perform in-order traversal of a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 -1 2 3"
        ],
        "expected_output": "1 3 2"
      },
      {
        "input": [
          "4 2 7 1 3 6 9"
        ],
        "expected_output": "1 2 3 4 6 7 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0359",
    "title": "Binary Tree Pre-order Traversal",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the root of a binary tree (in level-order), return the pre-order traversal of its nodes' values. (Root, Left, Right)\n\n**Constraints**\nTree has 0 to 20 nodes.\n\nInput format:\nSpace-separated integers for the tree (-1 for null).\n\nOutput format:\nSpace-separated integers of the pre-order traversal.",
    "starter_code": "# Perform pre-order traversal of a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 -1 2 3"
        ],
        "expected_output": "1 2 3"
      },
      {
        "input": [
          "4 2 7 1 3 6 9"
        ],
        "expected_output": "4 2 1 3 7 6 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0360",
    "title": "Binary Tree Post-order Traversal",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the root of a binary tree (in level-order), return the post-order traversal of its nodes' values. (Left, Right, Root)\n\n**Constraints**\nTree has 0 to 20 nodes.\n\nInput format:\nSpace-separated integers for the tree (-1 for null).\n\nOutput format:\nSpace-separated integers of the post-order traversal.",
    "starter_code": "# Perform post-order traversal of a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 -1 2 3"
        ],
        "expected_output": "3 2 1"
      },
      {
        "input": [
          "4 2 7 1 3 6 9"
        ],
        "expected_output": "1 3 2 6 9 7 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0361",
    "title": "Check if Binary Tree is Balanced",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree (in level-order), determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n\n**Constraints**\nTree has 0 to 20 nodes.\n\nInput format:\nSpace-separated integers for the tree (-1 for null).\n\nOutput format:\n\"Balanced\" or \"Not Balanced\".",
    "starter_code": "# Check if a binary tree is height-balanced.",
    "test_cases": [
      {
        "input": [
          "3 9 20 -1 -1 15 7"
        ],
        "expected_output": "Balanced"
      },
      {
        "input": [
          "1 2 2 3 3 -1 -1 4 4"
        ],
        "expected_output": "Not Balanced"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0362",
    "title": "K-th Smallest Element in a BST",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the root of a binary search tree (in level-order) and an integer `k`, return the `k`-th smallest element in the tree. (1-indexed)\n\n**Constraints**\nTree has 1 to 20 nodes. `k` is valid.\n\nInput format:\nFirst line: integer `k`.\nSecond line: space-separated integers for the BST.\n\nOutput format:\nThe value of the k-th smallest element.",
    "starter_code": "# Find the k-th smallest element in a BST.",
    "test_cases": [
      {
        "input": [
          "3",
          "5 3 6 2 4 -1 -1 1"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "1",
          "3 1 4 -1 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0363",
    "title": "Maximum Path Sum in Binary Tree",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the root of a binary tree (in level-order), find the maximum path sum. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\n\n**Constraints**\nTree has 1 to 20 nodes. Values are -10 to 10.\n\nInput format:\nSpace-separated integers for the tree.\n\nOutput format:\nAn integer for the maximum path sum.",
    "starter_code": "# Find the maximum path sum in a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "-10 9 20 -1 -1 15 7"
        ],
        "expected_output": "42"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0364",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven preorder and inorder traversal of a tree, construct the binary tree. For this problem, return the level-order traversal of the constructed tree.\n\n**Constraints**\nTraversals have 1 to 20 unique elements.\n\nInput format:\nFirst line: space-separated integers for preorder traversal.\nSecond line: space-separated integers for inorder traversal.\n\nOutput format:\nSpace-separated integers for the level-order traversal of the result.",
    "starter_code": "# Construct a binary tree from preorder and inorder traversals.",
    "test_cases": [
      {
        "input": [
          "3 9 20 15 7",
          "9 3 15 20 7"
        ],
        "expected_output": "3 9 20 -1 -1 15 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "eval_0365",
    "title": "House Robber",
    "category": "Evaluation",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money. The only constraint stopping you is that adjacent houses have security systems connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. This is a classic DP problem.\n\n**Constraints**\nList has 1 to 20 numbers, values 0-100.\n\nInput format:\nSpace-separated integers.\n\nOutput format:\nAn integer for the maximum amount to rob.",
    "starter_code": "# Solve the house robber problem.",
    "test_cases": [
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2 7 9 3 1"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  }
]