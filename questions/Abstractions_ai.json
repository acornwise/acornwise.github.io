[
  {
    "id": "int_q_001",
    "title": "Temperature Conversion Table",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a starting Celsius temperature and an ending Celsius temperature as input. Generate and print a table converting Celsius to Fahrenheit for every 5 degrees in that range. Both start and end temperatures should be divisible by 5.\n\n**Constraints**\nInput format:\nTwo integers on separate lines (start Celsius, end Celsius).\n\nOutput format:\nEach line showing 'C C = F F' for each step. (F = C * 9/5 + 32)",
    "starter_code": "# Get start and end Celsius, generate and print conversion table",
    "test_cases": [
      {
        "input": [
          "0",
          "10"
        ],
        "expected_output": "C 0 = F 32\nC 5 = F 41\nC 10 = F 50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_002",
    "title": "Grade Calculator",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a student's score (0-100) as input and prints their grade based on the following scale:\n90-100: A\n80-89: B\n70-79: C\n60-69: D\nBelow 60: F\n\n**Constraints**\nInput format:\nA single integer (score).\n\nOutput format:\nA single character representing the grade.",
    "starter_code": "# Get score, determine grade, and print",
    "test_cases": [
      {
        "input": [
          "85"
        ],
        "expected_output": "B"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_003",
    "title": "Count Words in Sentence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input and counts the number of words in it. Assume words are separated by single spaces and there are no leading/trailing spaces.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nA single integer representing the word count.",
    "starter_code": "# Get sentence, count words, and print",
    "test_cases": [
      {
        "input": [
          "This is a sample sentence"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_004",
    "title": "Reverse Words in Sentence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and prints the sentence with its words reversed, but not the characters within the words.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nA string with words in reverse order.",
    "starter_code": "# Get sentence, reverse words, and print",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "world hello"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_005",
    "title": "Factorial Calculation (Loop)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer N as input and calculates its factorial using a loop. Print the result.\n\n**Constraints**\nInput format:\nA single non-negative integer N (N <= 10).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, calculate factorial using loop, and print",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_006",
    "title": "Fibonacci Sequence (Nth Term)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input and prints the Nth term of the Fibonacci sequence. The sequence starts with 0, 1, 1, 2, 3...\n\n**Constraints**\nInput format:\nA single integer N (N >= 0, N <= 15).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, calculate Nth Fibonacci term, and print",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_007",
    "title": "Greatest Common Divisor (GCD)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers as input and prints their Greatest Common Divisor (GCD).\n\n**Constraints**\nInput format:\nTwo positive integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get two numbers, calculate GCD, and print",
    "test_cases": [
      {
        "input": [
          "48",
          "18"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_008",
    "title": "Least Common Multiple (LCM)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers as input and prints their Least Common Multiple (LCM).\n\n**Constraints**\nInput format:\nTwo positive integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get two numbers, calculate LCM, and print",
    "test_cases": [
      {
        "input": [
          "4",
          "6"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_009",
    "title": "Prime Number Checker",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input and prints 'Prime' if N is a prime number, otherwise 'Not Prime'.\n\n**Constraints**\nInput format:\nA single integer N (N > 1, N <= 100).\n\nOutput format:\nA string ('Prime' or 'Not Prime').",
    "starter_code": "# Get N, check if prime, and print",
    "test_cases": [
      {
        "input": [
          "13"
        ],
        "expected_output": "Prime"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_010",
    "title": "Sum of Digits",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and prints the sum of its digits.\n\n**Constraints**\nInput format:\nA single positive integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get number, calculate sum of digits, and print",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_011",
    "title": "Count Even/Odd Numbers in List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Count and print the number of even numbers and odd numbers in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nTwo integers on separate lines: first the count of even, then the count of odd.",
    "starter_code": "# Get list, count even/odd, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "3\n3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_012",
    "title": "Find Second Largest in List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) as input and prints the second largest element in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers (at least 2).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find second largest, and print",
    "test_cases": [
      {
        "input": [
          "10 5 20 15 25"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_013",
    "title": "Remove Duplicates from List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input and prints a new list containing only the unique elements, maintaining their original order of first appearance.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated unique integers.",
    "starter_code": "# Get list, remove duplicates, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 1 4"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_014",
    "title": "Common Elements in Two Lists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers (space-separated) as input and prints the common elements between them, in ascending order and without duplicates.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated integers.\n\nOutput format:\nSpace-separated common integers.",
    "starter_code": "# Get two lists, find common elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6"
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_015",
    "title": "Find Element Index",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings (space-separated) and a target string as input. Print the 0-based index of the first occurrence of the target string in the list. If not found, print -1.\n\n**Constraints**\nInput format:\nFirst line: space-separated strings. Second line: target string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and target, find index, and print",
    "test_cases": [
      {
        "input": [
          "apple banana cherry",
          "banana"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_016",
    "title": "String Palindrome Check Function",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `is_palindrome_str` that takes a string and returns `True` if it's a palindrome (case-insensitive, ignore spaces), `False` otherwise. Then, take input string and print the result of calling the function.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "def is_palindrome_str(s):\n    # Write your code here\n\n# Get input and call the function",
    "test_cases": [
      {
        "input": [
          "Racecar"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_017",
    "title": "Character Frequency Counter Function",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `char_frequency` that takes a string and returns a dictionary where keys are characters and values are their counts. Then, take a string from input and print the character and its frequency for 'a' and 'b' in the output, or '0' if not present.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nTwo lines: frequency of 'a', then frequency of 'b'.",
    "starter_code": "def char_frequency(s):\n    # Write your code here\n\n# Get input, call function, and print specific frequencies",
    "test_cases": [
      {
        "input": [
          "banana"
        ],
        "expected_output": "3\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_018",
    "title": "Count Vowels and Consonants Function",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `count_vowels_consonants` that takes a string and returns two counts: vowels and consonants. Then, take a string from input and print the two counts on separate lines.\n\n**Constraints**\nInput format:\nA single string (alphabetic characters only, no spaces).\n\nOutput format:\nTwo integers on separate lines (vowel count, then consonant count).",
    "starter_code": "def count_vowels_consonants(s):\n    # Write your code here\n\n# Get input, call function, and print counts",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "2\n3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_019",
    "title": "Check Anagrams Function",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `are_anagrams` that takes two strings and returns `True` if they are anagrams of each other (contain same characters with same frequencies), `False` otherwise. Case-insensitive. Then, take two strings from input and print the result.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "def are_anagrams(s1, s2):\n    # Write your code here\n\n# Get input and call the function",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_020",
    "title": "Simple List Sort (Ascending)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input and prints the sorted list in ascending order. Do NOT use Python's built-in `sort()` method or `sorted()` function directly on the whole list; implement a simple sorting logic (e.g., bubble sort or selection sort).\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers in ascending order.",
    "starter_code": "# Get list, implement simple sort, and print",
    "test_cases": [
      {
        "input": [
          "5 2 8 1 9"
        ],
        "expected_output": "1 2 5 8 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_021",
    "title": "Check Prime Numbers in Range",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Print all prime numbers within that range (inclusive), each on a new line. You may use a helper function for primality test.\n\n**Constraints**\nInput format:\nTwo integers on separate lines (start, end, 1 < start < end <= 50).\n\nOutput format:\nPrime numbers in range, each on a new line.",
    "starter_code": "def is_prime(num):\n    # Helper function\n    if num <= 1: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0: return False\n    return True\n\n# Get range, find and print primes",
    "test_cases": [
      {
        "input": [
          "10",
          "20"
        ],
        "expected_output": "11\n13\n17\n19"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_022",
    "title": "Basic Matrix Addition (2x2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two 2x2 matrices as input (row by row, space-separated elements). Calculate and print their sum.\n\n**Constraints**\nInput format:\nFour lines for Matrix A (two lines for each row), then four lines for Matrix B.\nExample: 1 2\\n3 4\\n5 6\\n7 8 -> A=[[1,2],[3,4]], B=[[5,6],[7,8]]\n\nOutput format:\nThe resulting 2x2 matrix, row by row, space-separated elements on each line.",
    "starter_code": "# Get two 2x2 matrices, calculate sum, and print",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4",
          "5 6",
          "7 8"
        ],
        "expected_output": "6 8\n10 12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_023",
    "title": "Pattern Printing: Right Triangle",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input and prints a right-aligned triangle pattern of asterisks.\n\n**Constraints**\nInput format:\nA single integer N (N <= 5).\n\nOutput format:\nA right-aligned triangle pattern.",
    "starter_code": "# Get N, print right triangle pattern",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "  *\n **\n***"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_024",
    "title": "Simple Stock Profit Calculator",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of daily stock prices (space-separated integers) as input. Calculate and print the maximum profit that can be made by buying and selling the stock once. If no profit can be made, print 0.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (prices).\n\nOutput format:\nA single integer (max profit).",
    "starter_code": "# Get prices, calculate max profit, and print",
    "test_cases": [
      {
        "input": [
          "7 1 5 3 6 4"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_025",
    "title": "Guess the Number Game",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nSimulate a \"Guess the Number\" game. The secret number is fixed at 7. Take user guesses (integers) as input one by one. For each guess, print 'Too high', 'Too low', or 'Correct!'. Stop when the guess is correct.\n\n**Constraints**\nInput format:\nMultiple integers (guesses) on separate lines.\n\nOutput format:\nFeedback strings until 'Correct!' is printed.",
    "starter_code": "SECRET_NUMBER = 7\n# Loop for guesses, provide feedback",
    "test_cases": [
      {
        "input": [
          "5",
          "9",
          "7"
        ],
        "expected_output": "Too low\nToo high\nCorrect!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_026",
    "title": "Caesar Cipher Encoder",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and an integer shift value as input. Encode the string using a Caesar cipher (shift each letter by the given value, wrapping around the alphabet). Only encode lowercase English letters; other characters remain unchanged.\n\n**Constraints**\nInput format:\nFirst line: string. Second line: integer shift (0-25).\n\nOutput format:\nThe encoded string.",
    "starter_code": "# Get string and shift, encode with Caesar cipher, and print",
    "test_cases": [
      {
        "input": [
          "abc",
          "3"
        ],
        "expected_output": "def"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_027",
    "title": "Validate Password Strength",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a password string as input. Print 'Strong' if it meets all criteria: at least 8 characters, contains at least one uppercase letter, one lowercase letter, and one digit. Otherwise, print 'Weak'.\n\n**Constraints**\nInput format:\nA single string (password).\n\nOutput format:\nA string ('Strong' or 'Weak').",
    "starter_code": "# Get password, validate strength, and print",
    "test_cases": [
      {
        "input": [
          "Password123"
        ],
        "expected_output": "Strong"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_028",
    "title": "Calculate GPA",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of letter grades (space-separated: A, B, C, D, F) as input. Calculate and print the GPA. A=4.0, B=3.0, C=2.0, D=1.0, F=0.0. Round to one decimal place.\n\n**Constraints**\nInput format:\nA single line of space-separated letter grades.\n\nOutput format:\nA float rounded to one decimal place.",
    "starter_code": "# Get grades, calculate GPA, and print",
    "test_cases": [
      {
        "input": [
          "A B C"
        ],
        "expected_output": "3.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_029",
    "title": "Find Longest Word in Sentence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and prints the longest word in it. If there's a tie, print the first one encountered.\n\n**Constraints**\nInput format:\nA single string (sentence, words separated by spaces).\n\nOutput format:\nA single string.",
    "starter_code": "# Get sentence, find longest word, and print",
    "test_cases": [
      {
        "input": [
          "The quick brown fox jumps"
        ],
        "expected_output": "quick"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_030",
    "title": "Check Balanced Parentheses (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string containing only '(' and ')' characters. Print 'Balanced' if the parentheses are balanced (each opening has a matching closing in correct order), otherwise 'Not Balanced'.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA string ('Balanced' or 'Not Balanced').",
    "starter_code": "# Get string, check parenthesis balance, and print",
    "test_cases": [
      {
        "input": [
          "(()())"
        ],
        "expected_output": "Balanced"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_031",
    "title": "Sum of Squares of List Elements",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input and prints the sum of the squares of its elements.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, calculate sum of squares, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "14"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_032",
    "title": "Merge Two Sorted Lists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two *already sorted* lists of integers (space-separated) as input. Merge them into a single sorted list and print it space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated sorted integers.\n\nOutput format:\nSpace-separated merged sorted integers.",
    "starter_code": "# Get two sorted lists, merge them, and print",
    "test_cases": [
      {
        "input": [
          "1 3 5",
          "2 4 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_033",
    "title": "Rotate List Left by N",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and an integer N as input. Rotate the list elements to the left by N positions and print the rotated list.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer N (0 <= N < list length).\n\nOutput format:\nSpace-separated rotated integers.",
    "starter_code": "# Get list and N, rotate left, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "3 4 5 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_034",
    "title": "Max Subarray Sum (Fixed Size 2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find the maximum sum of any contiguous subarray of size 2.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (at least 2).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find max subarray sum of size 2, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_035",
    "title": "Flatten a Nested List (Depth 1)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a nested list (e.g., `1,2,3;4,5;6`) where inner lists are separated by semicolons and elements by commas. Flatten it into a single list of integers and print it space-separated.\n\n**Constraints**\nInput format:\nA single string representing the nested list.\n\nOutput format:\nSpace-separated flattened integers.",
    "starter_code": "# Get nested list string, flatten it, and print",
    "test_cases": [
      {
        "input": [
          "1,2;3,4,5"
        ],
        "expected_output": "1 2 3 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_036",
    "title": "Find Missing Number in Sequence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) from 1 to N, with one number missing. Find and print the missing number.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find missing number, and print",
    "test_cases": [
      {
        "input": [
          "1 2 4 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_037",
    "title": "Word Reversal Function",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `reverse_words` that takes a sentence and returns a new string with the order of words reversed. Then, take a sentence from input and print the result of calling `reverse_words`.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nA string with words reversed.",
    "starter_code": "def reverse_words(sentence):\n    # Write your code here\n\n# Get input and call the function",
    "test_cases": [
      {
        "input": [
          "Python is fun"
        ],
        "expected_output": "fun is Python"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_038",
    "title": "Is Sorted List Function",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `is_sorted` that takes a list of integers and returns `True` if the list is sorted in ascending order, `False` otherwise. Then, take space-separated numbers from input, convert to a list, and print the result.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "def is_sorted(nums):\n    # Write your code here\n\n# Get input, convert to list, and call the function",
    "test_cases": [
      {
        "input": [
          "1 2 3 5 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_039",
    "title": "Matrix Transpose (2x2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 2x2 matrix as input (row by row, space-separated elements). Calculate and print its transpose.\n\n**Constraints**\nInput format:\nTwo lines, each with two space-separated integers.\n\nOutput format:\nThe transposed 2x2 matrix, row by row, space-separated elements on each line.",
    "starter_code": "# Get 2x2 matrix, calculate transpose, and print",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4"
        ],
        "expected_output": "1 3\n2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_040",
    "title": "Count Words Starting with Specific Letter",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) and a character as input. Count and print how many words in the sentence start with that specific character (case-insensitive).\n\n**Constraints**\nInput format:\nFirst line: sentence string. Second line: single character.\n\nOutput format:\nA single integer count.",
    "starter_code": "# Get sentence and char, count words starting with char, and print",
    "test_cases": [
      {
        "input": [
          "Apple banana cherry Orange",
          "a"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_041",
    "title": "Pangram Checker",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Print 'Pangram' if the string contains every letter of the alphabet at least once (case-insensitive), otherwise 'Not Pangram'.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA string ('Pangram' or 'Not Pangram').",
    "starter_code": "# Get string, check if pangram, and print",
    "test_cases": [
      {
        "input": [
          "The quick brown fox jumps over the lazy dog"
        ],
        "expected_output": "Pangram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_042",
    "title": "Run-Length Encoding (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string of repeating characters (e.g., 'AAABBC') and performs simple run-length encoding. Print the encoded string (e.g., 'A3B2C1'). Assume consecutive identical characters.\n\n**Constraints**\nInput format:\nA single string (alphabetic characters only).\n\nOutput format:\nThe encoded string.",
    "starter_code": "# Get string, perform RLE, and print",
    "test_cases": [
      {
        "input": [
          "AAABBC"
        ],
        "expected_output": "A3B2C1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_043",
    "title": "Check for Duplicate Characters",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Print 'Contains Duplicates' if any character appears more than once, otherwise 'No Duplicates'. (Case-sensitive).\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA string ('Contains Duplicates' or 'No Duplicates').",
    "starter_code": "# Get string, check for duplicate chars, and print",
    "test_cases": [
      {
        "input": [
          "programming"
        ],
        "expected_output": "Contains Duplicates"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_044",
    "title": "Vowel or Consonant (Function)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `check_letter_type` that takes a single lowercase English letter as input and returns 'Vowel' or 'Consonant'. Then, take a letter from input and print the result.\n\n**Constraints**\nInput format:\nA single lowercase English letter.\n\nOutput format:\nA string ('Vowel' or 'Consonant').",
    "starter_code": "def check_letter_type(char):\n    # Write your code here\n\n# Get input and call the function",
    "test_cases": [
      {
        "input": [
          "e"
        ],
        "expected_output": "Vowel"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_045",
    "title": "Sum of Range (Function)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `sum_range` that takes two integers, `start` and `end`, and returns the sum of all integers in that range (inclusive). Then, take start and end from input and print the result.\n\n**Constraints**\nInput format:\nTwo integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "def sum_range(start, end):\n    # Write your code here\n\n# Get input and call the function",
    "test_cases": [
      {
        "input": [
          "1",
          "5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_046",
    "title": "List Element Multiplier (Function)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `multiply_list_by_n` that takes a list of integers and an integer N. It should return a new list where each element from the original list is multiplied by N. Then, take space-separated numbers and N from input, and print the resulting list space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer N.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "def multiply_list_by_n(nums, n):\n    # Write your code here\n\n# Get input, call function, and print result",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "5"
        ],
        "expected_output": "5 10 15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_047",
    "title": "Check if Substring Exists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, `main_string` and `sub_string`, as input. Print 'Yes' if `sub_string` is present within `main_string` (case-sensitive), otherwise 'No'.\n\n**Constraints**\nInput format:\nFirst line: main string. Second line: sub string.\n\nOutput format:\nA string ('Yes' or 'No').",
    "starter_code": "# Get main and sub strings, check for existence, and print",
    "test_cases": [
      {
        "input": [
          "programming",
          "gram"
        ],
        "expected_output": "Yes"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_048",
    "title": "Count Vowels in Each Word",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input. For each word in the sentence, count the number of vowels (a, e, i, o, u, case-insensitive) and print the word followed by its vowel count, separated by a colon. Each word and its count on a new line.\n\n**Constraints**\nInput format:\nA single string (sentence, words separated by spaces).\n\nOutput format:\nWord:Count, each on a new line.",
    "starter_code": "# Get sentence, count vowels per word, and print",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "Hello:2\nWorld:1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_049",
    "title": "Decimal to Binary Conversion",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer (decimal) as input and converts it to its binary representation. Print the binary string.\n\n**Constraints**\nInput format:\nA single positive integer.\n\nOutput format:\nA string representing the binary number.",
    "starter_code": "# Get decimal, convert to binary, and print",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "1010"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_050",
    "title": "Validate Email Format (Basic)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an email address string as input. Print 'Valid' if it contains exactly one '@' symbol and at least one '.' after the '@'. Otherwise, print 'Invalid'. This is a basic check, not a full validation.\n\n**Constraints**\nInput format:\nA single string (email address).\n\nOutput format:\nA string ('Valid' or 'Invalid').",
    "starter_code": "# Get email, perform basic validation, and print",
    "test_cases": [
      {
        "input": [
          "test@example.com"
        ],
        "expected_output": "Valid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_051",
    "title": "Digit Count in Number",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and prints the number of digits it contains.\n\n**Constraints**\nInput format:\nA single positive integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get number, count digits, and print",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_052",
    "title": "Power of a Number",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `base` and `exponent`, as input and prints `base` raised to the power of `exponent` (base^exponent) using a loop.\n\n**Constraints**\nInput format:\nTwo integers on separate lines (base, exponent; exponent >= 0).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get base and exponent, calculate power using loop, and print",
    "test_cases": [
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_053",
    "title": "FizzBuzz Problem",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input. Print numbers from 1 to N. For multiples of three, print 'Fizz' instead of the number. For multiples of five, print 'Buzz'. For numbers that are multiples of both three and five, print 'FizzBuzz'. Each output on a new line.\n\n**Constraints**\nInput format:\nA single integer N (N <= 20).\n\nOutput format:\nFizzBuzz sequence, each on a new line.",
    "starter_code": "# Get N, implement FizzBuzz, and print",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "1\n2\nFizz\n4\nBuzz"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_054",
    "title": "Sum of Primes in Range",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Calculate and print the sum of all prime numbers within that range (inclusive). You may use a helper primality test function.\n\n**Constraints**\nInput format:\nTwo integers on separate lines (start, end; 1 < start < end <= 50).\n\nOutput format:\nA single integer.",
    "starter_code": "def is_prime(num):\n    # Helper function\n    if num <= 1: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0: return False\n    return True\n\n# Get range, sum primes, and print",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output": "17"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_055",
    "title": "Reverse a Number",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and prints its digits in reverse order.\n\n**Constraints**\nInput format:\nA single positive integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get number, reverse its digits, and print",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "321"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_056",
    "title": "Check Armstrong Number",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a three-digit integer as input and prints 'Armstrong Number' if it is an Armstrong number, otherwise 'Not Armstrong Number'. An Armstrong number is one whose sum of the cubes of its digits equals the number itself (e.g., 153 = 1^3 + 5^3 + 3^3).\n\n**Constraints**\nInput format:\nA single three-digit integer.\n\nOutput format:\nA string ('Armstrong Number' or 'Not Armstrong Number').",
    "starter_code": "# Get three-digit number, check if Armstrong, and print",
    "test_cases": [
      {
        "input": [
          "153"
        ],
        "expected_output": "Armstrong Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_057",
    "title": "Binary to Decimal Converter",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a binary string (e.g., '1011') as input and converts it to its decimal equivalent. Print the decimal integer.\n\n**Constraints**\nInput format:\nA single string (binary, contains only '0' and '1').\n\nOutput format:\nA single integer.",
    "starter_code": "# Get binary string, convert to decimal, and print",
    "test_cases": [
      {
        "input": [
          "1011"
        ],
        "expected_output": "11"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_058",
    "title": "Perfect Number Checker",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input and prints 'Perfect Number' if N is a perfect number, otherwise 'Not a Perfect Number'. A perfect number is a positive integer that is equal to the sum of its proper positive divisors (divisors excluding the number itself). For example, 6 is a perfect number because 1+2+3=6.\n\n**Constraints**\nInput format:\nA single positive integer N (N <= 1000).\n\nOutput format:\nA string ('Perfect Number' or 'Not a Perfect Number').",
    "starter_code": "# Get N, check if perfect number, and print",
    "test_cases": [
      {
        "input": [
          "28"
        ],
        "expected_output": "Perfect Number"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_059",
    "title": "Pattern Printing: Inverted Right Triangle",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input and prints an inverted right-aligned triangle pattern of asterisks.\n\n**Constraints**\nInput format:\nA single integer N (N <= 5).\n\nOutput format:\nAn inverted right-aligned triangle pattern.",
    "starter_code": "# Get N, print inverted right triangle pattern",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "***\n **\n  *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_060",
    "title": "Pattern Printing: Pyramid",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input and prints a pyramid pattern of asterisks.\n\n**Constraints**\nInput format:\nA single integer N (N <= 5).\n\nOutput format:\nA pyramid pattern.",
    "starter_code": "# Get N, print pyramid pattern",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "  *\n ***\n*****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_061",
    "title": "Matrix Multiplication (2x2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two 2x2 matrices as input (row by row, space-separated elements). Calculate and print their product.\n\n**Constraints**\nInput format:\nFour lines for Matrix A (two lines for each row), then four lines for Matrix B.\n\nOutput format:\nThe resulting 2x2 matrix, row by row, space-separated elements on each line.",
    "starter_code": "# Get two 2x2 matrices, calculate product, and print",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4",
          "5 6",
          "7 8"
        ],
        "expected_output": "19 22\n43 50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_062",
    "title": "Check if List is Anagram of Another",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, s1 and s2, as input. Print 'Anagram' if s2 is an anagram of s1, otherwise 'Not Anagram'. (Case-insensitive, ignore spaces).\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA string ('Anagram' or 'Not Anagram').",
    "starter_code": "# Get two strings, check if anagrams, and print",
    "test_cases": [
      {
        "input": [
          "Debit card",
          "Bad credit"
        ],
        "expected_output": "Anagram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_063",
    "title": "Find Kth Smallest Element in List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) and an integer K as input. Find and print the Kth smallest element in the list.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer K (1-based index).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and K, find Kth smallest, and print",
    "test_cases": [
      {
        "input": [
          "7 10 4 3 20 15",
          "3"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_064",
    "title": "Median of a List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the median of the list. For an even number of elements, print the average of the two middle elements (as an integer).\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, calculate median, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_065",
    "title": "Longest Common Prefix",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings (space-separated) as input. Find and print the longest common prefix among all strings in the list. If no common prefix, print an empty string.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nA single string.",
    "starter_code": "# Get list of strings, find longest common prefix, and print",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_066",
    "title": "String to Camel Case",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (space-separated words) as input and converts it to camel case. The first word starts with a lowercase letter, and subsequent words start with an uppercase letter, with no spaces in between.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nA single string in camel case.",
    "starter_code": "# Get sentence, convert to camel case, and print",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "helloWorld"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_067",
    "title": "Check Perfect Square",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and prints 'Perfect Square' if it is a perfect square, otherwise 'Not a Perfect Square'.\n\n**Constraints**\nInput format:\nA single positive integer.\n\nOutput format:\nA string ('Perfect Square' or 'Not a Perfect Square').",
    "starter_code": "# Get number, check if perfect square, and print",
    "test_cases": [
      {
        "input": [
          "25"
        ],
        "expected_output": "Perfect Square"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_068",
    "title": "Roman to Integer Converter (I, V, X)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a Roman numeral string (containing only 'I', 'V', 'X') as input and converts it to its integer equivalent. Assume valid Roman numeral format.\n\n**Constraints**\nInput format:\nA single string (Roman numeral, e.g., \"IX\", \"VI\").\n\nOutput format:\nA single integer.",
    "starter_code": "# Get Roman numeral string, convert to integer, and print",
    "test_cases": [
      {
        "input": [
          "IX"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_069",
    "title": "Find Duplicate Elements in List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print all duplicate elements in the list, in ascending order and space-separated. If no duplicates, print an empty line.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated duplicate integers.",
    "starter_code": "# Get list, find duplicate elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 1 4"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_070",
    "title": "Rotate String Right by N",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and an integer N as input. Rotate the string to the right by N positions and print the rotated string.\n\n**Constraints**\nInput format:\nFirst line: string. Second line: integer N (0 <= N < string length).\n\nOutput format:\nThe rotated string.",
    "starter_code": "# Get string and N, rotate right, and print",
    "test_cases": [
      {
        "input": [
          "abcde",
          "2"
        ],
        "expected_output": "deabc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_071",
    "title": "Longest Word in List (Function)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `find_longest_word` that takes a list of strings and returns the longest string. If multiple words have the same longest length, return the first one. Then, take space-separated words from input, convert to list, and print the result.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nA single string.",
    "starter_code": "def find_longest_word(words):\n    # Write your code here\n\n# Get input, call function, and print result",
    "test_cases": [
      {
        "input": [
          "apple banana cherry"
        ],
        "expected_output": "banana"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_072",
    "title": "Check Balanced Brackets (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string containing only '(', ')', '{', '}', '[', ']' characters. Print 'Balanced' if the brackets are balanced, otherwise 'Not Balanced'.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA string ('Balanced' or 'Not Balanced').",
    "starter_code": "# Get string, check bracket balance, and print",
    "test_cases": [
      {
        "input": [
          "([{}])"
        ],
        "expected_output": "Balanced"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_073",
    "title": "Count Substrings in String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a main string and a substring as input. Count and print how many times the substring appears in the main string (non-overlapping occurrences).\n\n**Constraints**\nInput format:\nFirst line: main string. Second line: sub string.\n\nOutput format:\nA single integer count.",
    "starter_code": "# Get main and sub strings, count occurrences, and print",
    "test_cases": [
      {
        "input": [
          "ababa",
          "aba"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_074",
    "title": "Remove Vowels from String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and prints a new string with all vowels (a, e, i, o, u, case-insensitive) removed.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nThe string with vowels removed.",
    "starter_code": "# Get string, remove vowels, and print",
    "test_cases": [
      {
        "input": [
          "programming"
        ],
        "expected_output": "prgrmmng"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_075",
    "title": "Transpose Matrix (Any Size)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (rows separated by semicolons, elements by commas) as input. Print its transpose. Assume a rectangular matrix.\n\n**Constraints**\nInput format:\nA single string representing the matrix (e.g., '1,2,3;4,5,6').\n\nOutput format:\nTransposed matrix, rows separated by newlines, elements by spaces.",
    "starter_code": "# Get matrix string, transpose, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;4,5,6"
        ],
        "expected_output": "1 4\n2 5\n3 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_076",
    "title": "Find Mode of a List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input and prints the mode (the most frequently occurring element). If there are multiple modes, print the smallest one.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find mode, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 3 3 4"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_077",
    "title": "Second Smallest Element in List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) as input and prints the second smallest element.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers (at least 2).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find second smallest, and print",
    "test_cases": [
      {
        "input": [
          "10 5 20 15 25"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_078",
    "title": "Calculate String Hash (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and calculates a simple hash value: sum of ASCII values of all characters. Print the hash value.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, calculate simple hash, and print",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "294"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_079",
    "title": "Find All Divisors of N",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input and prints all of its positive divisors (including 1 and N), space-separated and in ascending order.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get N, find all divisors, and print",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "1 2 3 4 6 12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_080",
    "title": "List Intersection (Function)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `list_intersection` that takes two lists of integers and returns a new list containing elements common to both, without duplicates, in ascending order. Then, take two space-separated lists from input and print the result.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "def list_intersection(list1, list2):\n    # Write your code here\n\n# Get input, call function, and print result",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6"
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_081",
    "title": "Print Diamond Pattern (Dynamic Size)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer N as input and prints a diamond pattern of asterisks with `N` rows.\n\n**Constraints**\nInput format:\nA single odd integer N (N <= 7).\n\nOutput format:\nA diamond pattern.",
    "starter_code": "# Get N, print diamond pattern",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "  *\n ***\n*****\n ***\n  *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_082",
    "title": "Count Prime Factors",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input and prints the count of its distinct prime factors.\n\n**Constraints**\nInput format:\nA single positive integer N (N <= 100).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, count distinct prime factors, and print",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_083",
    "title": "GCD of List of Numbers",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input and prints their Greatest Common Divisor (GCD).\n\n**Constraints**\nInput format:\nA single line of space-separated integers (at least 2 numbers).\n\nOutput format:\nA single integer.",
    "starter_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Get list, calculate GCD of all numbers, and print",
    "test_cases": [
      {
        "input": [
          "24 36 48"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_084",
    "title": "Encrypt String (Simple Shift)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and an integer shift value as input. Encrypt the string by shifting each alphabetic character (both uppercase and lowercase) by the given value, wrapping around the alphabet. Non-alphabetic characters remain unchanged.\n\n**Constraints**\nInput format:\nFirst line: string. Second line: integer shift (0-25).\n\nOutput format:\nThe encrypted string.",
    "starter_code": "# Get string and shift, encrypt, and print",
    "test_cases": [
      {
        "input": [
          "Hello",
          "1"
        ],
        "expected_output": "Ifmmp"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_085",
    "title": "Decimal to Hexadecimal Converter",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer (decimal) as input and converts it to its hexadecimal representation. Print the hexadecimal string (uppercase).\n\n**Constraints**\nInput format:\nA single positive integer (N <= 255).\n\nOutput format:\nA string representing the hexadecimal number.",
    "starter_code": "# Get decimal, convert to hexadecimal, and print",
    "test_cases": [
      {
        "input": [
          "255"
        ],
        "expected_output": "FF"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_086",
    "title": "Find Unique Elements in List (Order Maintained)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Print only the elements that appear exactly once in the list, in their original order, space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated unique integers.",
    "starter_code": "# Get list, find unique elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 4 4 5"
        ],
        "expected_output": "1 3 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_087",
    "title": "Matrix Diagonal Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a square matrix (rows separated by semicolons, elements by commas) as input. Calculate and print the sum of its main diagonal elements.\n\n**Constraints**\nInput format:\nA single string representing the matrix (e.g., '1,2;3,4').\n\nOutput format:\nA single integer.",
    "starter_code": "# Get matrix string, calculate diagonal sum, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;4,5,6;7,8,9"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_088",
    "title": "Second Most Frequent Character",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Find and print the second most frequent character in the string. If there's a tie, print the one that comes first alphabetically. Assume only lowercase letters and at least two distinct characters.\n\n**Constraints**\nInput format:\nA single string (lowercase letters only).\n\nOutput format:\nA single character.",
    "starter_code": "# Get string, find second most frequent character, and print",
    "test_cases": [
      {
        "input": [
          "programming"
        ],
        "expected_output": "g"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_089",
    "title": "String Permutations (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 3-character string as input (e.g., 'abc'). Print all possible permutations of the characters, each on a new line, in alphabetical order.\n\n**Constraints**\nInput format:\nA single 3-character string with distinct characters.\n\nOutput format:\nPermutations, each on a new line.",
    "starter_code": "# Get 3-char string, generate permutations, and print",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "abc\nacb\nbac\nbca\ncab\ncba"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_090",
    "title": "Find Sum of Sub-arrays (Fixed Size 2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Print the sum of all contiguous sub-arrays of size 2, each sum on a new line.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (at least 2).\n\nOutput format:\nSums of sub-arrays, each on a new line.",
    "starter_code": "# Get list, calculate sums of sub-arrays of size 2, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3\n5\n7\n9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_091",
    "title": "Sum of Even Fibonacci Numbers",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input. Calculate the sum of all even-valued terms in the Fibonacci sequence that do not exceed N.\n\n**Constraints**\nInput format:\nA single integer N (N <= 100).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, sum even Fibonacci numbers up to N, and print",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_092",
    "title": "Count Bits in Binary Representation",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and prints the number of set bits (1s) in its binary representation.\n\n**Constraints**\nInput format:\nA single non-negative integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get number, count set bits, and print",
    "test_cases": [
      {
        "input": [
          "13"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_093",
    "title": "Find Longest Increasing Subsequence (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the length of the longest *contiguous* increasing subsequence.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer (length).",
    "starter_code": "# Get list, find longest increasing contiguous subsequence length, and print",
    "test_cases": [
      {
        "input": [
          "1 3 2 4 5 6"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_094",
    "title": "Smallest Missing Positive Integer",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the smallest positive integer (greater than 0) that is not present in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find smallest missing positive, and print",
    "test_cases": [
      {
        "input": [
          "1 2 0 4 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_095",
    "title": "Implement Queue (Enqueue/Dequeue)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a basic queue. Take a sequence of commands ('ENQ X' to enqueue X, 'DEQ' to dequeue) as input. Print the dequeued element. If 'DEQ' on empty queue, print 'Empty'. Implement using a Python list (do not use collections.deque).\n\n**Constraints**\nInput format:\nMultiple lines of commands.\n\nOutput format:\nDequeued elements or 'Empty', each on a new line.",
    "starter_code": "queue = []\n# Process commands for queue simulation",
    "test_cases": [
      {
        "input": [
          "ENQ 10",
          "ENQ 20",
          "DEQ",
          "DEQ",
          "DEQ"
        ],
        "expected_output": "10\n20\nEmpty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_096",
    "title": "Implement Stack (Push/Pop)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a basic stack. Take a sequence of commands ('PUSH X' to push X, 'POP' to pop) as input. Print the popped element. If 'POP' on empty stack, print 'Empty'. Implement using a Python list (do not use collections.deque).\n\n**Constraints**\nInput format:\nMultiple lines of commands.\n\nOutput format:\nPopped elements or 'Empty', each on a new line.",
    "starter_code": "stack = []\n# Process commands for stack simulation",
    "test_cases": [
      {
        "input": [
          "PUSH 10",
          "PUSH 20",
          "POP",
          "POP",
          "POP"
        ],
        "expected_output": "20\n10\nEmpty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_097",
    "title": "Check if List is Sorted and Rotated",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) as input. Print 'True' if the list is sorted (ascending) and then rotated, otherwise 'False'. A sorted and rotated list means it was originally sorted, then some prefix was moved to the end (e.g., [3,4,5,1,2] from [1,2,3,4,5]).\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get list, check if sorted and rotated, and print",
    "test_cases": [
      {
        "input": [
          "3 4 5 1 2"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_098",
    "title": "Count Set Bits in Range",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two non-negative integers, `start` and `end`, as input. Calculate and print the total number of set bits (1s) across all numbers from `start` to `end` (inclusive).\n\n**Constraints**\nInput format:\nTwo non-negative integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get range, count total set bits, and print",
    "test_cases": [
      {
        "input": [
          "1",
          "3"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_099",
    "title": "Validate IP Address (Simplified)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and checks if it represents a valid IPv4 address in simplified dot-decimal notation. A valid segment is an integer from 0 to 255. An IP address has exactly 4 segments separated by '.' Print 'Valid' or 'Invalid'.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA string ('Valid' or 'Invalid').",
    "starter_code": "# Get string, validate IP address, and print",
    "test_cases": [
      {
        "input": [
          "192.168.1.1"
        ],
        "expected_output": "Valid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_100",
    "title": "Find Pair with Given Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) and a target sum as input. Print 'Found' if there exists any pair of numbers in the list that sum up to the target, otherwise 'Not Found'.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: target sum (integer).\n\nOutput format:\nA string ('Found' or 'Not Found').",
    "starter_code": "# Get list and target sum, find pair, and print",
    "test_cases": [
      {
        "input": [
          "10 20 10 40 50",
          "60"
        ],
        "expected_output": "Found"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_101",
    "title": "Calculate Harmonic Series Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input and calculates the sum of the harmonic series up to N terms (1 + 1/2 + 1/3 + ... + 1/N). Print the sum rounded to two decimal places.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA float rounded to two decimal places.",
    "starter_code": "# Get N, calculate harmonic series sum, and print",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1.83"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_102",
    "title": "Count Positive/Negative in List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Count and print the number of positive, negative, and zero elements in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nThree integers on separate lines (positive count, negative count, zero count).",
    "starter_code": "# Get list, count positive/negative/zero, and print",
    "test_cases": [
      {
        "input": [
          "1 -2 0 4 -5"
        ],
        "expected_output": "2\n2\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_103",
    "title": "Matrix Row Sums",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (rows separated by semicolons, elements by commas) as input. Calculate and print the sum of elements in each row, each sum on a new line.\n\n**Constraints**\nInput format:\nA single string representing the matrix (e.g., '1,2;3,4').\n\nOutput format:\nRow sums, each on a new line.",
    "starter_code": "# Get matrix string, calculate row sums, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;4,5,6"
        ],
        "expected_output": "6\n15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_104",
    "title": "Find Majority Element",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the majority element, which appears more than N/2 times (where N is the list length). Assume such an element always exists.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find majority element, and print",
    "test_cases": [
      {
        "input": [
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_105",
    "title": "String Compression (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (e.g., 'aaabbccaa') as input and compresses it by replacing consecutive repeating characters with the character and its count. Print the compressed string (e.g., 'a3b2c2a2').\n\n**Constraints**\nInput format:\nA single string (alphabetic characters only).\n\nOutput format:\nThe compressed string.",
    "starter_code": "# Get string, compress it, and print",
    "test_cases": [
      {
        "input": [
          "aaabbccaa"
        ],
        "expected_output": "a3b2c2a2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_106",
    "title": "String Decompression (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a compressed string (e.g., 'a3b2c1') as input and decompresses it. Print the decompressed string. Assume valid format (char-digit pairs).\n\n**Constraints**\nInput format:\nA single compressed string.\n\nOutput format:\nThe decompressed string.",
    "starter_code": "# Get compressed string, decompress, and print",
    "test_cases": [
      {
        "input": [
          "A3B2C1"
        ],
        "expected_output": "AAABBC"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_107",
    "title": "Validate Credit Card Number (Luhn Algo - Simplified)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 6-digit number string as input. Apply a simplified Luhn algorithm check: Double every second digit from the right. If doubling results in a two-digit number, sum its digits. Sum all digits (original and processed). If the total sum is divisible by 10, print 'Valid', else 'Invalid'.\n\n**Constraints**\nInput format:\nA single 6-digit string.\n\nOutput format:\nA string ('Valid' or 'Invalid').",
    "starter_code": "# Get 6-digit number, apply simplified Luhn, and print",
    "test_cases": [
      {
        "input": [
          "499273"
        ],
        "expected_output": "Valid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_108",
    "title": "Closest Pair Sum (Two Pointers)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers (space-separated) and a target sum as input. Find a pair of elements in the list whose sum is closest to the target sum. Print the sum of this pair.\n\n**Constraints**\nInput format:\nFirst line: space-separated sorted integers. Second line: target sum (integer).\n\nOutput format:\nA single integer (the closest sum).",
    "starter_code": "# Get sorted list and target, find closest pair sum, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "7"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_109",
    "title": "Circular Array Rotation",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated), an integer N (number of right rotations) as input. Perform N circular right rotations on the array and print the resulting array space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer N.\n\nOutput format:\nSpace-separated rotated integers.",
    "starter_code": "# Get list and N, perform circular right rotation, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "4 5 1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_110",
    "title": "Max Consecutive Ones",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of binary digits (0s and 1s, space-separated) as input. Find and print the maximum number of consecutive 1s in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (0s and 1s).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list of binary digits, find max consecutive ones, and print",
    "test_cases": [
      {
        "input": [
          "1 1 0 1 1 1 0 1"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_111",
    "title": "Find Longest Word Without Vowels",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (space-separated words) as input. Find and print the longest word that contains no vowels (a, e, i, o, u, case-insensitive). If no such word exists, print an empty line.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nA single string or empty line.",
    "starter_code": "# Get sentence, find longest word without vowels, and print",
    "test_cases": [
      {
        "input": [
          "rhythm sky fly hello"
        ],
        "expected_output": "rhythm"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_112",
    "title": "Palindrome Permutation Check",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Print 'True' if the string is a permutation of a palindrome, otherwise 'False'. (Case-insensitive, ignore spaces).\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get string, check if it's a permutation of a palindrome, and print",
    "test_cases": [
      {
        "input": [
          "Tact Coa"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_113",
    "title": "Remove Nth Character from String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and an integer N as input. Print the string with the character at index N (0-based) removed.\n\n**Constraints**\nInput format:\nFirst line: string. Second line: integer N (valid index).\n\nOutput format:\nThe modified string.",
    "starter_code": "# Get string and N, remove Nth character, and print",
    "test_cases": [
      {
        "input": [
          "Python",
          "2"
        ],
        "expected_output": "Pyhon"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_114",
    "title": "Check if Number is Power of Two",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input and prints 'True' if N is a power of two, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get N, check if power of two, and print",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_115",
    "title": "Simple Calculator with Error Handling (Division by Zero)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two numbers and an operator (+, -, *, /) as input. Perform the operation and print the result. If the operator is '/' and the second number is 0, print 'Error: Division by Zero'.\n\n**Constraints**\nInput format:\nFirst line: first number (integer). Second line: operator (string). Third line: second number (integer).\n\nOutput format:\nA single integer result or error message.",
    "starter_code": "# Get numbers and operator, perform calculation with error handling, and print",
    "test_cases": [
      {
        "input": [
          "10",
          "/",
          "0"
        ],
        "expected_output": "Error: Division by Zero"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_116",
    "title": "Print Nth Prime Number",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input and prints the Nth prime number. Assume N is small enough for efficient calculation.\n\n**Constraints**\nInput format:\nA single integer N (N <= 10).\n\nOutput format:\nA single integer.",
    "starter_code": "def is_prime(num):\n    if num <= 1: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0: return False\n    return True\n\n# Get N, find Nth prime, and print",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "11"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_117",
    "title": "Character Replacement in String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string, an old character, and a new character as input. Print the string with all occurrences of the old character replaced by the new character.\n\n**Constraints**\nInput format:\nFirst line: string. Second line: old char. Third line: new char.\n\nOutput format:\nThe modified string.",
    "starter_code": "# Get string, old char, new char, replace, and print",
    "test_cases": [
      {
        "input": [
          "hello world",
          "l",
          "x"
        ],
        "expected_output": "hexxo worxd"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_118",
    "title": "String to Title Case",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (sentence) as input and converts it to title case (first letter of each word capitalized, rest lowercase). Print the result.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nThe string in title case.",
    "starter_code": "# Get string, convert to title case, and print",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "Hello World"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_119",
    "title": "Maximum Subarray Sum (Kadane's Algo - Simplified)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the maximum sum of any contiguous subarray within the list. Consider only non-negative sums.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find max subarray sum, and print",
    "test_cases": [
      {
        "input": [
          "-2 1 -3 4 -1 2 1 -5 4"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_120",
    "title": "Pascal's Triangle Row",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N (row index, 0-based) as input. Print the Nth row of Pascal's triangle, with elements space-separated.\n\n**Constraints**\nInput format:\nA single integer N (N <= 5).\n\nOutput format:\nSpace-separated integers for the Nth row.",
    "starter_code": "# Get N, generate Nth row of Pascal's triangle, and print",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 3 3 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_121",
    "title": "Validate Date Format (DD/MM/YYYY)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a date string in DD/MM/YYYY format as input. Print 'Valid Date' if it's a valid date (e.g., 31/01/2023, not 32/01/2023). Consider month days and leap years for February. Otherwise, print 'Invalid Date'.\n\n**Constraints**\nInput format:\nA single string (date).\n\nOutput format:\nA string ('Valid Date' or 'Invalid Date').",
    "starter_code": "# Get date string, validate format and date, and print",
    "test_cases": [
      {
        "input": [
          "29/02/2024"
        ],
        "expected_output": "Valid Date"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_122",
    "title": "Character Counter (Function)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `count_characters` that takes a string and returns a dictionary where keys are characters and values are their counts. Then, take a string from input and print the frequency of 'x' and 'y' (or 0 if not present) on separate lines.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nTwo integers on separate lines.",
    "starter_code": "def count_characters(s):\n    # Write your code here\n\n# Get input, call function, and print specific frequencies",
    "test_cases": [
      {
        "input": [
          "xylophone"
        ],
        "expected_output": "1\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_123",
    "title": "Reverse Words in a String III",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sentence (string), reverse the order of characters in each word, but maintain the original word order and spaces. Print the result.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nA string with characters in each word reversed.",
    "starter_code": "# Get sentence, reverse characters in each word, and print",
    "test_cases": [
      {
        "input": [
          "Let's take LeetCode contest"
        ],
        "expected_output": "s'teL ekat edoCteeL tsetnoc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_124",
    "title": "Unique Paths in Grid (2x2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes no input. Calculate and print the number of unique paths from the top-left corner to the bottom-right corner of a 2x2 grid, moving only right or down.\n\n**Constraints**\nInput format:\nNone.\n\nOutput format:\nA single integer.",
    "starter_code": "# Calculate unique paths in 2x2 grid and print",
    "test_cases": [
      {
        "input": [],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_125",
    "title": "Power of Three",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input. Print 'True' if N is a power of three, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get N, check if power of three, and print",
    "test_cases": [
      {
        "input": [
          "27"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_126",
    "title": "Happy Number Checker",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input. Print 'True' if it's a \"Happy Number\", otherwise 'False'. A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it enters a cycle which does not include 1.\n\n**Constraints**\nInput format:\nA single positive integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "def is_happy(n):\n    # Write your code here\n\n# Get input, check if happy number, and print",
    "test_cases": [
      {
        "input": [
          "19"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_127",
    "title": "Trailing Zeros in Factorial",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer N as input and prints the number of trailing zeros in N! (N factorial).\n\n**Constraints**\nInput format:\nA single non-negative integer N.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, count trailing zeros in factorial, and print",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_128",
    "title": "Remove Nth Node From End of List (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually removes the Nth element from the *end* of a list. Take a list of integers (space-separated) and an integer N as input. Print the modified list space-separated. Assume N is valid.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer N (1-based from end).\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list and N, remove Nth element from end, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "1 2 3 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_129",
    "title": "Longest Palindromic Substring Length (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and prints the length of its longest palindromic substring. Consider only contiguous substrings.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, find longest palindromic substring length, and print",
    "test_cases": [
      {
        "input": [
          "babad"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_130",
    "title": "Group Anagrams Together",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings (space-separated) as input. Group the anagrams together and print each group on a new line, with words in each group sorted alphabetically and space-separated. Groups themselves should be sorted alphabetically by their first word.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nGrouped anagrams, each group on a new line, sorted.",
    "starter_code": "# Get list of strings, group anagrams, and print",
    "test_cases": [
      {
        "input": [
          "eat tea tan ate nat bat"
        ],
        "expected_output": "ate eat tea\nbat\nnat tan"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_131",
    "title": "Sum of Digits of Factorial",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer N as input. Calculate N! (N factorial) and then print the sum of its digits.\n\n**Constraints**\nInput format:\nA single non-negative integer N (N <= 10).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, calculate factorial, sum its digits, and print",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "27"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_132",
    "title": "Next Palindrome Number",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print the smallest palindrome number strictly greater than N.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA single integer.",
    "starter_code": "def is_palindrome_num(num):\n    return str(num) == str(num)[::-1]\n\n# Get N, find next palindrome, and print",
    "test_cases": [
      {
        "input": [
          "808"
        ],
        "expected_output": "818"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_133",
    "title": "Count Pairs with Sum S",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and a target sum S as input. Count and print the number of unique pairs of elements in the list whose sum is exactly S.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: target sum S.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and target sum, count pairs, and print",
    "test_cases": [
      {
        "input": [
          "1 5 7 1",
          "6"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_134",
    "title": "Missing Number in Sequence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of N-1 distinct integers (space-separated) from a sequence 1 to N. Find and print the missing number.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (N <= 100).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find missing number, and print",
    "test_cases": [
      {
        "input": [
          "1 2 4 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_135",
    "title": "Smallest Divisor of N",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N (N > 1) as input and prints its smallest positive divisor greater than 1.\n\n**Constraints**\nInput format:\nA single positive integer N (N > 1).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, find smallest divisor, and print",
    "test_cases": [
      {
        "input": [
          "15"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_136",
    "title": "Reverse Words in a String (Spaces Only)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input. Reverse the order of words in the sentence. Words are separated by single spaces. Print the reversed sentence.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nThe sentence with words reversed.",
    "starter_code": "# Get sentence, reverse word order, and print",
    "test_cases": [
      {
        "input": [
          "the sky is blue"
        ],
        "expected_output": "blue is sky the"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_137",
    "title": "Check Prime Palindrome",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print 'True' if N is both a prime number and a palindrome, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "def is_prime(num):\n    if num <= 1: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0: return False\n    return True\n\ndef is_palindrome_num(num):\n    return str(num) == str(num)[::-1]\n\n# Get N, check if prime palindrome, and print",
    "test_cases": [
      {
        "input": [
          "101"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_138",
    "title": "Fibonacci Sequence upto N",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print the Fibonacci sequence up to (but not exceeding) N, with terms space-separated.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nSpace-separated Fibonacci terms.",
    "starter_code": "# Get N, generate Fibonacci sequence, and print",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "0 1 1 2 3 5 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_139",
    "title": "Count Distinct Elements in List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Count and print the number of distinct elements in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, count distinct elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 4 4 5"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_140",
    "title": "Check if List Contains Duplicate (Bool)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Print 'True' if the list contains any duplicate element, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get list, check for duplicates, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_141",
    "title": "Smallest Element in Rotated Sorted Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) that was originally sorted and then rotated. Find and print the smallest element in this rotated array.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get rotated sorted list, find smallest element, and print",
    "test_cases": [
      {
        "input": [
          "3 4 5 1 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_142",
    "title": "Reverse Each Word in Sentence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input. Reverse each word in the sentence individually, but keep the word order the same. Print the resulting sentence.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nThe sentence with each word reversed.",
    "starter_code": "# Get sentence, reverse each word, and print",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "olleH dlroW"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_143",
    "title": "Calculate LCM of Two Numbers",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers A and B as input. Calculate and print their Least Common Multiple (LCM).\n\n**Constraints**\nInput format:\nTwo positive integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Get A and B, calculate LCM, and print",
    "test_cases": [
      {
        "input": [
          "4",
          "6"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_144",
    "title": "Isomorphic Strings",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, s1 and s2, as input. Print 'True' if they are isomorphic, otherwise 'False'. Two strings are isomorphic if the characters in s1 can be replaced to get s2. All occurrences of a character must be replaced with another character while preserving the order of the characters. No two characters may map to the same character, but a character may map to itself.\n\n**Constraints**\nInput format:\nTwo strings on separate lines (same length).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get s1 and s2, check if isomorphic, and print",
    "test_cases": [
      {
        "input": [
          "egg",
          "add"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_145",
    "title": "Valid Parentheses String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string containing only '(', ')', '{', '}', '[', ']' characters as input. Print 'Valid' if the input string is valid (brackets are matched and in correct order), otherwise 'Invalid'.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA string ('Valid' or 'Invalid').",
    "starter_code": "# Get string, validate parentheses, and print",
    "test_cases": [
      {
        "input": [
          "()[]{}"
        ],
        "expected_output": "Valid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_146",
    "title": "Find All Palindromic Substrings (Count)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Count and print the total number of palindromic substrings (contiguous) within it.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, count palindromic substrings, and print",
    "test_cases": [
      {
        "input": [
          "aaa"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_147",
    "title": "Remove Duplicates from Sorted List (In-place)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers (space-separated) as input. Remove duplicates such that each unique element appears only once. Print the modified list space-separated. Do this conceptually in-place (don't create a new list for printing, modify the existing one and print).\n\n**Constraints**\nInput format:\nA single line of space-separated sorted integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get sorted list, remove duplicates in-place, and print",
    "test_cases": [
      {
        "input": [
          "1 1 2 2 3 4 4"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_148",
    "title": "Check if String is a Permutation of Other",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, s1 and s2, as input. Print 'True' if s2 is a permutation of s1 (i.e., contains the same characters with the same counts), otherwise 'False'. (Case-sensitive, consider spaces).\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get s1 and s2, check if s2 is a permutation of s1, and print",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_149",
    "title": "Find Intersection of Two Sorted Lists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two sorted lists of integers (space-separated) as input. Find and print their intersection (common elements), sorted in ascending order and space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated sorted integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get two sorted lists, find intersection, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3 4 5 6 7"
        ],
        "expected_output": "3 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_150",
    "title": "Evaluate Postfix Expression (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a simple postfix expression (numbers and operators +, -, *, /) as input, with elements space-separated. Evaluate the expression and print the result. Assume valid input and integer results.\n\n**Constraints**\nInput format:\nA single string (postfix expression, e.g., '3 4 + 5 *').\n\nOutput format:\nA single integer.",
    "starter_code": "# Get postfix expression, evaluate, and print",
    "test_cases": [
      {
        "input": [
          "3 4 + 5 *"
        ],
        "expected_output": "35"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_151",
    "title": "First Unique Character in String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Find and print the index of the first non-repeating character in it. If there is no unique character, print -1.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, find index of first unique char, and print",
    "test_cases": [
      {
        "input": [
          "loveleetcode"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_152",
    "title": "Group Words by First Letter",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (space-separated words) as input. Group the words by their first letter (case-insensitive) and print each group on a new line, sorted alphabetically within the group. The groups themselves should be sorted alphabetically by their first letter.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nGrouped words, each group on a new line, sorted.",
    "starter_code": "# Get sentence, group words by first letter, and print",
    "test_cases": [
      {
        "input": [
          "apple banana cherry fig apple"
        ],
        "expected_output": "apple apple\nbanana\ncherry\nfig"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_153",
    "title": "Check if String Contains All Alphabets (Pangram)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Print 'Pangram' if the string contains every letter of the alphabet (a-z, case-insensitive) at least once, otherwise 'Not Pangram'.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA string ('Pangram' or 'Not Pangram').",
    "starter_code": "# Get string, check if pangram, and print",
    "test_cases": [
      {
        "input": [
          "The quick brown fox jumps over the lazy dog"
        ],
        "expected_output": "Pangram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_154",
    "title": "Rotate Matrix by 90 Degrees (2x2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 2x2 matrix (rows separated by semicolons, elements by commas) as input. Rotate it clockwise by 90 degrees and print the resulting 2x2 matrix, row by row, space-separated elements.\n\n**Constraints**\nInput format:\nA single string representing the matrix (e.g., '1,2;3,4').\n\nOutput format:\nRotated matrix, row by row, space-separated elements.",
    "starter_code": "# Get 2x2 matrix string, rotate 90 degrees, and print",
    "test_cases": [
      {
        "input": [
          "1,2;3,4"
        ],
        "expected_output": "3 1\n4 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_155",
    "title": "Remove Element from List (Value)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and a target value as input. Remove all occurrences of the target value from the list in-place and print the modified list space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: target value (integer).\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list and target value, remove elements, and print",
    "test_cases": [
      {
        "input": [
          "3 2 2 3",
          "3"
        ],
        "expected_output": "2 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_156",
    "title": "Merge Two Sorted Lists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two sorted lists of integers (space-separated) as input. Merge them into a single sorted list and print it space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated sorted integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get two sorted lists, merge them, and print",
    "test_cases": [
      {
        "input": [
          "1 3 5",
          "2 4 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_157",
    "title": "Add Binary Strings",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two binary strings (e.g., '101', '11') as input. Add them as binary numbers and print the result as a binary string.\n\n**Constraints**\nInput format:\nTwo binary strings on separate lines.\n\nOutput format:\nA single binary string.",
    "starter_code": "# Get two binary strings, add them, and print",
    "test_cases": [
      {
        "input": [
          "101",
          "11"
        ],
        "expected_output": "1000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_158",
    "title": "Find Single Number (XOR)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) where every element appears twice except for one. Find and print that single element.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find single number using XOR, and print",
    "test_cases": [
      {
        "input": [
          "4 1 2 1 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_159",
    "title": "Reverse Integer",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and prints its digits in reverse order. If the reversed integer overflows a 32-bit signed integer range (approximately -2*10^9 to 2*10^9), print 0.\n\n**Constraints**\nInput format:\nA single integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get integer, reverse it with overflow check, and print",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "321"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_160",
    "title": "Count Vowels and Consonants",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (sentence) as input. Count and print the total number of vowels and consonants (case-insensitive) in the string. Ignore spaces and other characters.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nTwo integers on separate lines (vowel count, consonant count).",
    "starter_code": "# Get string, count vowels and consonants, and print",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "4\n6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_161",
    "title": "Longest Substring Without Repeating Characters (Length)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Find and print the length of the longest substring without repeating characters.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, find longest substring without repeating chars length, and print",
    "test_cases": [
      {
        "input": [
          "abcabcbb"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_162",
    "title": "Climbing Stairs (N steps)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input, representing the number of steps to reach the top. You can either climb 1 or 2 steps at a time. Print the number of distinct ways to climb to the top.\n\n**Constraints**\nInput format:\nA single integer N (N <= 10).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, calculate distinct ways to climb stairs, and print",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_163",
    "title": "Is String a Subsequence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, s1 and s2, as input. Print 'True' if s1 is a subsequence of s2, otherwise 'False'. A subsequence is formed by deleting zero or more characters from s2 without changing the order of the remaining characters.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get s1 and s2, check if s1 is subsequence of s2, and print",
    "test_cases": [
      {
        "input": [
          "ace",
          "abcde"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_164",
    "title": "Sum of Powers of Two (Binary Check)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print 'True' if N can be expressed as a sum of distinct powers of two, otherwise 'False'. (Essentially, checking if it's a valid binary representation).\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get N, check if sum of distinct powers of two, and print",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_165",
    "title": "Move Zeros to End of List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Move all 0's to the end of the list while maintaining the relative order of the non-zero elements. Print the modified list space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, move zeros to end, and print",
    "test_cases": [
      {
        "input": [
          "0 1 0 3 12"
        ],
        "expected_output": "1 3 12 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_166",
    "title": "Factorial of N (Recursive)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a recursive function `factorial` that calculates the factorial of a non-negative integer N. Then, take N from input and print its factorial.\n\n**Constraints**\nInput format:\nA single non-negative integer N (N <= 10).\n\nOutput format:\nA single integer.",
    "starter_code": "def factorial(n):\n    # Write your recursive code here\n\n# Get N, call factorial function, and print result",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_167",
    "title": "Sum of Two Arrays (Element-wise)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers (space-separated) of the same length as input. Create a new list where each element is the sum of the corresponding elements from the input lists. Print the new list space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated integers (same length).\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get two lists, sum element-wise, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "5 7 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_168",
    "title": "Reverse Integer (Positive Only)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input and prints its digits in reverse order.\n\n**Constraints**\nInput format:\nA single positive integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get positive integer, reverse it, and print",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "54321"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_169",
    "title": "Find Max Element in Each Row of Matrix",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (rows separated by semicolons, elements by commas) as input. Find and print the maximum element in each row, each maximum on a new line.\n\n**Constraints**\nInput format:\nA single string representing the matrix (e.g., '1,2,3;4,5,6').\n\nOutput format:\nMaximum element of each row, each on a new line.",
    "starter_code": "# Get matrix string, find max element in each row, and print",
    "test_cases": [
      {
        "input": [
          "1,5,3;9,2,6"
        ],
        "expected_output": "5\n9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_170",
    "title": "Count Words in a Sentence",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input and prints the total number of words in it. Assume words are separated by single spaces.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get sentence, count words, and print",
    "test_cases": [
      {
        "input": [
          "Hello world, how are you?"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_171",
    "title": "Intersection of Multiple Lists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes multiple lists of integers as input (each list on a new line, space-separated). Find and print the intersection of all the lists, sorted in ascending order and space-separated.\n\n**Constraints**\nInput format:\nMultiple lines, each with space-separated integers. (At least two lines).\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get multiple lists, find intersection, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6",
          "4 6 7 8"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_172",
    "title": "Difference of Two Lists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers (space-separated) as input. Find and print the elements that are present in the first list but not in the second, sorted in ascending order and space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get two lists, find difference, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_173",
    "title": "Sort Words by Length",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (space-separated words) as input. Sort the words by their length in ascending order. If two words have the same length, maintain their original relative order. Print the sorted words space-separated.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nSpace-separated words, sorted by length.",
    "starter_code": "# Get sentence, sort words by length, and print",
    "test_cases": [
      {
        "input": [
          "apple banana cherry fig"
        ],
        "expected_output": "fig apple banana cherry"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_174",
    "title": "Check if Number is Abundant",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print 'Abundant' if the sum of its proper divisors (divisors excluding N itself) is greater than N, otherwise 'Not Abundant'.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA string ('Abundant' or 'Not Abundant').",
    "starter_code": "# Get N, check if abundant number, and print",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "Abundant"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_175",
    "title": "Matrix Column Sums",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (rows separated by semicolons, elements by commas) as input. Calculate and print the sum of elements in each column, each sum on a new line.\n\n**Constraints**\nInput format:\nA single string representing the matrix (e.g., '1,2;3,4').\n\nOutput format:\nColumn sums, each on a new line.",
    "starter_code": "# Get matrix string, calculate column sums, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;4,5,6"
        ],
        "expected_output": "5\n7\n9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_176",
    "title": "GCD of Three Numbers",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three positive integers A, B, and C as input. Calculate and print their Greatest Common Divisor (GCD).\n\n**Constraints**\nInput format:\nThree positive integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Get A, B, C, calculate GCD, and print",
    "test_cases": [
      {
        "input": [
          "12",
          "18",
          "30"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_177",
    "title": "Ugly Number Checker",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print 'True' if N is an Ugly Number, otherwise 'False'. Ugly numbers are positive integers whose prime factors are limited to 2, 3, and 5.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get N, check if ugly number, and print",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_178",
    "title": "Smallest Common Multiple (LCM of Range)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers, `start` and `end`, as input. Print the smallest positive number that is evenly divisible by all numbers from `start` to `end` (inclusive).\n\n**Constraints**\nInput format:\nTwo positive integers on separate lines (start, end; 1 <= start <= end <= 10).\n\nOutput format:\nA single integer.",
    "starter_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\n# Get range, calculate SCM, and print",
    "test_cases": [
      {
        "input": [
          "1",
          "5"
        ],
        "expected_output": "60"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_179",
    "title": "Count Set Bits in Integer Range",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two non-negative integers, `start` and `end`, as input. Count the total number of set bits (1s in binary representation) for all numbers in the range `[start, end]` (inclusive). Print the total count.\n\n**Constraints**\nInput format:\nTwo non-negative integers on separate lines (start, end).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get range, count total set bits, and print",
    "test_cases": [
      {
        "input": [
          "1",
          "3"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_180",
    "title": "Find All Substrings of String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Print all unique non-empty substrings of the string, each on a new line, sorted alphabetically.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nUnique substrings, each on a new line, sorted.",
    "starter_code": "# Get string, find all unique substrings, and print",
    "test_cases": [
      {
        "input": [
          "aba"
        ],
        "expected_output": "a\na\nab\naba\nb\nba"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_181",
    "title": "String to Snake Case",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (e.g., 'HelloWorld') as input and converts it to snake_case (e.g., 'hello_world'). Assume camelCase input.\n\n**Constraints**\nInput format:\nA single string (camelCase).\n\nOutput format:\nA single string in snake_case.",
    "starter_code": "# Get string, convert to snake_case, and print",
    "test_cases": [
      {
        "input": [
          "FirstName"
        ],
        "expected_output": "first_name"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_182",
    "title": "First Non-Repeating Character",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Find and print the first non-repeating character. If all characters repeat, print an empty line.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single character or empty line.",
    "starter_code": "# Get string, find first non-repeating char, and print",
    "test_cases": [
      {
        "input": [
          "swiss"
        ],
        "expected_output": "w"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_183",
    "title": "Number of Islands (Simplified 2x2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 2x2 binary grid (e.g., '1,1;0,1') as input. Count and print the number of \"islands\" (contiguous groups of 1s, horizontally or vertically). A single 1 is an island. Use DFS/BFS conceptually.\n\n**Constraints**\nInput format:\nA single string representing the 2x2 grid (e.g., '1,1;0,1').\n\nOutput format:\nA single integer.",
    "starter_code": "# Get 2x2 grid string, count islands, and print",
    "test_cases": [
      {
        "input": [
          "1,1;0,1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_184",
    "title": "Find Max Profit from Stock (One Transaction)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of stock prices (space-separated integers) where `prices[i]` is the price of a given stock on day `i`. Print the maximum profit you can achieve by buying on one day and selling on a different day. If no profit can be achieved, print 0.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (prices).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get stock prices, find max profit, and print",
    "test_cases": [
      {
        "input": [
          "7 1 5 3 6 4"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_185",
    "title": "Power of Four",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input. Print 'True' if N is a power of four, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get N, check if power of four, and print",
    "test_cases": [
      {
        "input": [
          "64"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_186",
    "title": "Print Diamond Pattern (Dynamic Size, Numbers)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer N as input and prints a diamond pattern of numbers, starting with 1 at the top, increasing to the middle, then decreasing.\n\n**Constraints**\nInput format:\nA single odd integer N (N <= 5).\n\nOutput format:\nA diamond pattern of numbers.",
    "starter_code": "# Get N, print diamond number pattern",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "  1\n 1 2 1\n1 2 3 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_187",
    "title": "Length of Last Word",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (sentence, potentially with leading/trailing spaces) as input. Print the length of its last word. A word is a maximal substring consisting of non-space characters.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, find length of last word, and print",
    "test_cases": [
      {
        "input": [
          "Hello World "
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_188",
    "title": "Common Characters in Two Strings",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, s1 and s2, as input. Print all characters that appear in both strings, in alphabetical order, space-separated. Each character should appear only once.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nSpace-separated characters.",
    "starter_code": "# Get s1 and s2, find common characters, and print",
    "test_cases": [
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "l o"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_189",
    "title": "Search Insert Position",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of distinct integers (space-separated) and a target value as input. If the target is found in the list, print its index. If not, print the index where it would be if it were inserted in order.\n\n**Constraints**\nInput format:\nFirst line: space-separated sorted integers. Second line: target integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get sorted list and target, find search insert position, and print",
    "test_cases": [
      {
        "input": [
          "1 3 5 6",
          "5"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_190",
    "title": "Reverse Words in a Sentence (Preserve Punctuation)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input. Reverse the order of words in the sentence, but keep punctuation attached to its word and maintain spaces correctly. Print the reversed sentence.\n\n**Constraints**\nInput format:\nA single string (sentence).\n\nOutput format:\nThe sentence with words reversed, punctuation preserved.",
    "starter_code": "# Get sentence, reverse words while preserving punctuation, and print",
    "test_cases": [
      {
        "input": [
          "Hello world!"
        ],
        "expected_output": "world! Hello"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_191",
    "title": "Check if List is Monotonic",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Print 'True' if the list is monotonic (either entirely non-decreasing or entirely non-increasing), otherwise 'False'.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get list, check if monotonic, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_192",
    "title": "Sum of Digits till Single Digit",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer N as input. Repeatedly add its digits until the result is a single digit number. Print this single digit.\n\n**Constraints**\nInput format:\nA single non-negative integer N.\n\nOutput format:\nA single integer (0-9).",
    "starter_code": "# Get N, sum digits until single digit, and print",
    "test_cases": [
      {
        "input": [
          "38"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_193",
    "title": "Check if Number is Automorphic",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print 'True' if N is an Automorphic Number, otherwise 'False'. An automorphic number is a number whose square ends in the number itself (e.g., 25, 5^2 = 25; 76, 76^2 = 5776).\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get N, check if automorphic, and print",
    "test_cases": [
      {
        "input": [
          "76"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_194",
    "title": "Count 'a' in String (Case-Insensitive)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Count and print the total occurrences of the character 'a' (case-insensitive) in the string.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, count 'a' (case-insensitive), and print",
    "test_cases": [
      {
        "input": [
          "Banana"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_195",
    "title": "Find Majority Element II (Top 2)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the elements that appear more than N/3 times (where N is the list length), sorted in ascending order and space-separated. There can be at most two such elements.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, find majority elements (more than N/3), and print",
    "test_cases": [
      {
        "input": [
          "3 2 3 1 2 3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_196",
    "title": "String to Title Case (Custom Delimiter)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a single character delimiter as input. Convert the string to title case, using the given delimiter to split words. Print the result.\n\n**Constraints**\nInput format:\nFirst line: string. Second line: single character delimiter.\n\nOutput format:\nThe string in title case.",
    "starter_code": "# Get string and delimiter, convert to title case, and print",
    "test_cases": [
      {
        "input": [
          "hello-world",
          "-"
        ],
        "expected_output": "Hello-World"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_197",
    "title": "Maximum Product of Three Numbers",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the maximum product of any three numbers in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (at least 3).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find maximum product of three numbers, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_198",
    "title": "Next Greater Element (Simplified)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) as input. For each element, find the next greater element to its right. If no such element exists, print -1. Print results space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, find next greater elements, and print",
    "test_cases": [
      {
        "input": [
          "4 5 2 25"
        ],
        "expected_output": "5 25 25 -1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_199",
    "title": "Find Pairs with Smallest Difference",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print all pairs of elements with the smallest absolute difference. Print each pair on a new line, space-separated, with the smaller element first. Sort pairs lexicographically if multiple such pairs exist.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (at least 2).\n\nOutput format:\nPairs of integers, each on a new line.",
    "starter_code": "# Get list, find pairs with smallest difference, and print",
    "test_cases": [
      {
        "input": [
          "4 2 1 3"
        ],
        "expected_output": "1 2\n2 3\n3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_200",
    "title": "Max Sum of Consecutive Subarray (Given K)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and an integer K as input. Find and print the maximum sum of a contiguous subarray of size K.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer K (1 <= K <= list length).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and K, find max sum of K-sized subarray, and print",
    "test_cases": [
      {
        "input": [
          "1 4 2 10 2 3 1 0 20",
          "4"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_201",
    "title": "Valid Anagram",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, `s` and `t`, as input. Print 'True' if `t` is an anagram of `s`, otherwise 'False'. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get s and t, check if t is an anagram of s, and print",
    "test_cases": [
      {
        "input": [
          "anagram",
          "nagaram"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_202",
    "title": "Intersection of Two Arrays (Elements)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers (space-separated) as input. Print the elements that are common to both lists, without duplicates, in ascending order, space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get two lists, find their intersection elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 1",
          "2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_203",
    "title": "Find the Difference of Strings",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, `s` and `t`, as input. String `t` is generated by randomly shuffling string `s` and then adding one more letter at a random position. Find and print the letter that was added to `t`.\n\n**Constraints**\nInput format:\nTwo strings on separate lines (s is length N, t is length N+1).\n\nOutput format:\nA single character.",
    "starter_code": "# Get s and t, find the added character, and print",
    "test_cases": [
      {
        "input": [
          "abcd",
          "abcde"
        ],
        "expected_output": "e"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_204",
    "title": "Number of Good Pairs",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. A pair `(i, j)` is called a \"good pair\" if `nums[i] == nums[j]` and `i < j`. Print the number of good pairs.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, count good pairs, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 1 1 3"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_205",
    "title": "Shuffle the Array (Simple Half)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and an integer `n` (half its length) as input. The list is `[x1,x2,...,xn,y1,y2,...,yn]`. Rearrange it to `[x1,y1,x2,y2,...,xn,yn]` and print the result space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer n.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list and n, shuffle the array, and print",
    "test_cases": [
      {
        "input": [
          "2 5 1 3 4 7",
          "3"
        ],
        "expected_output": "2 3 5 4 1 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_206",
    "title": "Maximum Number of Words You Can Type",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `text` and a string `brokenLetters` (space-separated characters) as input. A word is considered typable if it does not contain any character from `brokenLetters`. Print the number of words in `text` that you can type.\n\n**Constraints**\nInput format:\nFirst line: text string. Second line: space-separated broken letters.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get text and broken letters, count typable words, and print",
    "test_cases": [
      {
        "input": [
          "hello world",
          "ad"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_207",
    "title": "Check if String is a Subsequence (Order Maintained)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings, `s` and `t`, as input. Print 'True' if `s` is a subsequence of `t`. A subsequence means the characters of `s` appear in `t` in the same relative order, but not necessarily contiguously. Print 'True' or 'False'.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get s and t, check if s is a subsequence of t, and print",
    "test_cases": [
      {
        "input": [
          "abc",
          "ahbgdc"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_208",
    "title": "Count Elements With Strict Smaller and Greater Elements",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Count and print the number of elements that have at least one element strictly smaller than itself and at least one element strictly greater than itself in the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, count elements with strict smaller/greater, and print",
    "test_cases": [
      {
        "input": [
          "11 7 2 15"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_209",
    "title": "Unique Number of Occurrences",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Print 'True' if the number of occurrences of each value in the list is unique, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get list, check unique occurrences, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 1 1 3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_210",
    "title": "Richest Customer Wealth",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of customer accounts as input. Each customer's accounts are represented by a semicolon-separated list of integers, and customers are separated by a newline (e.g., '1,2,3\\n3,2,1'). Calculate and print the maximum wealth a customer has (sum of money in all their accounts).\n\n**Constraints**\nInput format:\nMultiple lines representing customer accounts.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get customer accounts string, find richest customer wealth, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3\n3,2,1"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_211",
    "title": "Maximum Subarray (Kadane's - All Cases)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the maximum sum of any contiguous subarray within the list. The subarray must contain at least one number.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find maximum subarray sum, and print",
    "test_cases": [
      {
        "input": [
          "-2 1 -3 4 -1 2 1 -5 4"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_212",
    "title": "Convert Sorted Array to Binary Search Tree (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers (space-separated) as input. Conceptually, convert it into a balanced Binary Search Tree (BST) and print the value of the root and its direct left and right children (if they exist). Print 'None' if a child does not exist.\n\n**Constraints**\nInput format:\nA single line of space-separated sorted integers.\n\nOutput format:\nRoot value, Left child, Right child (space-separated or 'None').",
    "starter_code": "# Get sorted list, conceptually build BST, and print root and children",
    "test_cases": [
      {
        "input": [
          "-10 -3 0 5 9"
        ],
        "expected_output": "0 -3 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_213",
    "title": "Search in Rotated Sorted Array (No Duplicates)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers (space-separated) sorted in ascending order, but then rotated at some pivot, and a target integer. If the target is found in the array, print its index. Otherwise, print -1.\n\n**Constraints**\nInput format:\nFirst line: space-separated distinct integers. Second line: target integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get rotated sorted list and target, search and print index",
    "test_cases": [
      {
        "input": [
          "4 5 6 7 0 1 2",
          "0"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_214",
    "title": "Reverse Linked List (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) representing a conceptual linked list. Reverse the list and print the elements space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, reverse it (conceptually linked list), and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_215",
    "title": "Binary Tree Inorder Traversal (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a conceptual binary tree represented as a list (e.g., [1,2,3,4,5] where 1 is root, 2 left child, 3 right, etc., using None for missing nodes). Print its inorder traversal (Left, Root, Right) space-separated. Assume a complete binary tree for simplicity for now.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (representing nodes).\n\nOutput format:\nSpace-separated integers (inorder traversal).",
    "starter_code": "# Get list representing binary tree, perform inorder traversal, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "2 1 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_216",
    "title": "Minimum Moves to Equal Array Elements",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. In one move, you can increment `n - 1` elements of the array by 1. Print the minimum number of moves required to make all elements equal.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, calculate minimum moves to equal elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_217",
    "title": "Find the Kth Largest Element in an Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and an integer K as input. Find and print the Kth largest element in the list (not necessarily distinct).\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer K (1-based index).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and K, find Kth largest element, and print",
    "test_cases": [
      {
        "input": [
          "3 2 1 5 6 4",
          "2"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_218",
    "title": "Count Primes up to N",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer N as input. Count and print the number of prime numbers less than or equal to N.\n\n**Constraints**\nInput format:\nA single non-negative integer N.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, count primes up to N, and print",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_219",
    "title": "Contains Duplicate II",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and an integer `k` as input. Print 'True' if there are two distinct indices `i` and `j` in the list such that `nums[i] == nums[j]` and `abs(i - j) <= k`. Otherwise, print 'False'.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer k.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get list and k, check for duplicate within k distance, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 1",
          "3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_220",
    "title": "Count Steps to Reduce Number to Zero",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `num` as input. If the current number is even, divide it by 2. Otherwise, subtract 1 from it. Print the number of steps to reduce it to zero.\n\n**Constraints**\nInput format:\nA single non-negative integer num.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get num, count steps to reduce to zero, and print",
    "test_cases": [
      {
        "input": [
          "14"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_221",
    "title": "Check if All Characters Have Equal Occurrences",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. Print 'True' if all characters in the string have the same number of occurrences, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get string, check if all characters have equal occurrences, and print",
    "test_cases": [
      {
        "input": [
          "abacaba"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_222",
    "title": "Find N Unique Integers Sum Up to Zero",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print any N unique integers that sum up to zero, space-separated.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get N, find N unique integers summing to zero, and print",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "-2 -1 0 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_223",
    "title": "Binary Gap",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print the length of its longest binary gap. A binary gap is a maximal sequence of consecutive zeros that is surrounded by ones on both ends in the binary representation of N.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get N, find longest binary gap, and print",
    "test_cases": [
      {
        "input": [
          "22"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_224",
    "title": "Sum of Subarray Minimums (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Calculate and print the sum of `min(b)` for every contiguous subarray `b` of the input list. For simplicity, just sum the minimums of *all* possible contiguous subarrays.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, calculate sum of subarray minimums, and print",
    "test_cases": [
      {
        "input": [
          "3 1 2 4"
        ],
        "expected_output": "17"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_225",
    "title": "Check if String Can Be Segmented",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` and a list of words (space-separated `wordDict`) as input. Print 'True' if `s` can be segmented into a space-separated sequence of one or more dictionary words. Print 'False' otherwise.\n\n**Constraints**\nInput format:\nFirst line: string s. Second line: space-separated words (dictionary).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get string and word dictionary, check if segmentable, and print",
    "test_cases": [
      {
        "input": [
          "leetcode",
          "leet code"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_226",
    "title": "Count Negative Numbers in a Sorted Matrix",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a matrix (rows separated by semicolons, elements by commas) as input. The matrix is sorted in non-increasing order both row-wise and column-wise. Count and print the number of negative numbers in the matrix.\n\n**Constraints**\nInput format:\nA single string representing the matrix (e.g., '4,3,2,-1;3,2,1,-1;1,1,-1,-2;-1,-1,-2,-3').\n\nOutput format:\nA single integer.",
    "starter_code": "# Get matrix string, count negative numbers, and print",
    "test_cases": [
      {
        "input": [
          "4,3,2,-1;3,2,1,-1;1,1,-1,-2;-1,-1,-2,-3"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_227",
    "title": "Max Sum of Pairs with Same Digit Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find two numbers in the list that have the same sum of digits, and their sum is maximized. Print this maximum sum. If no such pair exists, print -1.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "def digit_sum(n):\n    return sum(int(digit) for digit in str(n))\n\n# Get list, find max sum of pairs with same digit sum, and print",
    "test_cases": [
      {
        "input": [
          "18 43 36 24 9"
        ],
        "expected_output": "61"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_228",
    "title": "Concatenation of Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Create a new list that is the concatenation of the original list with itself. Print the new list space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, concatenate with itself, and print",
    "test_cases": [
      {
        "input": [
          "1 2 1"
        ],
        "expected_output": "1 2 1 1 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_229",
    "title": "Build Array from Permutation",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 0-indexed list of distinct integers `nums` (space-separated), where `0 <= nums[i] < len(nums)`. Build a new list `ans` of the same length where `ans[i] = nums[nums[i]]`. Print `ans` space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, build array from permutation, and print",
    "test_cases": [
      {
        "input": [
          "0 2 1 5 3 4"
        ],
        "expected_output": "0 1 2 4 5 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_230",
    "title": "Smallest Even Multiple",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `n` as input. Print the smallest positive integer that is a multiple of both 2 and `n`.\n\n**Constraints**\nInput format:\nA single positive integer n.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get n, find smallest even multiple, and print",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_231",
    "title": "Number of Common Factors",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers `a` and `b` as input. Print the number of common factors of `a` and `b`.\n\n**Constraints**\nInput format:\nTwo positive integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Get a and b, count common factors, and print",
    "test_cases": [
      {
        "input": [
          "12",
          "18"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_232",
    "title": "Smallest Value of the Rearranged Number",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `num` as input. Rearrange the digits of `num` such that you form the smallest possible number. If the number has a leading zero, it's not allowed unless the number is 0 itself. Print the rearranged number.\n\n**Constraints**\nInput format:\nA single non-negative integer num.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get num, rearrange to smallest, and print",
    "test_cases": [
      {
        "input": [
          "310"
        ],
        "expected_output": "103"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_233",
    "title": "Count Asterisks in String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` as input. Count and print the number of asterisks `*` in `s` that are *not* within any pair of vertical bars `|`. A pair of vertical bars `|` consists of two `|` characters, each having an equal number of `|` characters to its left and right.\n\n**Constraints**\nInput format:\nA single string s.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, count asterisks outside vertical bars, and print",
    "test_cases": [
      {
        "input": [
          "l|*e*et|c**o|de|"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_234",
    "title": "Largest Odd Number in String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `num` representing a large integer as input. Print the largest odd integer (as a string) that is a non-empty substring of `num`. If no odd integer exists, print an empty line.\n\n**Constraints**\nInput format:\nA single string `num` (digits only).\n\nOutput format:\nA string or empty line.",
    "starter_code": "# Get string num, find largest odd substring, and print",
    "test_cases": [
      {
        "input": [
          "52"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_235",
    "title": "Check if Array Is Sorted and Rotated (With Duplicates)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Print 'True' if the list can be sorted in non-decreasing order by rotating it (possibly zero times), otherwise 'False'. The list might contain duplicates.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get list, check if sorted and rotated (with duplicates), and print",
    "test_cases": [
      {
        "input": [
          "3 4 5 1 2"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_236",
    "title": "Divisible and Non-divisible Sum Difference",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers `n` and `m` as input. Calculate the difference between the sum of numbers from 1 to `n` that are not divisible by `m`, and the sum of numbers from 1 to `n` that are divisible by `m`. Print this difference.\n\n**Constraints**\nInput format:\nTwo positive integers on separate lines (n, m).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get n and m, calculate divisible/non-divisible sum difference, and print",
    "test_cases": [
      {
        "input": [
          "10",
          "3"
        ],
        "expected_output": "19"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_237",
    "title": "Left and Right Sum Differences",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. For each element `nums[i]`, calculate `leftSum[i]` as the sum of all elements to its left, and `rightSum[i]` as the sum of all elements to its right. Then, print `abs(leftSum[i] - rightSum[i])` for each `i`, space-separated. Edge cases: `leftSum[0] = 0`, `rightSum[last] = 0`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, calculate left and right sum differences, and print",
    "test_cases": [
      {
        "input": [
          "10 4 8 3"
        ],
        "expected_output": "15 1 11 22"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_238",
    "title": "Count Pairs Whose Sum is Less Than Target",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and a target sum as input. Count and print the number of pairs `(i, j)` where `0 <= i < j < n` and `nums[i] + nums[j] < target`.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: target sum (integer).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and target, count pairs with sum less than target, and print",
    "test_cases": [
      {
        "input": [
          "-1 1 2 3 1",
          "2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_239",
    "title": "Kth Distinct String in an Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings (space-separated) and an integer `k` as input. Print the `k`th distinct string in the list. A distinct string is one that appears exactly once. If there are fewer than `k` distinct strings, print an empty line.\n\n**Constraints**\nInput format:\nFirst line: space-separated strings. Second line: integer k (1-based).\n\nOutput format:\nA single string or empty line.",
    "starter_code": "# Get list of strings and k, find kth distinct string, and print",
    "test_cases": [
      {
        "input": [
          "d a b c c c a",
          "2"
        ],
        "expected_output": "b"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_240",
    "title": "Max Count of Positive Integer and Negative Integer",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers (space-separated) as input. Print the maximum of the count of positive integers and the count of negative integers in the list. Zero is neither positive nor negative.\n\n**Constraints**\nInput format:\nA single line of space-separated sorted integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, count max of positive/negative integers, and print",
    "test_cases": [
      {
        "input": [
          "-2 -1 -1 0 1 2 3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_241",
    "title": "Sum of Unique Elements",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Print the sum of all unique elements in the list (elements that appear exactly once).\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, sum unique elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_242",
    "title": "Count the Number of Consistent Strings",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `allowed` and a list of strings `words` (space-separated) as input. A string is *consistent* if all characters in the string appear in the string `allowed`. Print the number of consistent strings in `words`.\n\n**Constraints**\nInput format:\nFirst line: string allowed. Second line: space-separated strings (words).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get allowed string and words list, count consistent strings, and print",
    "test_cases": [
      {
        "input": [
          "ab",
          "ad bd aaab"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_243",
    "title": "Calculate Time Required to Buy Tickets",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `tickets` (space-separated, `tickets[i]` is the number of tickets the `i`th person has) and an integer `k` (0-indexed person) as input. There are `n` people in a queue. Each person takes 1 ticket at a time. After taking a ticket, they go to the end of the queue. If they run out of tickets, they leave. Print the total time taken for the person at index `k` to buy all their tickets.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (tickets). Second line: integer k.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get tickets and k, calculate time, and print",
    "test_cases": [
      {
        "input": [
          "2 3 2",
          "0"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_244",
    "title": "Remove All Adjacent Duplicates In String (Simple)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` as input. Perform duplicate removals on `s` until no more duplicate removals can be made. A duplicate removal consists of choosing two adjacent and equal characters and removing them. Print the final string.\n\n**Constraints**\nInput format:\nA single string s.\n\nOutput format:\nA single string.",
    "starter_code": "# Get string, remove adjacent duplicates, and print",
    "test_cases": [
      {
        "input": [
          "abbaca"
        ],
        "expected_output": "ca"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_245",
    "title": "Check if String is a Permutation of a Palindrome (Simplified)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` as input. Print 'True' if a permutation of `s` could form a palindrome, otherwise 'False'. Consider only lowercase English letters. Other characters should be ignored.\n\n**Constraints**\nInput format:\nA single string s.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get string, check if it's a permutation of a palindrome, and print",
    "test_cases": [
      {
        "input": [
          "aabb"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_246",
    "title": "Find All Numbers Disappeared in an Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) as input. Each `nums[i]` is in the range `[1, n]` where `n` is the length of `nums`. Some elements appear twice, and others appear once. Find and print all the integers from 1 to `n` that do not appear in `nums`, in ascending order, space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, find disappeared numbers, and print",
    "test_cases": [
      {
        "input": [
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_247",
    "title": "Intersection of Two Arrays II (Counts)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers (space-separated) as input. Print their intersection, where each element appears as many times as it shows in both lists. The result can be in any order, space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get two lists, find their intersection with counts, and print",
    "test_cases": [
      {
        "input": [
          "1 2 2 1",
          "2 2"
        ],
        "expected_output": "2 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_248",
    "title": "Add Strings (Large Numbers)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two non-negative integers represented as strings (e.g., '123', '45') as input. Calculate their sum and print it as a string. Do not use any built-in BigInteger library or convert the inputs directly to integers.\n\n**Constraints**\nInput format:\nTwo strings (digits only) on separate lines.\n\nOutput format:\nA single string.",
    "starter_code": "# Get two number strings, add them as strings, and print",
    "test_cases": [
      {
        "input": [
          "123",
          "45"
        ],
        "expected_output": "168"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_249",
    "title": "Check if Number is Sum of Two Powers of Two",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer N as input. Print 'True' if N can be expressed as the sum of exactly two distinct powers of two, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single positive integer N.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get N, check if sum of two distinct powers of two, and print",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_250",
    "title": "Count Elements in List that are Greater Than All Preceding Elements",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Count and print the number of elements `nums[i]` such that `nums[i]` is strictly greater than all elements `nums[j]` where `j < i`. The first element is always counted.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, count elements greater than all preceding, and print",
    "test_cases": [
      {
        "input": [
          "10 20 15 25 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_251",
    "title": "Implement a Queue using Two Stacks",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a queue's `enqueue` and `dequeue` operations using two stacks. Your program should take a sequence of operations ('E X' for enqueue X, 'D' for dequeue) as input and print the result of each dequeue operation or 'Queue Empty' if dequeue is called on an empty queue.\n\n**Constraints**\nInput format:\nMultiple lines, each with an operation. X is an integer.\n\nOutput format:\nResult of dequeue operations on separate lines.",
    "starter_code": "stack1 = []\nstack2 = []\n\ndef enqueue(x):\n    # Implement enqueue\n    pass\n\ndef dequeue():\n    # Implement dequeue\n    pass\n\n# Process operations",
    "test_cases": [
      {
        "input": [
          "E 10",
          "E 20",
          "D",
          "E 30",
          "D",
          "D"
        ],
        "expected_output": "10\n20\n30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_252",
    "title": "Find Kth Smallest Element in an Unsorted List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) and an integer K as input. Find and print the Kth smallest element in the list. Assume K is valid (1 <= K <= list length).\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer K.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and K, find Kth smallest, and print",
    "test_cases": [
      {
        "input": [
          "3 2 1 5 6 4",
          "2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_253",
    "title": "Validate Sudoku (Partial Check)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 9x9 Sudoku board (rows separated by semicolons, elements by commas; 0 for empty cells) as input. Print 'True' if the board is valid so far (no duplicate numbers in any row or column), otherwise 'False'. You don't need to check 3x3 sub-grids.\n\n**Constraints**\nInput format:\nA single string representing the 9x9 board.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get sudoku board string, validate rows and columns, and print",
    "test_cases": [
      {
        "input": [
          "5,3,0,0,7,0,0,0,0;6,0,0,1,9,5,0,0,0;0,9,8,0,0,0,0,6,0;8,0,0,0,6,0,0,0,3;4,0,0,8,0,3,0,0,1;7,0,0,0,2,0,0,0,6;0,6,0,0,0,0,2,8,0;0,0,0,4,1,9,0,0,5;0,0,0,0,8,0,0,7,9"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_254",
    "title": "Longest Common Subsequence Length",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input. Find and print the length of their longest common subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get two strings, find longest common subsequence length, and print",
    "test_cases": [
      {
        "input": [
          "AGGTAB",
          "GXTXAYB"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_255",
    "title": "Minimum Number of Coins for Change",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a target amount and a list of coin denominations (space-separated) as input. Print the minimum number of coins needed to make up that amount. If the amount cannot be made up by any combination of the coins, print -1. Assume an infinite supply of each coin.\n\n**Constraints**\nInput format:\nFirst line: integer amount. Second line: space-separated integers (coin denominations).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get amount and coin denominations, find min coins, and print",
    "test_cases": [
      {
        "input": [
          "11",
          "1 2 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_256",
    "title": "Word Break Problem (Can Segment)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` and a dictionary of words (space-separated) as input. Print 'True' if `s` can be segmented into a space-separated sequence of one or more dictionary words, otherwise 'False'.\n\n**Constraints**\nInput format:\nFirst line: string `s`. Second line: space-separated words (dictionary).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get string and dictionary, check word break, and print",
    "test_cases": [
      {
        "input": [
          "leetcode",
          "leet code"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_257",
    "title": "Maximum Depth of Binary Tree (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually finds the maximum depth of a binary tree. Take a simplified tree representation (e.g., space-separated integers representing nodes in level-order, 'null' for missing child) as input. Print the maximum depth. Assume a valid tree representation.\n\n**Constraints**\nInput format:\nA single string representing the tree.\n\nOutput format:\nA single integer.",
    "starter_code": "# Represent tree, find max depth, and print",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_258",
    "title": "Rotate Matrix by 90 Degrees Clockwise",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a square matrix (N x N, rows separated by semicolons, elements by commas) as input. Rotate the matrix by 90 degrees clockwise and print the rotated matrix. Print rows separated by newlines, elements by spaces.\n\n**Constraints**\nInput format:\nA single string representing the matrix.\n\nOutput format:\nRotated matrix.",
    "starter_code": "# Get matrix string, rotate 90 degrees clockwise, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;4,5,6;7,8,9"
        ],
        "expected_output": "7 4 1\n8 5 2\n9 6 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_259",
    "title": "Implement Simple Hash Map (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a conceptual hash map with `put(key, value)` and `get(key)` operations. Keys and values are integers. Your program should take a sequence of operations ('P K V' for put, 'G K' for get) as input. For each 'get' operation, print the value or 'None' if key not found.\n\n**Constraints**\nInput format:\nMultiple lines, each with an operation.\n\nOutput format:\nResult of get operations on separate lines.",
    "starter_code": "my_map = {}\n\ndef put(key, value):\n    # Implement put\n    pass\n\ndef get(key):\n    # Implement get\n    pass\n\n# Process operations",
    "test_cases": [
      {
        "input": [
          "P 1 10",
          "P 2 20",
          "G 1",
          "G 3"
        ],
        "expected_output": "10\nNone"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_260",
    "title": "Merge K Sorted Lists (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually merges K sorted lists into one sorted list. Take K lines of space-separated sorted integers as input. Print the merged sorted list space-separated.\n\n**Constraints**\nInput format:\nMultiple lines, each a space-separated sorted list.\n\nOutput format:\nSpace-separated merged sorted integers.",
    "starter_code": "# Get K sorted lists, merge them, and print",
    "test_cases": [
      {
        "input": [
          "1 4 5",
          "1 3 4",
          "2 6"
        ],
        "expected_output": "1 1 2 3 4 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_261",
    "title": "Longest Increasing Subsequence Length",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find and print the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find longest increasing subsequence length, and print",
    "test_cases": [
      {
        "input": [
          "10 9 2 5 3 7 101 18"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_262",
    "title": "Unique Paths in a Grid",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nA robot is located at the top-left corner of an M x N grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Write a program that takes M and N (integers) as input and prints the number of unique paths the robot can take.\n\n**Constraints**\nInput format:\nTwo integers on separate lines (M, N, 1 <= M, N <= 10).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get M and N, calculate unique paths, and print",
    "test_cases": [
      {
        "input": [
          "3",
          "7"
        ],
        "expected_output": "28"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_263",
    "title": "Coin Change Ways (Number of Combinations)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an amount and a list of coin denominations (space-separated) as input. Print the number of combinations that make up that amount. Assume an infinite supply of each coin.\n\n**Constraints**\nInput format:\nFirst line: integer amount. Second line: space-separated integers (coin denominations).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get amount and coin denominations, find number of combinations, and print",
    "test_cases": [
      {
        "input": [
          "5",
          "1 2 5"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_264",
    "title": "Generate Parentheses Combinations",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer N as input, representing the number of pairs of parentheses. Print all combinations of well-formed parentheses. Print each combination on a new line, in lexicographical order.\n\n**Constraints**\nInput format:\nA single integer N (1 <= N <= 4).\n\nOutput format:\nEach well-formed parenthesis combination on a new line.",
    "starter_code": "# Get N, generate well-formed parentheses combinations, and print",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "(()) \n()()"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_265",
    "title": "Median of Two Sorted Arrays",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two sorted lists of integers (space-separated) as input. Find and print the median of the two sorted lists combined. The overall run time complexity should be O(log(m+n)).\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated sorted integers.\n\nOutput format:\nA single float.",
    "starter_code": "# Get two sorted lists, find median, and print",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4"
        ],
        "expected_output": "2.5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_266",
    "title": "Container With Most Water",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of non-negative integers `height` (space-separated) as input, where each `height[i]` represents a point `(i, height[i])`. Find two lines that, together with the x-axis, form a container that contains the most water. Print the maximum amount of water a container can store.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get heights, find max water, and print",
    "test_cases": [
      {
        "input": [
          "1 8 6 2 5 4 8 3 7"
        ],
        "expected_output": "49"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_267",
    "title": "Integer to Roman",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and converts it to its Roman numeral representation. Print the Roman numeral.\n\n**Constraints**\nInput format:\nA single integer (1 to 3999).\n\nOutput format:\nA string.",
    "starter_code": "# Get integer, convert to Roman, and print",
    "test_cases": [
      {
        "input": [
          "1994"
        ],
        "expected_output": "MCMXCIV"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_268",
    "title": "Longest Common Prefix",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings (space-separated) as input. Find and print the longest common prefix string amongst them. If there is no common prefix, print an empty string.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nA single string.",
    "starter_code": "# Get list of strings, find longest common prefix, and print",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_269",
    "title": "3Sum (Find all unique triplets that sum to zero)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (space-separated) as input. Find all unique triplets `(a, b, c)` in the list such that `a + b + c = 0`. Print each triplet on a new line, with elements sorted in ascending order and triplets themselves sorted lexicographically.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nEach triplet on a new line.",
    "starter_code": "# Get list, find 3-sum triplets, and print",
    "test_cases": [
      {
        "input": [
          "-1 0 1 2 -1 -4"
        ],
        "expected_output": "-1 -1 2\n-1 0 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_270",
    "title": "Remove Nth Node From End of List (Actual Linked List, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually removes the Nth node from the *end* of a singly linked list. Take a list of integers (space-separated) representing the linked list and an integer N as input. Print the modified list space-separated. Assume N is valid and the list is not empty.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer N (1-based from end).\n\nOutput format:\nSpace-separated integers representing the modified list.",
    "starter_code": "# Represent linked list, remove Nth from end, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "1 2 3 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_271",
    "title": "Search in Rotated Sorted Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a rotated sorted list of distinct integers (space-separated) and a target integer as input. Find and print the index of the target in the list. If the target is not found, print -1.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: target integer.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get rotated sorted list and target, search, and print index",
    "test_cases": [
      {
        "input": [
          "4 5 6 7 0 1 2",
          "0"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_272",
    "title": "Find First and Last Position of Element in Sorted Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers (space-separated) and a target integer as input. Find and print the starting and ending position of a given target value in the array. If the target is not found in the array, print '-1 -1'.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: target integer.\n\nOutput format:\nTwo space-separated integers.",
    "starter_code": "# Get sorted list and target, find first and last positions, and print",
    "test_cases": [
      {
        "input": [
          "5 7 7 8 8 10",
          "8"
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_273",
    "title": "Jump Game (Can Reach End)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of non-negative integers `nums` (space-separated) as input, where `nums[i]` represents the maximum jump length from index `i`. Print 'True' if you can reach the last index starting from index 0, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get jump lengths, check if end reachable, and print",
    "test_cases": [
      {
        "input": [
          "2 3 1 1 4"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_274",
    "title": "Minimum Path Sum in Grid",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an M x N grid (rows separated by semicolons, elements by commas) containing non-negative integers as input. Find a path from the top-left to the bottom-right which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Print the minimum sum.\n\n**Constraints**\nInput format:\nA single string representing the grid.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get grid string, find minimum path sum, and print",
    "test_cases": [
      {
        "input": [
          "1,3,1;1,5,1;4,2,1"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_275",
    "title": "Decode Ways (Number of Decodings)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a digit string `s` as input. A message containing letters from A-Z is being encoded to numbers using the following mapping: 'A' -> 1, 'B' -> 2, ..., 'Z' -> 26. Print the total number of ways to decode `s`. If `s` is invalid (e.g., starts with '0'), print 0.\n\n**Constraints**\nInput format:\nA single string of digits.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get digit string, count decode ways, and print",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_276",
    "title": "Validate Binary Search Tree (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually validates if a given binary tree is a valid Binary Search Tree (BST). Take a simplified tree representation (e.g., space-separated integers representing nodes in level-order, 'null' for missing child) as input. Print 'True' if it's a valid BST, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single string representing the tree.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Represent tree, validate BST, and print",
    "test_cases": [
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_277",
    "title": "Binary Tree Level Order Traversal (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually performs a level order traversal of a binary tree. Take a simplified tree representation (e.g., space-separated integers representing nodes in level-order, 'null' for missing child) as input. Print the node values level by level, with values on the same level space-separated, and each level on a new line.\n\n**Constraints**\nInput format:\nA single string representing the tree.\n\nOutput format:\nLevel-order traversal, levels on new lines.",
    "starter_code": "# Represent tree, perform level order traversal, and print",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3\n9 20\n15 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_278",
    "title": "Flatten Binary Tree to Linked List (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually flattens a binary tree into a \"linked list\" in-place. The \"linked list\" should use the `right` pointer and the `left` pointer should always be `null`. The \"linked list\" should be in pre-order traversal order. Take a simplified tree representation as input and print the flattened list.\n\n**Constraints**\nInput format:\nA single string representing the tree.\n\nOutput format:\nSpace-separated integers representing the flattened list.",
    "starter_code": "# Represent tree, flatten in-place, and print",
    "test_cases": [
      {
        "input": [
          "1 2 5 3 4 null 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_279",
    "title": "Sum Root to Leaf Numbers (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually calculates the total sum of all root-to-leaf numbers in a binary tree. Each root-to-leaf path represents a number (e.g., 1->2->3 is 123). Take a simplified tree representation as input and print the total sum.\n\n**Constraints**\nInput format:\nA single string representing the tree.\n\nOutput format:\nA single integer.",
    "starter_code": "# Represent tree, calculate sum of root-to-leaf numbers, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "25"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_280",
    "title": "Word Ladder Length (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually finds the length of the shortest transformation sequence from a `beginWord` to an `endWord`, such that: 1) Only one letter can be changed at a time. 2) Each transformed word must exist in a `wordList`. Take `beginWord`, `endWord`, and `wordList` (space-separated) as input. Print the length of the shortest sequence, or 0 if no such sequence exists.\n\n**Constraints**\nInput format:\nFirst line: beginWord. Second line: endWord. Third line: space-separated wordList.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get words and list, find word ladder length, and print",
    "test_cases": [
      {
        "input": [
          "hit",
          "cog",
          "hot dot dog lot log cog"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_281",
    "title": "Longest Consecutive Sequence Length",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an unsorted list of integers (space-separated) as input. Find and print the length of the longest consecutive elements sequence. Your algorithm should run in O(n) time.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list, find longest consecutive sequence length, and print",
    "test_cases": [
      {
        "input": [
          "100 4 200 1 3 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_282",
    "title": "Product of Array Except Self",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) as input. Return a new list `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. Print the `answer` list space-separated. You must write an algorithm that runs in O(n) time without using the division operation.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, calculate product except self, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "24 12 8 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_283",
    "title": "Missing Ranges in Sorted List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of unique integers (space-separated), a lower bound, and an upper bound as input. Find and print the shortest list of ranges that cover all the missing numbers in the range `[lower, upper]`. Print each range on a new line; format single numbers as \"X\" and ranges as \"X->Y\".\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: lower bound. Third line: upper bound.\n\nOutput format:\nEach range on a new line.",
    "starter_code": "# Get list, lower, upper, find missing ranges, and print",
    "test_cases": [
      {
        "input": [
          "0 1 3 50 75",
          "0",
          "99"
        ],
        "expected_output": "2\n4->49\n51->74\n76->99"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_284",
    "title": "Meeting Rooms (Can Attend All)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of meeting time intervals (start and end times, e.g., '[[0,30],[5,10],[15,20]]' where inner lists are 'start,end', separated by semicolons) as input. Print 'True' if a person could attend all meetings, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single string representing the list of intervals.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get intervals string, check if person can attend all meetings, and print",
    "test_cases": [
      {
        "input": [
          "0,30;5,10;15,20"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_285",
    "title": "Find All Duplicates in an Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated, where `1 <= nums[i] <= n` and each integer appears once or twice) as input. Print all the integers that appear twice in this list. Print them space-separated and in ascending order.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get list, find all duplicates, and print",
    "test_cases": [
      {
        "input": [
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_286",
    "title": "Subarray Sum Equals K",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) and an integer `k` as input. Print the total number of continuous subarrays whose sum equals to `k`.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer k.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get list and k, count subarrays with sum k, and print",
    "test_cases": [
      {
        "input": [
          "1 1 1",
          "2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_287",
    "title": "Valid Parentheses, Brackets, and Braces",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` containing just the characters '(', ')', '{', '}', '[' and ']' as input. Print 'True' if the input string is valid, 'False' otherwise. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get string, validate parentheses/brackets/braces, and print",
    "test_cases": [
      {
        "input": [
          "()[]{}"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_288",
    "title": "Implement Queue using Stacks (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a conceptual queue using two stacks. Your program should support `push` (enqueue), `pop` (dequeue), `peek` (front element), and `empty` operations. Take a sequence of operations as input ('push X', 'pop', 'peek', 'empty') and print results accordingly. For 'pop'/'peek' on empty, print 'Error'. For 'empty', print 'True' or 'False'.\n\n**Constraints**\nInput format:\nMultiple lines, each with an operation. X is an integer.\n\nOutput format:\nResults on separate lines.",
    "starter_code": "# Use two stacks to implement queue conceptually",
    "test_cases": [
      {
        "input": [
          "push 1",
          "push 2",
          "peek",
          "pop",
          "empty"
        ],
        "expected_output": "1\n1\nFalse"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_289",
    "title": "Implement Stack using Queues (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a conceptual stack using two queues. Your program should support `push`, `pop`, `top`, and `empty` operations. Take a sequence of operations as input ('push X', 'pop', 'top', 'empty') and print results accordingly. For 'pop'/'top' on empty, print 'Error'. For 'empty', print 'True' or 'False'.\n\n**Constraints**\nInput format:\nMultiple lines, each with an operation. X is an integer.\n\nOutput format:\nResults on separate lines.",
    "starter_code": "# Use two queues to implement stack conceptually",
    "test_cases": [
      {
        "input": [
          "push 1",
          "push 2",
          "top",
          "pop",
          "empty"
        ],
        "expected_output": "2\n2\nFalse"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_290",
    "title": "Min Stack (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a conceptual `MinStack` which supports pushing elements, popping elements, getting the top element, and retrieving the minimum element in constant time. Your program should take a sequence of operations as input ('push X', 'pop', 'top', 'getMin') and print results accordingly. For 'pop'/'top'/'getMin' on empty, print 'Error'.\n\n**Constraints**\nInput format:\nMultiple lines, each with an operation. X is an integer.\n\nOutput format:\nResults on separate lines.",
    "starter_code": "# Implement MinStack conceptually",
    "test_cases": [
      {
        "input": [
          "push -2",
          "push 0",
          "push -3",
          "getMin",
          "pop",
          "top",
          "getMin"
        ],
        "expected_output": "-3\n0\n-2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_291",
    "title": "Isomorphic Strings",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings `s` and `t` as input. Print 'True' if they are isomorphic, otherwise 'False'. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of the characters. No two characters may map to the same character, but a character may map to itself.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get two strings, check if isomorphic, and print",
    "test_cases": [
      {
        "input": [
          "egg",
          "add"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_292",
    "title": "First Unique Character in a String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` as input. Find and print the index of the first non-repeating character in it. If it does not exist, print -1.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, find index of first unique character, and print",
    "test_cases": [
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_293",
    "title": "Find the Difference Between Two Strings",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings `s` and `t` as input. String `t` is generated by random shuffling string `s` and then add one more letter at a random position. Find and print the letter that was added to `t`.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA single character.",
    "starter_code": "# Get two strings, find the difference, and print",
    "test_cases": [
      {
        "input": [
          "abcd",
          "abcde"
        ],
        "expected_output": "e"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_294",
    "title": "Assign Cookies",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers: `g` (greed factors, space-separated) and `s` (cookie sizes, space-separated) as input. Print the maximum number of content children you can satisfy. A child `i` has a greed factor `g[i]`, meaning they want a cookie with size at least `g[i]`. A cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, you can assign the cookie `j` to child `i`. You want to maximize the number of your content children and give each child at most one cookie.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (greed factors). Second line: space-separated integers (cookie sizes).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get greed factors and cookie sizes, assign cookies, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "1 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_295",
    "title": "Teemo Attacking",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `timeSeries` (space-separated) and an integer `duration` as input. `timeSeries` represents the times at which Teemo attacks Ashe. When Teemo attacks Ashe at time `t`, Ashe suffers poison for `duration` seconds. Print the total duration that Ashe suffers poison.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (timeSeries). Second line: integer duration.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get time series and duration, calculate total poison duration, and print",
    "test_cases": [
      {
        "input": [
          "1 4",
          "2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_296",
    "title": "Relative Ranks",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers `score` (space-separated) as input. `score` represents the scores of N athletes. Print their relative ranks. The athletes with the 1st, 2nd, and 3rd highest scores should be awarded \"Gold Medal\", \"Silver Medal\", and \"Bronze Medal\" respectively. For the rest of the athletes, print their rank (i.e., their 0-based index + 1 in sorted descending order).\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated strings representing ranks.",
    "starter_code": "# Get scores, calculate relative ranks, and print",
    "test_cases": [
      {
        "input": [
          "5 4 3 2 1"
        ],
        "expected_output": "Gold Medal Silver Medal Bronze Medal 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_297",
    "title": "Can Place Flowers",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `flowerbed` (space-separated, 0 for empty, 1 for planted) and an integer `n` as input. `flowerbed` represents a long flowerbed where some of the plots are planted, and some are not. Flowers cannot be planted in adjacent plots. Print 'True' if `n` new flowers can be planted in the `flowerbed` without violating the no-adjacent-flowers rule and assuming you can only plant in empty plots, otherwise 'False'.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (flowerbed). Second line: integer n.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get flowerbed and n, check if flowers can be planted, and print",
    "test_cases": [
      {
        "input": [
          "1 0 0 0 1",
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_298",
    "title": "Nim Game",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `n` as input. You are playing the Nim game with a friend. There is a heap of `n` stones. You and your friend take turns to remove 1 to 3 stones. The one who removes the last stone is the winner. Print 'True' if you can win the game given that you play first, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single integer n.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get n, check if first player can win Nim game, and print",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_299",
    "title": "Maximize Sum Of Array After K Negations",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) and an integer `k` as input. You are allowed to choose an index `i` and replace `nums[i]` with `-nums[i]` exactly `k` times. Print the largest possible sum of the array after modifying it in this way.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer k.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get nums and k, maximize sum after k negations, and print",
    "test_cases": [
      {
        "input": [
          "4 2 3",
          "1"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_300",
    "title": "Matrix Diagonal Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a square matrix (rows separated by semicolons, elements by commas) as input. Print the sum of the matrix diagonals. Specifically, you should add the elements on the primary diagonal and the elements on the secondary diagonal. Make sure to only add elements once, even if they are on both diagonals (e.g., center element of odd-sized matrix).\n\n**Constraints**\nInput format:\nA single string representing the matrix.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get matrix string, calculate diagonal sum, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;4,5,6;7,8,9"
        ],
        "expected_output": "25"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_301",
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `n` as input. Print the result of subtracting the sum of its digits from the product of its digits.\n\n**Constraints**\nInput format:\nA single integer n.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get n, calculate product and sum of digits, subtract, and print",
    "test_cases": [
      {
        "input": [
          "234"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_302",
    "title": "Number of Steps to Reduce a Number to Zero",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `num` as input. Print the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2. If the current number is odd, you have to subtract 1 from it.\n\n**Constraints**\nInput format:\nA single non-negative integer num.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get num, count steps to zero, and print",
    "test_cases": [
      {
        "input": [
          "14"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_303",
    "title": "Richest Customer Wealth",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of customer accounts (rows separated by semicolons, inner list elements by commas, e.g., '1,2,3;3,2,1') as input. Each inner list `accounts[i]` is the wealth of the `i`-th customer. Print the wealth of the richest customer.\n\n**Constraints**\nInput format:\nA single string representing accounts.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get accounts string, find richest customer wealth, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;3,2,1"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_304",
    "title": "Shuffle the Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) and an integer `n` as input. `nums` consists of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`. Print the array shuffled as `[x1,y1,x2,y2,...,xn,yn]` space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (nums). Second line: integer n.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get nums and n, shuffle array, and print",
    "test_cases": [
      {
        "input": [
          "2 5 1 3 4 7",
          "3"
        ],
        "expected_output": "2 3 5 4 1 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_305",
    "title": "Check If N and Its Double Exist",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `arr` (space-separated) as input. Print 'True' if there exist two distinct indices `i` and `j` in the array such that `arr[i] == 2 * arr[j]`, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get arr, check if N and its double exist, and print",
    "test_cases": [
      {
        "input": [
          "10 2 5 3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_306",
    "title": "Count Good Triplets",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `arr` (space-separated) and three integers `a`, `b`, `c` as input. A triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are met: `0 <= i < j < k < arr.length`, `|arr[i] - arr[j]| <= a`, `|arr[j] - arr[k]| <= b`, and `|arr[i] - arr[k]| <= c`. Print the number of good triplets.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (arr). Second line: integer a. Third line: integer b. Fourth line: integer c.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get arr, a, b, c, count good triplets, and print",
    "test_cases": [
      {
        "input": [
          "3 0 1 1 9 7",
          "7",
          "2",
          "3"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_307",
    "title": "Destination City",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of paths (e.g., 'London,New York;New York,Lima;Lima,Sao Paulo' where each path is 'CityA,CityB', separated by semicolons) as input. Each path `paths[i] = [cityA_i, cityB_i]` means there exists a direct path from `cityA_i` to `cityB_i`. Print the destination city, that is, the city without any path outgoing from it.\n\n**Constraints**\nInput format:\nA single string representing paths.\n\nOutput format:\nA single string.",
    "starter_code": "# Get paths string, find destination city, and print",
    "test_cases": [
      {
        "input": [
          "London,New York;New York,Lima;Lima,Sao Paulo"
        ],
        "expected_output": "Sao Paulo"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_308",
    "title": "Kids With the Greatest Number Of Candies",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `candies` (space-separated) and an integer `extraCandies` as input. `candies[i]` represents the number of candies the `i`-th kid has. For each kid, print 'True' if there is a way to distribute `extraCandies` among the kids such that this kid can have the greatest number of candies among all the kids, or 'False' otherwise. Print results space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (candies). Second line: integer extraCandies.\n\nOutput format:\nSpace-separated boolean strings.",
    "starter_code": "# Get candies and extraCandies, determine who can have most candies, and print",
    "test_cases": [
      {
        "input": [
          "2 3 5 1 3",
          "3"
        ],
        "expected_output": "True True True False True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_309",
    "title": "Sum of Unique Elements",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) as input. Print the sum of all unique elements in `nums`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get nums, calculate sum of unique elements, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_310",
    "title": "Maximum Number of Words You Can Type",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `text` and a string `brokenLetters` (space-separated characters) as input. `brokenLetters` is a list of characters that cannot be typed. A word in `text` is typable if `text` does not contain any character in `brokenLetters`. Print the number of words in `text` that can be typed.\n\n**Constraints**\nInput format:\nFirst line: string text. Second line: space-separated characters (brokenLetters).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get text and broken letters, count typable words, and print",
    "test_cases": [
      {
        "input": [
          "hello world",
          "ad"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_311",
    "title": "Smallest Index With Equal Value",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) as input. Print the smallest index `i` such that `i mod 10 == nums[i]`. If no such index exists, print -1.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get nums, find smallest index with equal value, and print",
    "test_cases": [
      {
        "input": [
          "0 1 2"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_312",
    "title": "Find First Palindromic String in the Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings `words` (space-separated) as input. Print the first string in `words` that is palindromic. If there is no such string, print an empty string.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nA single string.",
    "starter_code": "# Get words, find first palindromic string, and print",
    "test_cases": [
      {
        "input": [
          "abc car racecar"
        ],
        "expected_output": "racecar"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_313",
    "title": "Maximum Number of Balloons",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `text` as input. Print the maximum number of instances of the word \"balloon\" that can be formed by using the letters from `text`. Each character in `text` can be used at most once.\n\n**Constraints**\nInput format:\nA single string text.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get text, count max balloons, and print",
    "test_cases": [
      {
        "input": [
          "nlaebolko"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_314",
    "title": "Number of Laser Beams in a Bank",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of binary strings `bank` (space-separated) as input, representing a bank. Each string `bank[i]` represents a row, and '1' means a security device is present, '0' means not. A laser beam is established between two security devices if they are in different rows, and there are no security devices in any row between them. Print the total number of laser beams.\n\n**Constraints**\nInput format:\nA single line of space-separated binary strings.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get bank rows, count laser beams, and print",
    "test_cases": [
      {
        "input": [
          "011001 000000 010100"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_315",
    "title": "Check if All A's Appear Before All B's",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` consisting of only 'a's and 'b's as input. Print 'True' if every 'a' appears before every 'b' in the string, otherwise 'False'.\n\n**Constraints**\nInput format:\nA single string s.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get string, check 'a' before 'b' condition, and print",
    "test_cases": [
      {
        "input": [
          "aaabbb"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_316",
    "title": "Check if Word Equals Summation of Two Words",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three strings `firstWord`, `secondWord`, and `targetWord` as input. Each string consists of lowercase English letters 'a' through 'j'. The value of a letter is its 0-indexed position in the alphabet (i.e., 'a' -> 0, 'b' -> 1, ..., 'j' -> 9). The numerical value of a word is formed by concatenating the numerical values of its letters and then converting into an integer. Print 'True' if the numerical value of `firstWord` plus the numerical value of `secondWord` equals the numerical value of `targetWord`, otherwise 'False'.\n\n**Constraints**\nInput format:\nThree strings on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get three words, convert to numerical values, check sum, and print",
    "test_cases": [
      {
        "input": [
          "acb",
          "cba",
          "cdb"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_317",
    "title": "Find Target Indices After Sorting Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) and an integer `target` as input. Print a list of the indices where `target` appears in `nums` *after* `nums` has been sorted in non-decreasing order. Print indices space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer target.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get nums and target, find target indices after sorting, and print",
    "test_cases": [
      {
        "input": [
          "1 2 5 2 3",
          "2"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_318",
    "title": "Count Integers With Even Digit Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `num` as input. Print the number of positive integers less than or equal to `num` whose digit sums are even.\n\n**Constraints**\nInput format:\nA single positive integer num.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get num, count integers with even digit sum, and print",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_319",
    "title": "Remove Digit From Number to Maximize Result",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `number` (representing a positive integer) and a character `digit` as input. Remove one occurrence of `digit` from `number` such that the resulting number is maximized. Print the resulting string.\n\n**Constraints**\nInput format:\nFirst line: string number. Second line: character digit.\n\nOutput format:\nA single string.",
    "starter_code": "# Get number string and digit, remove digit to maximize result, and print",
    "test_cases": [
      {
        "input": [
          "1231",
          "1"
        ],
        "expected_output": "231"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_320",
    "title": "Find Subsequence of Length K With the Largest Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) and an integer `k` as input. Print a subsequence of `nums` of length `k` that has the largest sum. If there are multiple such subsequences, print the one that has the smallest first element. The elements in the output should maintain their relative order from the original array.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer k.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get nums and k, find subsequence with largest sum, and print",
    "test_cases": [
      {
        "input": [
          "2 1 3 3",
          "2"
        ],
        "expected_output": "3 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_321",
    "title": "Find the Kth Largest Integer in the Array (as String)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings `nums` (space-separated, each representing an integer) and an integer `k` as input. Print the `k`-th largest integer in `nums`. Treat the numbers as integers, not strings for comparison.\n\n**Constraints**\nInput format:\nFirst line: space-separated strings. Second line: integer k.\n\nOutput format:\nA single string.",
    "starter_code": "# Get nums (strings) and k, find kth largest integer, and print",
    "test_cases": [
      {
        "input": [
          "3 6 7 10",
          "4"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_322",
    "title": "Counting Bits",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `n` as input. Print a list (space-separated) where each element `ans[i]` is the number of 1's in the binary representation of `i` for `0 <= i <= n`.\n\n**Constraints**\nInput format:\nA single non-negative integer n.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get n, count bits for each number up to n, and print",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "0 1 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_323",
    "title": "House Robber",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of non-negative integers `nums` (space-separated) representing the amount of money of each house. If two adjacent houses are robbed, the police will automatically contact you. Print the maximum amount of money you can rob tonight without alerting the police.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get nums, calculate max money robber can get, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_324",
    "title": "Climbing Stairs",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `n` as input. You are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb 1 or 2 steps. Print the number of distinct ways to climb to the top.\n\n**Constraints**\nInput format:\nA single integer n (1 <= n <= 45).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get n, calculate distinct ways to climb stairs, and print",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_325",
    "title": "Longest Substring Without Repeating Characters Length",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `s` as input. Find and print the length of the longest substring without repeating characters.\n\n**Constraints**\nInput format:\nA single string s.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, find longest substring without repeating characters length, and print",
    "test_cases": [
      {
        "input": [
          "abcabcbb"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_326",
    "title": "Add Two Numbers (Represented as Linked Lists, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually adds two non-negative numbers represented as linked lists. The digits are stored in reverse order, and each of their nodes contains a single digit. Take two lists of integers (space-separated) as input, representing the numbers in reverse. Print the sum as a space-separated list of digits in reverse order.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Represent linked lists, add numbers, and print sum",
    "test_cases": [
      {
        "input": [
          "2 4 3",
          "5 6 4"
        ],
        "expected_output": "7 0 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_327",
    "title": "Divide Two Integers (Without Multiplication, Division, Modulo)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers `dividend` and `divisor` as input. Divide two integers without using multiplication, division, and mod operator. Print the quotient. If the quotient is greater than `2^31 - 1` or less than `-2^31`, print `2^31 - 1` or `-2^31` respectively.\n\n**Constraints**\nInput format:\nTwo integers on separate lines.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get dividend and divisor, divide without specific ops, and print quotient",
    "test_cases": [
      {
        "input": [
          "10",
          "3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_328",
    "title": "Substring with Concatenation of All Words (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually finds all starting indices of substrings in string `s` that is a concatenation of each word in `words` exactly once and without any intervening characters. Take string `s` and a list of words (space-separated) as input. Print the starting indices space-separated. Assume all words in `words` have the same length.\n\n**Constraints**\nInput format:\nFirst line: string s. Second line: space-separated words.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get string and words, find substring indices, and print",
    "test_cases": [
      {
        "input": [
          "barfoothefoobarman",
          "foo bar"
        ],
        "expected_output": "0 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_329",
    "title": "Next Permutation",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers `nums` (space-separated) as input. Rearrange `nums` into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). Print the modified list space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get nums, find next permutation, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 3 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_330",
    "title": "Longest Valid Parentheses Length",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string containing just '(' and ')' as input. Find and print the length of the longest valid (well-formed) parentheses substring.\n\n**Constraints**\nInput format:\nA single string.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get string, find longest valid parentheses length, and print",
    "test_cases": [
      {
        "input": [
          "(()"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_331",
    "title": "Combination Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers `candidates` (space-separated) and a `target` integer as input. Find all unique combinations in `candidates` where the `candidates` numbers sum to `target`. Each number in `candidates` may only be used once in the combination. Print each combination on a new line, with elements sorted in ascending order and combinations sorted lexicographically.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers (candidates). Second line: integer target.\n\nOutput format:\nEach combination on a new line.",
    "starter_code": "# Get candidates and target, find combination sum, and print",
    "test_cases": [
      {
        "input": [
          "10 1 2 7 6 1 5",
          "8"
        ],
        "expected_output": "1 1 6\n1 2 5\n1 7\n2 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_332",
    "title": "Permutations (Unique)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers `nums` (space-separated) as input. Print all possible unique permutations of `nums`. Print each permutation on a new line, with elements space-separated and permutations sorted lexicographically.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers.\n\nOutput format:\nEach permutation on a new line.",
    "starter_code": "# Get nums, generate unique permutations, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_333",
    "title": "Subsets (All possible subsets)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers `nums` (space-separated) as input. Print all possible subsets (the power set) of `nums`. Print each subset on a new line, with elements space-separated and sorted in ascending order. Subsets themselves should be sorted by length, then lexicographically.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers.\n\nOutput format:\nEach subset on a new line.",
    "starter_code": "# Get nums, generate all subsets, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "\n1\n2\n3\n1 2\n1 3\n2 3\n1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_334",
    "title": "Merge Intervals",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of intervals (e.g., '1,3;2,6;8,10;15,18' where each interval is 'start,end', separated by semicolons) as input. Merge all overlapping intervals and print the merged intervals. Print each merged interval as 'start,end' on a new line, sorted by start time.\n\n**Constraints**\nInput format:\nA single string representing intervals.\n\nOutput format:\nEach merged interval on a new line.",
    "starter_code": "# Get intervals string, merge overlapping intervals, and print",
    "test_cases": [
      {
        "input": [
          "1,3;2,6;8,10;15,18"
        ],
        "expected_output": "1,6\n8,10\n15,18"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_335",
    "title": "Set Matrix Zeroes",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an M x N integer matrix (rows separated by semicolons, elements by commas) as input. If an element `matrix[i][j]` is 0, set its entire row and column to 0's. Print the modified matrix. Print rows separated by newlines, elements by spaces.\n\n**Constraints**\nInput format:\nA single string representing the matrix.\n\nOutput format:\nModified matrix.",
    "starter_code": "# Get matrix string, set zeroes, and print",
    "test_cases": [
      {
        "input": [
          "1,1,1;1,0,1;1,1,1"
        ],
        "expected_output": "1 0 1\n0 0 0\n1 0 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_336",
    "title": "Spiral Matrix Traversal",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an M x N matrix (rows separated by semicolons, elements by commas) as input. Return all elements of the matrix in spiral order. Print the elements space-separated.\n\n**Constraints**\nInput format:\nA single string representing the matrix.\n\nOutput format:\nSpace-separated integers.",
    "starter_code": "# Get matrix string, traverse in spiral order, and print",
    "test_cases": [
      {
        "input": [
          "1,2,3;4,5,6;7,8,9"
        ],
        "expected_output": "1 2 3 6 9 8 7 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_337",
    "title": "Rotate List (Linked List, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually rotates a singly linked list to the right by `k` places. Take a list of integers (space-separated) representing the linked list and an integer `k` as input. Print the rotated list space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer k.\n\nOutput format:\nSpace-separated integers representing the rotated list.",
    "starter_code": "# Represent linked list, rotate right by k, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "4 5 1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_338",
    "title": "Remove Duplicates from Sorted List II (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually removes all nodes that have duplicate numbers from a sorted singly linked list, leaving only distinct numbers from the original list. Take a list of integers (space-separated) representing the sorted linked list as input. Print the modified list space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers representing the modified list.",
    "starter_code": "# Represent linked list, remove duplicates (all occurrences), and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 3 4 4 5"
        ],
        "expected_output": "1 2 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_339",
    "title": "Swap Nodes in Pairs (Linked List, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually swaps every two adjacent nodes of a singly linked list. Take a list of integers (space-separated) representing the linked list as input. Print the modified list space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers representing the modified list.",
    "starter_code": "# Represent linked list, swap nodes in pairs, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "2 1 4 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_340",
    "title": "Reverse Nodes in k-Group (Linked List, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually reverses the nodes of a singly linked list `k` at a time. If the number of nodes is not a multiple of `k`, left-out nodes in the end should remain as it is. Take a list of integers (space-separated) representing the linked list and an integer `k` as input. Print the modified list space-separated.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer k.\n\nOutput format:\nSpace-separated integers representing the modified list.",
    "starter_code": "# Represent linked list, reverse nodes in k-group, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "2 1 4 3 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_341",
    "title": "Linked List Cycle (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually determines if a singly linked list has a cycle in it. Take a list of integers (space-separated) representing the linked list and an integer `pos` as input. If `pos` is -1, there is no cycle. If `pos >= 0`, `pos` denotes the index of the node that the tail's next pointer is connected to. Print 'True' if there is a cycle, otherwise 'False'.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer pos.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Represent linked list, check for cycle, and print",
    "test_cases": [
      {
        "input": [
          "3 2 0 -4",
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_342",
    "title": "Linked List Cycle II (Find Cycle Start, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually finds the node where the cycle begins in a singly linked list. If there is no cycle, print 'None'. Take a list of integers (space-separated) representing the linked list and an integer `pos` as input (same `pos` definition as previous problem). Print the value of the node where the cycle begins.\n\n**Constraints**\nInput format:\nFirst line: space-separated integers. Second line: integer pos.\n\nOutput format:\nA single integer or 'None'.",
    "starter_code": "# Represent linked list, find cycle start, and print",
    "test_cases": [
      {
        "input": [
          "3 2 0 -4",
          "1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_343",
    "title": "Reorder List (Linked List, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually reorders a singly linked list `L0 -> L1 -> ... -> Ln-1 -> Ln` to `L0 -> Ln -> L1 -> Ln-1 -> L2 -> Ln-2 -> ...`. You may not modify the values in the list's nodes, only nodes themselves may be changed. Take a list of integers (space-separated) representing the linked list as input. Print the reordered list space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nSpace-separated integers representing the reordered list.",
    "starter_code": "# Represent linked list, reorder, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "1 4 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_344",
    "title": "Copy List with Random Pointer (Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually copies a linked list where each node has a `next` pointer and a `random` pointer. The `random` pointer could point to any node in the list or `null`. Take a representation of the linked list (e.g., 'value,random_index;value,random_index...' where random_index is 0-based index or -1 for null, separated by semicolons) as input. Print the values of the copied list followed by the values of their random pointers (if not null) space-separated.\n\n**Constraints**\nInput format:\nA single string representing the linked list.\n\nOutput format:\nSpace-separated values and random pointers.",
    "starter_code": "# Represent complex linked list, copy it, and print",
    "test_cases": [
      {
        "input": [
          "7,-1;13,0;11,4;10,2;1,0"
        ],
        "expected_output": "7 13 11 10 1\nNone 7 11 11 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_345",
    "title": "Palindrome Number (Without Converting to String)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `x` as input. Print 'True' if `x` is a palindrome integer, otherwise 'False'. Do this without converting the integer to a string.\n\n**Constraints**\nInput format:\nA single integer x.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Get x, check if palindrome without string conversion, and print",
    "test_cases": [
      {
        "input": [
          "121"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_346",
    "title": "Roman to Integer",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a Roman numeral string as input and converts it to an integer. Print the integer.\n\n**Constraints**\nInput format:\nA single string (valid Roman numeral).\n\nOutput format:\nA single integer.",
    "starter_code": "# Get Roman numeral string, convert to integer, and print",
    "test_cases": [
      {
        "input": [
          "MCMXCIV"
        ],
        "expected_output": "1994"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_347",
    "title": "Longest Common Prefix (More Complex)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings (space-separated) as input. Find and print the longest common prefix string amongst all strings in the array. If there is no common prefix, print an empty string.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nA single string.",
    "starter_code": "# Get list of strings, find longest common prefix, and print",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_348",
    "title": "Merge Two Sorted Lists (Linked List, Conceptual)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that conceptually merges two sorted singly linked lists into a single sorted linked list. The list should be made by splicing together the nodes of the first two lists. Take two lists of integers (space-separated) representing the sorted linked lists as input. Print the merged sorted list space-separated.\n\n**Constraints**\nInput format:\nTwo lines, each with space-separated sorted integers.\n\nOutput format:\nSpace-separated integers representing the merged sorted list.",
    "starter_code": "# Represent two sorted linked lists, merge them, and print",
    "test_cases": [
      {
        "input": [
          "1 2 4",
          "1 3 4"
        ],
        "expected_output": "1 1 2 3 4 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_349",
    "title": "Remove Duplicates from Sorted Array (Return Length)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers `nums` (space-separated) as input. Remove the duplicates in-place such that each unique element appears only once. Print the new length of the array, and then print the first `length` elements of the modified array space-separated.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nFirst line: integer length. Second line: space-separated integers.",
    "starter_code": "# Get sorted list, remove duplicates in-place, and print length and array",
    "test_cases": [
      {
        "input": [
          "1 1 2"
        ],
        "expected_output": "2\n1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "int_q_350",
    "title": "Implement strStr() (Find Substring Index)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings `haystack` and `needle` as input. Print the index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack`.\n\n**Constraints**\nInput format:\nFirst line: string haystack. Second line: string needle.\n\nOutput format:\nA single integer.",
    "starter_code": "# Get haystack and needle, implement strStr, and print index",
    "test_cases": [
      {
        "input": [
          "hello",
          "ll"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "title": "Reverse Words in a String",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a string as input and reverses the order of words in the string. The input string may contain leading or trailing spaces or multiple spaces between two words. The output should be a single space between words and no leading or trailing spaces.\\n\\n**Constraints**\\nInput format:\\nA single string.\\n\\nOutput format:\\nA single string with words reversed.",
    "starter_code": "# Get string, reverse words, and print",
    "test_cases": [
      {
        "input": [
          "the sky is blue"
        ],
        "expected_output": "blue is sky the"
      },
      {
        "input": [
          "  hello world  "
        ],
        "expected_output": "world hello"
      },
      {
        "input": [
          "a good   example"
        ],
        "expected_output": "example good a"
      }
    ],
    "id": "int_q_351",
    "from": "AI"
  },
  {
    "title": "Find Kth Largest Element in an Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a list of integers (space-separated) and an integer K as input. Find and print the Kth largest element in the array. Assume K is always valid, $1 \\le K \\le$ array's length.\\n\\n**Constraints**\\nInput format:\\nFirst line: space-separated integers.\\nSecond line: integer K.\\n\\nOutput format:\\nA single integer.",
    "starter_code": "# Get list and K, find Kth largest element, and print",
    "test_cases": [
      {
        "input": [
          "3 2 1 5 6 4",
          "2"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "3 2 3 1 2 4 5 5 6",
          "4"
        ],
        "expected_output": "4"
      }
    ],
    "id": "int_q_352",
    "from": "AI"
  },
  {
    "title": "Rotate Image (90 Degrees Clockwise)",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes an $N \\times N$ 2D array (matrix) of integers as input. Rotate the image by 90 degrees clockwise in-place. The matrix will be provided as space-separated integers for each row, with rows separated by newlines.\\n\\n**Constraints**\\nInput format:\\nMultiple lines, each line representing a row of space-separated integers.\\n\\nOutput format:\\nThe rotated matrix, each row on a new line with space-separated integers.",
    "starter_code": "# Get matrix, rotate 90 degrees clockwise in-place, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3\\n4 5 6\\n7 8 9"
        ],
        "expected_output": "7 4 1\\n8 5 2\\n9 6 3"
      }
    ],
    "id": "int_q_353",
    "from": "AI"
  },
  {
    "title": "Merge Two Sorted Lists",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes two sorted lists of integers (space-separated) as input. Merge them into a single sorted list and print the result as space-separated integers.\\n\\n**Constraints**\\nInput format:\\nFirst line: space-separated integers for list 1.\\nSecond line: space-separated integers for list 2.\\n\\nOutput format:\\nA single line of space-separated integers.",
    "starter_code": "# Get two sorted lists, merge them, and print",
    "test_cases": [
      {
        "input": [
          "1 2 4",
          "1 3 4"
        ],
        "expected_output": "1 1 2 3 4 4"
      },
      {
        "input": [
          "",
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "id": "int_q_354",
    "from": "AI"
  },
  {
    "title": "Valid Parentheses",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a string `s` containing just the characters '(', ')', '{', '}', '[' and ']' as input. Determine if the input string is valid. An input string is valid if:\\n1. Open brackets must be closed by the same type of brackets.\\n2. Open brackets must be closed in the correct order.\\n3. Every close bracket has a corresponding open bracket of the same type.\\nPrint 'True' if valid, 'False' otherwise.\\n\\n**Constraints**\\nInput format:\\nA single string.\\n\\nOutput format:\\nA boolean (True/False).",
    "starter_code": "# Get string, check for valid parentheses, and print",
    "test_cases": [
      {
        "input": [
          "()"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "()[]{}"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "(]"
        ],
        "expected_output": "False"
      }
    ],
    "id": "int_q_355",
    "from": "AI"
  },
  {
    "title": "Search in Rotated Sorted Array",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a rotated sorted array of distinct integers (space-separated) and a target integer as input. Find the index of the target in the array. If the target is not found, print -1.\\n\\n**Constraints**\\nInput format:\\nFirst line: space-separated integers representing the rotated array.\\nSecond line: integer target.\\n\\nOutput format:\\nA single integer (index or -1).",
    "starter_code": "# Get rotated array and target, find index, and print",
    "test_cases": [
      {
        "input": [
          "4 5 6 7 0 1 2",
          "0"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "4 5 6 7 0 1 2",
          "3"
        ],
        "expected_output": "-1"
      }
    ],
    "id": "int_q_356",
    "from": "AI"
  },
  {
    "title": "Container With Most Water",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a list of non-negative integers `height` (space-separated) as input. Each integer `height[i]` represents a point $(i, height[i])$. $N$ vertical lines are drawn such that the two endpoints of line $i$ are $(i, 0)$ and $(i, height[i])$. Find two lines that together with the x-axis form a container, such that the container contains the most water. Print the maximum amount of water a container can store.\\n\\n**Constraints**\\nInput format:\\nA single line of space-separated integers.\\n\\nOutput format:\\nA single integer.",
    "starter_code": "# Get heights, find container with most water, and print",
    "test_cases": [
      {
        "input": [
          "1 8 6 2 5 4 8 3 7"
        ],
        "expected_output": "49"
      },
      {
        "input": [
          "1 1"
        ],
        "expected_output": "1"
      }
    ],
    "id": "int_q_357",
    "from": "AI"
  },
  {
    "title": "Integer to Roman",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes an integer as input and converts it to a Roman numeral. The input integer is guaranteed to be between 1 and 3999.\\n\\n**Constraints**\\nInput format:\\nA single integer.\\n\\nOutput format:\\nA string representing the Roman numeral.",
    "starter_code": "# Get integer, convert to Roman, and print",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "III"
      },
      {
        "input": [
          "58"
        ],
        "expected_output": "LVIII"
      },
      {
        "input": [
          "1994"
        ],
        "expected_output": "MCMXCIV"
      }
    ],
    "id": "int_q_358",
    "from": "AI"
  },
  {
    "title": "Roman to Integer",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a Roman numeral string as input and converts it to an integer. The input is guaranteed to be a valid Roman numeral in the range $[1, 3999]$.\\n\\n**Constraints**\\nInput format:\\nA single string (Roman numeral).\\n\\nOutput format:\\nA single integer.",
    "starter_code": "# Get Roman numeral, convert to integer, and print",
    "test_cases": [
      {
        "input": [
          "III"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "LVIII"
        ],
        "expected_output": "58"
      },
      {
        "input": [
          "MCMXCIV"
        ],
        "expected_output": "1994"
      }
    ],
    "id": "int_q_359",
    "from": "AI"
  },
  {
    "title": "Longest Common Prefix",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes an array of strings (space-separated) as input. Find the longest common prefix string amongst all strings in the array. If there is no common prefix, print an empty string.\\n\\n**Constraints**\\nInput format:\\nA single line of space-separated strings.\\n\\nOutput format:\\nA single string.",
    "starter_code": "# Get array of strings, find longest common prefix, and print",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      },
      {
        "input": [
          "dog racecar car"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "apple apron april"
        ],
        "expected_output": "ap"
      }
    ],
    "id": "int_q_360",
    "from": "AI"
  },
  {
    "title": "3Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes an array of integers (space-separated) as input. Find all unique triplets `[a, b, c]` such that `a + b + c = 0`. The solution set must not contain duplicate triplets. Print each triplet on a new line, with elements sorted in ascending order and triplets sorted lexicographically.\\n\\n**Constraints**\\nInput format:\\nA single line of space-separated integers.\\n\\nOutput format:\\nEach unique triplet on a new line, space-separated.",
    "starter_code": "# Get array, find unique triplets that sum to zero, and print",
    "test_cases": [
      {
        "input": [
          "-1 0 1 2 -1 -4"
        ],
        "expected_output": "-1 -1 2\\n-1 0 1"
      }
    ],
    "id": "int_q_361",
    "from": "AI"
  },
  {
    "title": "Remove Nth Node From End of List",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a linked list (represented as space-separated integers) and an integer `n` as input. Remove the $N^{th}$ node from the end of the list and print the modified list. If the list is empty after removal, print an empty line. Assume `n` is always valid.\\n\\n**Constraints**\\nInput format:\\nFirst line: space-separated integers representing the linked list.\\nSecond line: integer n.\\n\\nOutput format:\\nA single line of space-separated integers representing the modified list, or an empty line.",
    "starter_code": "# Get linked list and n, remove nth node from end, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "1 2 3 5"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "1 2",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "id": "int_q_362",
    "from": "AI"
  },
  {
    "title": "Count and Say",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes an integer `n` as input. Generate the $n^{th}$ term of the count-and-say sequence. The sequence is as follows:\\n1. `1`\\n2. `11` (one 1)\\n3. `21` (two 1s)\\n4. `1211` (one 2, one 1)\\n5. `111221` (one 1, one 2, two 1s)\\nPrint the $n^{th}$ term.\\n\\n**Constraints**\\nInput format:\\nA single integer $n$ ($1 \\le n \\le 30$).\\n\\nOutput format:\\nA single string.",
    "starter_code": "# Get n, generate nth term of count-and-say sequence, and print",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "1211"
      }
    ],
    "id": "int_q_363",
    "from": "AI"
  },
  {
    "title": "Permutations",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a list of distinct integers (space-separated) as input. Return all possible permutations of the numbers. Print each permutation on a new line, with elements space-separated. The permutations should be sorted lexicographically.\\n\\n**Constraints**\\nInput format:\\nA single line of space-separated integers.\\n\\nOutput format:\\nEach permutation on a new line, space-separated.",
    "starter_code": "# Get list, generate all permutations, and print",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 2 3\\n1 3 2\\n2 1 3\\n2 3 1\\n3 1 2\\n3 2 1"
      }
    ],
    "id": "int_q_364",
    "from": "AI"
  },
  {
    "title": "Combination Sum",
    "category": "Abstraction",
    "input_type": "stdin",
    "description_md": "**Task**\\nWrite a program that takes a list of distinct integers `candidates` (space-separated) and a target integer as input. Find all unique combinations in `candidates` where the candidate numbers sum to `target`. The same number may be chosen from `candidates` an unlimited number of times. Print each combination on a new line, with elements sorted in ascending order and combinations sorted lexicographically.\\n\\n**Constraints**\\nInput format:\\nFirst line: space-separated integers for `candidates`.\\nSecond line: integer `target`.\\n\\nOutput format:\\nEach unique combination on a new line, space-separated.",
    "starter_code": "# Get candidates and target, find combinations that sum to target, and print",
    "test_cases": [
      {
        "input": [
          "2 3 6 7",
          "7"
        ],
        "expected_output": "2 2 3\\n7"
      },
      {
        "input": [
          "2 3 5",
          "8"
        ],
        "expected_output": "2 2 2 2\\n2 3 3\\n3 5"
      }
    ],
    "id": "int_q_365",
    "from": "AI"
  }
]