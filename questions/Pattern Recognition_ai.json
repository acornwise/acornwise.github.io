[
  {
    "id": "pr_001",
    "title": "Anagram Checker",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and determines if they are anagrams of each other. Anagrams are words or phrases formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format: Two lines, each containing a string. Strings consist of lowercase English letters only, and their length is between 1 and 100.\n\nOutput format: The string \"Anagram\" or \"Not Anagram\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "Anagram"
      },
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "Not Anagram"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_002",
    "title": "Longest Palindromic Substring",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the longest palindromic substring in `s`.\n\n**Constraints**\nInput format: A single string `s`. The length of `s` is between 1 and 1000. `s` consists of only lowercase English letters.\n\nOutput format: The longest palindromic substring. If there are multiple, any one is acceptable.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "babad"
        ],
        "expected_output": "bab"
      },
      {
        "input": [
          "cbbd"
        ],
        "expected_output": "bb"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_003",
    "title": "Run-Length Encoding",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement run-length encoding. Given an input string, compress it by replacing consecutive identical characters with the character followed by the count of its occurrences.\n\n**Constraints**\nInput format: A single string `s`. The length of `s` is between 1 and 200. `s` consists of only uppercase English letters.\n\nOutput format: The run-length encoded string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "AAAABBBCCDAA"
        ],
        "expected_output": "A4B3C2D1A2"
      },
      {
        "input": [
          "XYZ"
        ],
        "expected_output": "X1Y1Z1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_004",
    "title": "Run-Length Decoding",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement run-length decoding. Given an encoded string, decompress it back to its original form. The encoded string will consist of a character followed by its count.\n\n**Constraints**\nInput format: A single string `s` representing the run-length encoded data. The length of `s` is between 1 and 400. `s` consists of uppercase English letters and digits (1-9).\n\nOutput format: The decoded string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "A4B3C2D1A2"
        ],
        "expected_output": "AAAABBBCCDAA"
      },
      {
        "input": [
          "X1Y1Z1"
        ],
        "expected_output": "XYZ"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_005",
    "title": "First Non-Repeating Character",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n\n**Constraints**\nInput format: A single string `s`. The length of `s` is between 1 and 10^5. `s` consists of only lowercase English letters.\n\nOutput format: An integer representing the index of the first non-repeating character, or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "loveleetcode"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "aabb"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_006",
    "title": "Valid Parentheses",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.\n\n**Constraints**\nInput format: A single string `s`. The length of `s` is between 1 and 10^4. `s` consists only of '()[]{}'.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "()"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "()[]{}"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "(]"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "([{}])"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_007",
    "title": "Subsequence Check",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, return `True` if `s` is a subsequence of `t`, or `False` otherwise.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. The lengths of `s` and `t` are between 0 and 1000. Both strings consist only of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abc",
          "ahbgdc"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "axc",
          "ahbgdc"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "",
          "abc"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_008",
    "title": "Missing Number in Sequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line, representing the array `nums`. `n` is between 1 and 10^4. All numbers are distinct and within the range `[0, n]`.\n\nOutput format: An integer representing the missing number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 0 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2",
          "0 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "9",
          "9 6 4 2 3 5 7 0 1"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_009",
    "title": "Find Duplicate Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive, there is only one repeated number. Return this repeated number.\n\nYou must solve this problem without modifying the array `nums` and uses only constant extra space.\n\n**Constraints**\nInput format: An integer `n` (representing the range upper bound), followed by `n+1` integers on a new line. `n` is between 1 and 10^5. The array contains exactly one duplicate.\n\nOutput format: An integer representing the duplicate number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 3 4 2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2",
          "1 1 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_010",
    "title": "Majority Element",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 5 * 10^4. Each number is between -10^9 and 10^9.\n\nOutput format: An integer representing the majority element.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "7",
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_011",
    "title": "Find Unique Elements",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers, find all unique elements in the array. Return them in ascending order.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between 1 and 1000.\n\nOutput format: A space-separated string of unique integers in ascending order.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "1 2 2 3 1"
        ],
        "expected_output": "1 2 3"
      },
      {
        "input": [
          "4",
          "4 4 4 4"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_012",
    "title": "Check Arithmetic or Geometric Sequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sequence of numbers, determine if it is an arithmetic sequence, a geometric sequence, or neither. Assume a sequence is always at least 2 numbers long.\n\n**Constraints**\nInput format: An integer `n` (number of elements) followed by `n` integers on a new line. `n` is between 2 and 100. Each number is between -1000 and 1000.\n\nOutput format: \"Arithmetic\", \"Geometric\", or \"Neither\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "2 4 6 8"
        ],
        "expected_output": "Arithmetic"
      },
      {
        "input": [
          "3",
          "2 4 8"
        ],
        "expected_output": "Geometric"
      },
      {
        "input": [
          "4",
          "1 2 4 7"
        ],
        "expected_output": "Neither"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_013",
    "title": "Caesar Cipher Encrypt",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a Caesar cipher encryption. Given a plaintext string and a shift value (key), encrypt the string.\n\n**Constraints**\nInput format: A string followed by an integer (shift value). The string consists of lowercase English letters only, length between 1 and 100. Shift value is between 0 and 25.\n\nOutput format: The encrypted string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abc",
          "3"
        ],
        "expected_output": "def"
      },
      {
        "input": [
          "xyz",
          "3"
        ],
        "expected_output": "abc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_014",
    "title": "Caesar Cipher Decrypt",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a Caesar cipher decryption. Given an ciphertext string and a shift value (key), decrypt the string.\n\n**Constraints**\nInput format: A string followed by an integer (shift value). The string consists of lowercase English letters only, length between 1 and 100. Shift value is between 0 and 25.\n\nOutput format: The decrypted string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "def",
          "3"
        ],
        "expected_output": "abc"
      },
      {
        "input": [
          "abc",
          "3"
        ],
        "expected_output": "xyz"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_015",
    "title": "Rotate String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `goal`, return `True` if `s` can be rotated to get `goal`, otherwise return `False`.\nA string `s` can be shifted to produce another string by moving the leftmost character of `s` to the rightmost position.\n\n**Constraints**\nInput format: Two lines, first `s`, then `goal`. Lengths of `s` and `goal` are between 1 and 100. Both strings consist of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abcde",
          "cdeab"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abcde",
          "abced"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_016",
    "title": "Longest Consecutive Characters",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string, find the length of the longest consecutive repeating characters.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 0 and 1000. `s` consists of uppercase and lowercase English letters.\n\nOutput format: An integer representing the length of the longest consecutive sequence.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "AAABBCDDDDD"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_017",
    "title": "Most Frequent Word",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a paragraph of text, return the most frequently occurring word. Words are case-insensitive. Punctuation should be ignored. If there's a tie, return the alphabetically first word.\n\n**Constraints**\nInput format: A single string representing the paragraph. Length is between 1 and 1000 characters. Contains English letters, spaces, and common punctuation (.,!?;).\n\nOutput format: A string representing the most frequent word.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "Bob hit a ball, the hit BALL flew far after it was hit."
        ],
        "expected_output": "hit"
      },
      {
        "input": [
          "a a a b b c"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_018",
    "title": "Roman to Integer",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a Roman numeral, convert it to an integer. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.\n\n**Constraints**\nInput format: A single string `s` representing a Roman numeral. `s` is guaranteed to be a valid Roman numeral in the range [1, 3999].\n\nOutput format: An integer.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "III"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "LVIII"
        ],
        "expected_output": "58"
      },
      {
        "input": [
          "MCMXCIV"
        ],
        "expected_output": "1994"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_019",
    "title": "Integer to Roman",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer, convert it to a Roman numeral.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 3999.\n\nOutput format: A string representing the Roman numeral.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "III"
      },
      {
        "input": [
          "58"
        ],
        "expected_output": "LVIII"
      },
      {
        "input": [
          "1994"
        ],
        "expected_output": "MCMXCIV"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_020",
    "title": "Power of Two",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `True` if it is a power of two. Otherwise, return `False`.\nAn integer `n` is a power of two, if there exists an integer `x` such that `n == 2^x`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between -2^31 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_021",
    "title": "Happy Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `n` and determines if it is a \"happy number\".\nA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it enters a looping sequence which does not include 1. Those numbers for which this process ends in 1 are happy.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "19"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_022",
    "title": "Ugly Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer `n`, return `True` if `n` is an ugly number. Otherwise, return `False`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between -2^31 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "14"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_023",
    "title": "Longest Common Prefix",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.\n\n**Constraints**\nInput format: An integer `n` followed by `n` strings on separate lines. `n` is between 1 and 200. Each string length is between 0 and 200. Strings consist of lowercase English letters.\n\nOutput format: A string representing the longest common prefix.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "flower",
          "flow",
          "flight"
        ],
        "expected_output": "fl"
      },
      {
        "input": [
          "3",
          "dog",
          "racecar",
          "car"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_024",
    "title": "Valid Palindrome (Alphanumeric)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return `True` if it is a palindrome, `False` otherwise. Consider only alphanumeric characters and ignoring cases.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 2 * 10^5. `s` consists of printable ASCII characters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "A man, a plan, a canal: Panama"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "race a car"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_025",
    "title": "Sum of Digits Pattern",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-negative integer `num`, repeatedly add all its digits until the result has only one digit.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 0 and 2^31 - 1.\n\nOutput format: An integer representing the single-digit sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "38"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "12345"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_026",
    "title": "Trailing Zeros in Factorial",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the number of trailing zeros in `n!`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 10^4.\n\nOutput format: An integer representing the count of trailing zeros.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_027",
    "title": "Perfect Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. Given an integer `num`, return `True` if `num` is a perfect number, otherwise return `False`.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 10^8.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "28"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "6"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_028",
    "title": "Harshad Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA Harshad number (or Niven number) is an integer that is divisible by the sum of its digits. Given a positive integer `num`, return `True` if `num` is a Harshad number, otherwise return `False`.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 10^9.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "18"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "17"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "21"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_029",
    "title": "Armstrong Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn Armstrong number (or narcissistic number) is a number that is the sum of its own digits each raised to the power of the number of digits. Given a positive integer `num`, return `True` if `num` is an Armstrong number, otherwise return `False`.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 10^9.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "153"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "370"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "123"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_030",
    "title": "Prime Number Checker",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `True` if `n` is a prime number, otherwise return `False`.\nA prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 10^6.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_031",
    "title": "Longest Consecutive Sequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 0 and 10^5. Each number is between -10^9 and 10^9.\n\nOutput format: An integer representing the length of the longest consecutive sequence.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "100 4 200 1 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_032",
    "title": "Binary String Alternating Pattern",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary string `s` (containing only '0' and '1'), determine if it follows an alternating pattern (e.g., '01010' or '10101'). Return `True` if it alternates, `False` otherwise.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` contains only '0' or '1'.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "01010"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "10101"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "00110"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_033",
    "title": "Find All Anagrams in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `p`, return an array of all the start indices of `p`'s anagrams in `s`. You may return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format: Two lines, first `s`, then `p`. Lengths of `s` and `p` are between 1 and 3 * 10^4. Both strings consist of lowercase English letters.\n\nOutput format: A space-separated string of integers representing the start indices.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "cbaebabacd",
          "abc"
        ],
        "expected_output": "0 6"
      },
      {
        "input": [
          "abab",
          "ab"
        ],
        "expected_output": "0 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_034",
    "title": "Group Anagrams",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\n**Constraints**\nInput format: An integer `n` followed by `n` strings on separate lines. `n` is between 0 and 10^4. Each string length is between 0 and 100. Strings consist of lowercase English letters.\n\nOutput format: A representation of grouped lists, where each group's strings are space-separated and groups are separated by newlines. Order of groups and strings within groups doesn't matter (for testing, alphabetical order of strings within a group is fine, and groups sorted by first string).",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "eat",
          "tea",
          "tan",
          "ate"
        ],
        "expected_output": "ate eat tea\ntan"
      },
      {
        "input": [
          "1",
          "a"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_035",
    "title": "Valid IPv4 Address",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program to validate if a given string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots. Leading zeros are not allowed unless the number itself is 0.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 45. `s` contains digits (0-9) and dots (.).\n\nOutput format: The string \"Valid\" or \"Invalid\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "192.168.1.1"
        ],
        "expected_output": "Valid"
      },
      {
        "input": [
          "255.255.255.0"
        ],
        "expected_output": "Valid"
      },
      {
        "input": [
          "1.1.1.1.1"
        ],
        "expected_output": "Invalid"
      },
      {
        "input": [
          "01.0.0.0"
        ],
        "expected_output": "Invalid"
      },
      {
        "input": [
          "256.0.0.0"
        ],
        "expected_output": "Invalid"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_036",
    "title": "Count Palindromic Substrings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the number of palindromic substrings in it.\nA substring is a contiguous sequence of characters within the string.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of lowercase English letters.\n\nOutput format: An integer representing the count of palindromic substrings.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "aaa"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_037",
    "title": "Isomorphic Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, determine if they are isomorphic.\nTwo strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of the characters. No two characters may map to the same character, but a character may map to itself.\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. Lengths of `s` and `t` are between 1 and 5 * 10^4. Both strings consist of any valid ASCII character.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "egg",
          "add"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "foo",
          "bar"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "paper",
          "title"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_038",
    "title": "Word Pattern",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a `pattern` and a string `s`, find if `s` follows the same `pattern`. Here, \"follows\" means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`.\n\n**Constraints**\nInput format: Two lines, first `pattern`, then `s`. `pattern` consists of lowercase English letters. `s` consists of lowercase English letters and spaces. Words in `s` are separated by a single space. Both `pattern` length and number of words in `s` are between 1 and 300.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abba",
          "dog cat cat dog"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abba",
          "dog cat cat fish"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aaaa",
          "dog cat cat dog"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_039",
    "title": "Unique Morse Code Words",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nInternational Morse Code defines a standard encoding where each letter from 'a' to 'z' maps to a series of dots and dashes. Given an array of strings `words`, each word can be written as a concatenation of the Morse code of each letter. For example, \"cab\" can be written as \"-.-.|.-|-.-\". We will call this the transformation of a word. Return the number of different transformations among all words we have.\n\n**Constraints**\nInput format: An integer `n` followed by `n` strings on separate lines. `n` is between 1 and 100. Each word length is between 1 and 12. Each word consists of lowercase English letters.\n\nOutput format: An integer representing the count of unique transformations.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "gin",
          "zen",
          "gig",
          "msg"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_040",
    "title": "Detect Capital",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWe define the usage of capitals in a word to be right when one of the following cases holds:\n1. All letters in this word are capitals (e.g., \"USA\").\n2. All letters in this word are not capitals (e.g., \"leetcode\").\n3. Only the first letter in this word is capital (e.g., \"Google\").\n\nGiven a string `word`, return `True` if the usage of capitals in it is right.\n\n**Constraints**\nInput format: A single string `word`. Length of `word` is between 1 and 100. `word` consists of uppercase and lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "USA"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "FlaG"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "Google"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_041",
    "title": "Reverse Vowels of a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, reverse only all the vowels in the string and return it. The vowels are 'a', 'e', 'i', 'o', 'u', and they can appear in both lower and upper cases.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 3 * 10^5. `s` consists of printable ASCII characters.\n\nOutput format: The string with vowels reversed.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "holle"
      },
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "leotcede"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_042",
    "title": "Valid Anagram",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, return `True` if `t` is an anagram of `s`, and `False` otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. Lengths of `s` and `t` are between 0 and 5 * 10^4. Both strings consist of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "anagram",
          "nagaram"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "rat",
          "car"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_043",
    "title": "N-th Fibonacci Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the `n`-th Fibonacci number. The Fibonacci sequence is defined as `F(0) = 0`, `F(1) = 1`, and `F(n) = F(n-1) + F(n-2)` for `n > 1`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 30.\n\nOutput format: An integer representing the `n`-th Fibonacci number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_044",
    "title": "Check if Straight Line",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array `coordinates`, where `coordinates[i] = [x, y]` represents the `i`-th point on a 2D plane. Check if these points form a straight line.\n\n**Constraints**\nInput format: An integer `n` (number of points), followed by `n` lines, each containing two space-separated integers `x` and `y`. `n` is between 2 and 1000. `x` and `y` are between -10^4 and 10^4.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 1",
          "2 2",
          "3 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 1",
          "2 2",
          "3 4",
          "4 5"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_045",
    "title": "Longest Nice Substring",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA string `s` is nice if, for every letter of the alphabet that `s` contains, it appears in both uppercase and lowercase. For example, \"abABB\" is nice because 'a' and 'b' appear in both cases. \"abA\" is not nice because 'b' appears, but 'B' does not. Given a string `s`, return the longest substring of `s` that is nice. If there are multiple, return the earliest one.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 100. `s` consists of English letters.\n\nOutput format: The longest nice substring. If no nice substring exists, return an empty string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "YazaAay"
        ],
        "expected_output": "aAa"
      },
      {
        "input": [
          "Bb"
        ],
        "expected_output": "Bb"
      },
      {
        "input": [
          "c"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_046",
    "title": "Count Consistent Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `allowed` consisting of distinct characters and an array of strings `words`. A string is consistent if all characters in the string appear in the string `allowed`. Return the number of consistent strings in the `words` array.\n\n**Constraints**\nInput format: Two lines. First line is `allowed` string. Second line is an integer `n` followed by `n` space-separated words. Length of `allowed` is between 1 and 26. `n` is between 1 and 1000. Each word length is between 1 and 10. All strings consist of lowercase English letters.\n\nOutput format: An integer representing the count of consistent strings.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "ab",
          "5",
          "ad bd aaab baee"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "abc",
          "3",
          "a b c ab ac bc abc"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_047",
    "title": "Count Vowels and Consonants",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string, count the number of vowels and consonants in it. Vowels are 'a', 'e', 'i', 'o', 'u' (case-insensitive). All other English letters are consonants.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 0 and 1000. `s` consists of English letters and spaces.\n\nOutput format: Two space-separated integers: vowel_count consonant_count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "4 7"
      },
      {
        "input": [
          "aeiouAEIOU"
        ],
        "expected_output": "10 0"
      },
      {
        "input": [
          "bcdfgh"
        ],
        "expected_output": "0 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_048",
    "title": "Check if Array is Sorted and Rotated",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums`, return `True` if the array was originally sorted in non-decreasing order and then rotated some number of positions (including zero). There may be duplicates in the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Each number is between 1 and 1000.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "3 4 5 1 2"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "2 1 3 4"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "5",
          "1 1 1 1 1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_049",
    "title": "Lexicographical Numbers",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return all the numbers in the range `[1, n]` in lexicographical order.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 5 * 10^4.\n\nOutput format: A space-separated string of integers in lexicographical order.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "13"
        ],
        "expected_output": "1 10 11 12 13 2 3 4 5 6 7 8 9"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_050",
    "title": "Find the Difference",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two strings `s` and `t`. String `t` is generated by random shuffling string `s` and then add one more letter at a random position. Return the letter that was added to `t`.\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. Lengths of `s` and `t` are between 0 and 1000. Both strings consist of lowercase English letters.\n\nOutput format: A single character.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abcd",
          "abcde"
        ],
        "expected_output": "e"
      },
      {
        "input": [
          "",
          "y"
        ],
        "expected_output": "y"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_051",
    "title": "Find All Duplicates in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of length `n` where all the integers in `nums` are in the range `[1, n]` and each integer appears once or twice, return an array of all the integers that appear twice.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^5. Each number is between 1 and `n`. Each number appears once or twice.\n\nOutput format: A space-separated string of integers that appear twice, in ascending order.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8",
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "2 3"
      },
      {
        "input": [
          "3",
          "1 1 2"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_052",
    "title": "Find All Numbers Disappeared in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all integers in the range `[1, n]` that do not appear in `nums`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^5. Each number is between 1 and `n`.\n\nOutput format: A space-separated string of integers that do not appear, in ascending order.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8",
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "5 6"
      },
      {
        "input": [
          "2",
          "1 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_053",
    "title": "Check if Array Forms an Arithmetic Progression",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of numbers `arr`, return `True` if it can be rearranged to form an arithmetic progression. That is, if `arr` can be sorted such that `arr[i+1] - arr[i]` is a constant for all `i`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 1000. Each number is between -10^6 and 10^6.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 5 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 2 4 8"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_054",
    "title": "Check if Array Forms a Geometric Progression",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of numbers `arr`, return `True` if it can be rearranged to form a geometric progression. That is, if `arr` can be sorted such that `arr[i+1] / arr[i]` is a constant for all `i` (assuming `arr[i]` is not zero).\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 1000. Each number is between 1 and 1000 (no zeros to avoid division by zero issues).\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "2 8 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "2",
          "5 5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_055",
    "title": "Count Good Triplets",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `arr`, and three integers `a`, `b` and `c`. A triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are satisfied:\n`0 <= i < j < k < arr.length`\n`|arr[i] - arr[j]| <= a`\n`|arr[j] - arr[k]| <= b`\n`|arr[i] - arr[k]| <= c`\nReturn the number of good triplets.\n\n**Constraints**\nInput format: First line contains integers `n a b c` (n is array length). Second line contains `n` integers `arr`. `n` is between 3 and 100. `arr[i]` is between 0 and 1000. `a, b, c` are between 0 and 1000.\n\nOutput format: An integer representing the count of good triplets.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5 7 2 3",
          "3 0 1 1 9 7"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "3 0 0 0",
          "1 1 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_056",
    "title": "Sort Array By Parity",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers. The relative order of the elements within the even and odd groups does not matter.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 5000. Each number is between 0 and 1000.\n\nOutput format: A space-separated string of integers with even numbers first, then odd numbers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "3 1 2 4"
        ],
        "expected_output": "2 4 3 1"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_057",
    "title": "Check if N and its Double Exist",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `arr` of integers, check if there exist two distinct indices `i` and `j` such that `arr[i] == 2 * arr[j]` or `arr[j] == 2 * arr[i]`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 500. Each number is between -1000 and 1000.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "10 2 5 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "7 1 14 11"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "3 1 7 11"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_058",
    "title": "Valid Mountain Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `arr`, return `True` if and only if it is a valid mountain array. Recall that `arr` is a mountain array if and only if:\n`arr.length >= 3`\nThere exists some index `i` with `0 < i < arr.length - 1` such that:\n`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 0 and 10^4. Each number is between 0 and 10^4.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "2 1 0"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "5",
          "0 3 2 1 0"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "0 1 2 3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_059",
    "title": "Monotonic Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn array is monotonic if it is either monotone increasing or monotone decreasing.\nAn array `nums` is monotone increasing if all `nums[i] <= nums[i+1]` for all `i`.\nAn array `nums` is monotone decreasing if all `nums[i] >= nums[i+1]` for all `i`.\nReturn `True` if and only if the given array `nums` is monotonic.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -10^5 and 10^5.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "1 2 2 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5",
          "6 5 4 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5",
          "1 3 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_060",
    "title": "Longest Harmonious Subsequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.\nGiven an integer array `nums`, return the length of its longest harmonious subsequence. A subsequence is obtained by deleting some elements from the array without changing the order of the remaining elements.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 2 * 10^4. Each number is between -10^9 and 10^9.\n\nOutput format: An integer representing the length of the longest harmonious subsequence.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 3 2 2 5 2 3 7"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1",
          "1 1 1 1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_061",
    "title": "Third Maximum Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the third distinct maximum number in this array. If the third distinct maximum does not exist, return the maximum number.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -2^31 and 2^31 - 1.\n\nOutput format: An integer.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 2 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2",
          "1 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4",
          "2 2 3 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_062",
    "title": "Contains Duplicate II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return `True` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.\n\n**Constraints**\nInput format: First line has `n` (array length) and `k`. Second line has `n` integers. `n` is between 1 and 10^5. `k` is between 0 and 10^5. Numbers are between -10^9 and 10^9.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 2",
          "1 2 3 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4 1",
          "1 0 1 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4 3",
          "1 2 3 1 2 3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_063",
    "title": "Find Peak Element",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA peak element is an element that is strictly greater than its neighbors. Given a 0-indexed integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that `nums[-1] = nums[n] = -infinity`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 1000. Each number is between -2^31 and 2^31 - 1.\n\nOutput format: An integer representing the index of a peak element.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 3 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2",
          "1 2"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2",
          "2 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_064",
    "title": "Next Greater Element I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe next greater element of some element `x` in an array is the first greater element that is to the right of `x` in the same array. Given two distinct 0-indexed integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`, find the next greater element for each element in `nums1` in `nums2`.\n\n**Constraints**\nInput format: First line has `n1` (length of nums1). Second line has `n1` integers for `nums1`. Third line has `n2` (length of nums2). Fourth line has `n2` integers for `nums2`. `n1, n2` are between 1 and 1000. Numbers are between 0 and 10^4. All elements are unique.\n\nOutput format: A space-separated string of integers representing the next greater elements for each element in `nums1`. If no next greater element, use -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "4 1 2",
          "4",
          "1 3 4 2"
        ],
        "expected_output": "-1 3 -1"
      },
      {
        "input": [
          "3",
          "2 4",
          "3",
          "1 2 3 4"
        ],
        "expected_output": "3 -1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_065",
    "title": "Reverse Words in a String III",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 5 * 10^4. `s` contains printable ASCII characters. Words are separated by a single space and there are no leading or trailing spaces.\n\nOutput format: The modified string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "Let's take LeetCode contest"
        ],
        "expected_output": "s'teL ekat edoCteeL tsetnoc"
      },
      {
        "input": [
          "God Ding"
        ],
        "expected_output": "doG gniD"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_066",
    "title": "Reverse String II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string. If there are fewer than `k` characters left, reverse all of them. If there are between `k` and `2k` characters left, reverse only the first `k` characters and leave the others untouched.\n\n**Constraints**\nInput format: A string `s` followed by an integer `k`. Length of `s` is between 1 and 10^4. `k` is between 1 and 10^4. `s` consists of lowercase English letters.\n\nOutput format: The modified string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abcdefg",
          "2"
        ],
        "expected_output": "bacdfeg"
      },
      {
        "input": [
          "abcd",
          "2"
        ],
        "expected_output": "bacd"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_067",
    "title": "Number of Segments in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nCount the number of segments in a string, where a segment is defined as a contiguous sequence of non-space characters.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 0 and 10^5. `s` consists of printable ASCII characters.\n\nOutput format: An integer representing the number of segments.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "Hello, my name is John"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "Hello"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          " "
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_068",
    "title": "Buddy Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `goal`, return `True` if you can swap two letters in `s` so that the result is equal to `goal`, otherwise return `False`.\n\n**Constraints**\nInput format: Two lines, first `s`, then `goal`. Lengths of `s` and `goal` are between 1 and 2 * 10^4. Both strings consist of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "ab",
          "ba"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "ab",
          "ab"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "aa"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "aaaaaaabc",
          "aaaaaaacb"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_069",
    "title": "Longest Palindromic Subsequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the length of the longest palindromic subsequence in `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of lowercase English letters.\n\nOutput format: An integer representing the length of the longest palindromic subsequence.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "bbbab"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "cbbd"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_070",
    "title": "Count Binary Substrings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGive a binary string `s`, return the number of non-empty substrings that have the same number of 0's and 1's and all the 0's and all the 1's in these substrings are grouped consecutively. Substrings that occur multiple times are counted the number of times they occur.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 10^5. `s` consists only of '0' or '1'.\n\nOutput format: An integer representing the count of such substrings.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "00110011"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "10101"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_071",
    "title": "Base 7",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `num`, return a string of its base 7 representation.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between -10^7 and 10^7.\n\nOutput format: A string representing the base 7 number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "100"
        ],
        "expected_output": "202"
      },
      {
        "input": [
          "-7"
        ],
        "expected_output": "-10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_072",
    "title": "Relative Ranks",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `score` of size `n`, where `score[i]` is the score of the `i`-th athlete in a competition. All the scores are guaranteed to be unique. The athletes are awarded ranks as follows:\n1. The 1st place athlete receives \"Gold Medal\".\n2. The 2nd place athlete receives \"Silver Medal\".\n3. The 3rd place athlete receives \"Bronze Medal\".\n4. For the 4th place to `n`-th place athlete, they receive their ranking number (i.e., the 4th place athlete receives \"4\").\nReturn an array of strings `answer` where `answer[i]` is the rank of the `i`-th athlete.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each score is between 0 and 10^6.\n\nOutput format: A space-separated string of ranks.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "5 4 3 2 1"
        ],
        "expected_output": "Gold Medal Silver Medal Bronze Medal 4 5"
      },
      {
        "input": [
          "3",
          "10 3 8"
        ],
        "expected_output": "Gold Medal 3 Silver Medal"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_073",
    "title": "Longest Word in Dictionary through Deleting",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the characters of `s`. If there are multiple possible results, return the longest word with the smallest lexicographical order.\n\n**Constraints**\nInput format: First line is string `s`. Second line is an integer `n` followed by `n` space-separated dictionary words. `s` length is between 1 and 1000. `n` is between 1 and 1000. Each word length is between 1 and 1000. All strings consist of lowercase English letters.\n\nOutput format: A string representing the longest word.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abpcplea",
          "3",
          "ale apple monkey pleac"
        ],
        "expected_output": "apple"
      },
      {
        "input": [
          "abpcplea",
          "2",
          "a b c"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_074",
    "title": "Find Pivot Index",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums`, calculate the pivot index of this array. The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. If no such index exists, return -1.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -1000 and 1000.\n\nOutput format: An integer representing the pivot index, or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 7 3 6 5 6"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "2",
          "2 1"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_075",
    "title": "Maximum Number of Pairs in Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed integer array `nums`. In one operation, you can remove two occurrences of the same integer from `nums`. Return an integer array `answer` of size 2 where `answer[0]` is the total number of pairs that you can form, and `answer[1]` is the number of leftover integers in `nums` after forming all the pairs.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Each number is between 0 and 100.\n\nOutput format: Two space-separated integers representing pairs_count and leftover_count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "7",
          "1 3 2 1 3 2 2"
        ],
        "expected_output": "3 1"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "0 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_076",
    "title": "Smallest Index With Equal Value",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a 0-indexed integer array `nums`, return the smallest index `i` such that `i mod 10 == nums[i]`, or -1 if no such index exists.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. `nums[i]` is between 0 and 9.\n\nOutput format: An integer representing the smallest index, or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "0 1 2 3 4"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "5",
          "4 3 2 5 1"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "3",
          "2 1 3"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_077",
    "title": "Capitalize The Title",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `title` where words are separated by a single space. Capitalize the title such that:\n- If a word has length 1 or 2, it is all lowercase.\n- Otherwise, it is capitalized (first letter uppercase, others lowercase).\n\n**Constraints**\nInput format: A single string `title`. Length of `title` is between 1 and 100. Words consist of English letters. There are no leading or trailing spaces and all words are separated by a single space.\n\nOutput format: The capitalized title string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "capiTalIze tHe titLe"
        ],
        "expected_output": "Capitalize The Title"
      },
      {
        "input": [
          "First leTTeR of EACH word"
        ],
        "expected_output": "First Letter Of Each Word"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_078",
    "title": "Check if All A's Appears Before All B's",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` consisting of only the characters 'a' and 'b', return `True` if every 'a' appears before every 'b' in the string. Otherwise, return `False`.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 100. `s` consists of 'a' and 'b' only.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "aaabbb"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abab"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "bbb"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "aaa"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_079",
    "title": "Count Integers With Even Digit Sum",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer `num`, return the number of positive integers less than or equal to `num` whose digit sums are even.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 1000.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "30"
        ],
        "expected_output": "14"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_080",
    "title": "Check if Matrix Is X-Matrix",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA square matrix is called an X-Matrix if all elements on the main diagonal and anti-diagonal are non-zero, and all other elements are zero. Given a 2D integer array `grid` of size `n x n`, return `True` if `grid` is an X-Matrix, and `False` otherwise.\n\n**Constraints**\nInput format: An integer `n` followed by `n` lines, each containing `n` space-separated integers. `n` is between 1 and 100. Each element is between 0 and 10^9.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 0 0",
          "0 2 0",
          "0 0 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "3",
          "1 0 2",
          "0 3 0",
          "4 0 5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_081",
    "title": "Sum of Values at Indices With K Set Bits",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed integer array `nums` and an integer `k`. Return the sum of all elements in `nums` whose corresponding index has exactly `k` set bits in its binary representation.\n\n**Constraints**\nInput format: First line has `n` (array length) and `k`. Second line has `n` integers. `n` is between 1 and 100. `k` is between 0 and 10. `nums[i]` is between 1 and 1000.\n\nOutput format: An integer representing the sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5 1",
          "5 10 1 5 2"
        ],
        "expected_output": "13"
      },
      {
        "input": [
          "4 2",
          "4 3 2 1"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_082",
    "title": "Count Pairs Of Similar Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed string array `words`. Two strings `a` and `b` are similar if they consist of the same characters (the order and frequency don't matter). Return the number of pairs `(i, j)` such that `0 <= i < j <= words.length - 1` and `words[i]` and `words[j]` are similar.\n\n**Constraints**\nInput format: An integer `n` followed by `n` strings on separate lines. `n` is between 1 and 100. Each word length is between 1 and 100. Words consist of lowercase English letters.\n\nOutput format: An integer representing the number of similar pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "aba",
          "aabb",
          "abcd",
          "bac"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3",
          "aabb",
          "ab",
          "ba"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_083",
    "title": "Number of Arithmetic Triplets",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed, strictly increasing integer array `nums` and a positive integer `diff`. A triplet `(i, j, k)` is an arithmetic triplet if the following conditions are met:\n`i < j < k`\n`nums[j] - nums[i] == diff`\n`nums[k] - nums[j] == diff`\nReturn the number of unique arithmetic triplets.\n\n**Constraints**\nInput format: First line has `n` (array length) and `diff`. Second line has `n` integers. `n` is between 3 and 200. `nums[i]` is between 0 and 200. `diff` is between 1 and 50.\n\nOutput format: An integer representing the count of arithmetic triplets.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 2",
          "0 1 4 6 7 10"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "4 3",
          "4 5 6 7 8 9"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_084",
    "title": "Find Closest Number to Zero",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of size `n`, return the number in `nums` that is closest to 0. If there are multiple answers, return the largest one.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 1000. Each number is between -10^5 and 10^5.\n\nOutput format: An integer representing the closest number to zero.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "-4 -2 1 4 8"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "3",
          "2 -1 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_085",
    "title": "Find the K-Beauty of a Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe k-beauty of an integer `num` is defined as the number of substrings of `num`'s string representation that are divisors of `num` and have a length of `k`. Return the k-beauty of `num`.\nA substring is a contiguous sequence of characters within the string.\n\n**Constraints**\nInput format: A single line with an integer `num` and an integer `k`. `num` is between 1 and 10^9. `k` is between 1 and the number of digits in `num`.\n\nOutput format: An integer representing the k-beauty.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "240 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "430043 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "30003 3"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_086",
    "title": "Count Asterisks",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `s`, where every two consecutive vertical bars '|' enclose some characters. In other words, the characters between `|` and `|` are considered to be inside a pair of vertical bars. Count the number of asterisks '*' in `s` that are *not* inside any pair of vertical bars.\nNote that every pair of vertical bars will contain exactly two '|' characters.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of lowercase English letters, asterisks '*', and vertical bars '|'.\n\nOutput format: An integer representing the count of asterisks.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "l|*e*et|c**o|de|"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "iamprogrammer"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "yo|uar|e**|developer|"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_087",
    "title": "Count Equal and Divisible Pairs in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a 0-indexed integer array `nums` of length `n` and an integer `k`, return the number of pairs `(i, j)` such that `0 <= i < j < n`, `nums[i] == nums[j]` and `(i * j)` is divisible by `k`.\n\n**Constraints**\nInput format: First line has `n` (array length) and `k`. Second line has `n` integers. `n` is between 1 and 100. `k` is between 1 and 100. `nums[i]` is between 1 and 100.\n\nOutput format: An integer representing the count of pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 2",
          "3 1 2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4 1",
          "1 2 3 4"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_088",
    "title": "Count the Number of Vowel Strings in Range",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a 0-indexed array of strings `words` and two integers `left` and `right`, return the number of vowel strings (strings that start and end with a vowel) in the inclusive range `[left, right]`. The vowels are 'a', 'e', 'i', 'o', and 'u'.\n\n**Constraints**\nInput format: First line has `n` (number of words). Second line has `n` space-separated strings `words`. Third line has `left` and `right` integers. `n` is between 1 and 1000. Each word length is between 1 and 10. `left` and `right` are valid indices. Words consist of lowercase English letters.\n\nOutput format: An integer representing the count of vowel strings.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "are you ready",
          "0 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3",
          "apple banana carrot",
          "0 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_089",
    "title": "Check if Array is Good",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` of length `n`. We call `nums` good if it satisfies all the following conditions:\n- `nums.length == n + 1`\n- The elements of `nums` form a permutation of `[1, n]`.\n- There is exactly one element in `nums` that is equal to `n`.\n\nReturn `True` if `nums` is good, otherwise return `False`.\n\n**Constraints**\nInput format: An integer `n` followed by `n+1` integers on a new line. `n` is between 1 and 100. Each number in `nums` is between 1 and `n+1`.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "2 1 3 3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "3",
          "1 3 4 2"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "3",
          "1 2 3 3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_090",
    "title": "Minimum Sum of Four Digit Number After Splitting Digits",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a positive integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the digits of `num`. Each digit must be used exactly once. Leading zeros are allowed.\nReturn the minimum possible sum of `new1` and `new2`.\n\n**Constraints**\nInput format: A single integer `num` (4 digits). `num` is between 1000 and 9999.\n\nOutput format: An integer representing the minimum sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2932"
        ],
        "expected_output": "52"
      },
      {
        "input": [
          "4009"
        ],
        "expected_output": "13"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_091",
    "title": "Largest Local Values in a Matrix",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an `n x n` integer matrix `grid`. Generate a matrix `maxLocal` of size `(n - 2) x (n - 2)` such that `maxLocal[i][j]` is the largest value in the `3 x 3` submatrix that has its top-left corner at `(i, j)` in `grid`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` lines, each containing `n` space-separated integers. `n` is between 3 and 10. Each element is between 1 and 100.\n\nOutput format: The `(n-2) x (n-2)` matrix `maxLocal`, with elements of each row space-separated and rows separated by newlines.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "9 9 8",
          "9 1 2",
          "3 4 5"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "4",
          "9 9 8 1",
          "5 6 7 2",
          "2 4 5 3",
          "1 2 3 4"
        ],
        "expected_output": "9 9\n7 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_092",
    "title": "Count Pairs Whose Sum is Less than Target",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a 0-indexed integer array `nums` and an integer `target`, return the number of pairs `(i, j)` such that `0 <= i < j < nums.length` and `nums[i] + nums[j] < target`.\n\n**Constraints**\nInput format: First line has `n` (array length) and `target`. Second line has `n` integers. `n` is between 1 and 50. Each number is between -50 and 50. `target` is between -100 and 100.\n\nOutput format: An integer representing the number of pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 2",
          "-1 1 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3 0",
          "1 2 3"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_093",
    "title": "Find Common Characters",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string array `words`, return an array of all characters that appear in every string in `words` (including duplicates). You may return the answer in any order.\n\n**Constraints**\nInput format: An integer `n` followed by `n` strings on separate lines. `n` is between 1 and 100. Each word length is between 1 and 100. All words consist of lowercase English letters.\n\nOutput format: A space-separated string of common characters, in alphabetical order.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "bella",
          "label",
          "roller"
        ],
        "expected_output": "e l l"
      },
      {
        "input": [
          "2",
          "cool",
          "lock"
        ],
        "expected_output": "l o"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_094",
    "title": "Maximum Score After Splitting a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (left and right). The score is the number of zeros in the left substring plus the number of ones in the right substring.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 2 and 50. `s` consists of '0's and '1's only.\n\nOutput format: An integer representing the maximum score.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "011101"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "00111"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1111"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_095",
    "title": "Count Pairs With Sum K",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` and an integer `k`, return the number of pairs `(i, j)` where `i < j` and `nums[i] + nums[j] == k`.\n\n**Constraints**\nInput format: First line has `n` (array length) and `k`. Second line has `n` integers. `n` is between 1 and 10^5. `k` is between -10^9 and 10^9. `nums[i]` is between -10^9 and 10^9.\n\nOutput format: An integer representing the number of pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 6",
          "1 5 7 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4 2",
          "1 2 3 4"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "5 10",
          "1 1 1 1 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_096",
    "title": "Find Subsequence of Length K With the Largest Sum",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` and an integer `k`. You want to find a subsequence of `nums` of length `k` that has the largest sum. Return any such subsequence. If there are multiple such subsequences, return any one of them.\n\n**Constraints**\nInput format: First line has `n` (array length) and `k`. Second line has `n` integers. `n` is between 1 and 1000. `k` is between 1 and `n`. `nums[i]` is between -10^5 and 10^5.\n\nOutput format: A space-separated string of integers forming the subsequence.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5 3",
          "2 1 3 3 2"
        ],
        "expected_output": "3 3 2"
      },
      {
        "input": [
          "3 2",
          "-1 -2 -3"
        ],
        "expected_output": "-1 -2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_097",
    "title": "Check if String Can Be Partitioned into K Equal Substrings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and an integer `k`, return `True` if `s` can be partitioned into `k` non-empty substrings such that all of these substrings are the same. Otherwise, return `False`.\n\n**Constraints**\nInput format: A string `s` followed by an integer `k`. Length of `s` is between 1 and 1000. `k` is between 1 and 1000. `s` consists of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abcabcabc",
          "3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "ababa",
          "3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "ab",
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "aaaa",
          "2"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_098",
    "title": "Longest Common Subsequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return 0. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n**Constraints**\nInput format: Two lines, first `text1`, then `text2`. Lengths of `text1` and `text2` are between 1 and 1000. Both strings consist of lowercase English characters.\n\nOutput format: An integer representing the length of the longest common subsequence.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abcde",
          "ace"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "abc",
          "abc"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "abc",
          "def"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_099",
    "title": "Find All Distinct Characters",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string, find all distinct characters present in it. Return them in alphabetical order.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 0 and 1000. `s` consists of lowercase English letters.\n\nOutput format: A space-separated string of distinct characters.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "banana"
        ],
        "expected_output": "a b n"
      },
      {
        "input": [
          "hello"
        ],
        "expected_output": "e h l o"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_100",
    "title": "Find Missing and Repeating Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of `n` integers, which originally contained all numbers from 1 to `n`. Due to an error, one number in the array gets duplicated to another number, and another number goes missing. Find the number that occurs twice and the number that is missing.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 1000. Each number is between 1 and `n`.\n\nOutput format: Two space-separated integers: the repeating number and the missing number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2",
          "1 1"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "3",
          "3 1 3"
        ],
        "expected_output": "3 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_101",
    "title": "Max Consecutive Ones",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary array `nums`, return the maximum number of consecutive 1's in the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers (0s or 1s) on a new line. `n` is between 1 and 10^5.\n\nOutput format: An integer representing the maximum count of consecutive 1's.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8",
          "1 1 0 1 1 1 0 1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "1 1 1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "0 0 0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_102",
    "title": "Find N Unique Integers Sum up to Zero",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return any array containing `n` unique integers that sum up to 0.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 1000.\n\nOutput format: A space-separated string of `n` unique integers that sum to 0. The order does not matter.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "-2 -1 0 1 2"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "-1 0 1"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_103",
    "title": "Count Negative Numbers in a Sorted Matrix",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.\n\n**Constraints**\nInput format: First line has `m` and `n`. Then `m` lines follow, each with `n` space-separated integers. `m, n` are between 1 and 100. Each number is between -100 and 100.\n\nOutput format: An integer representing the count of negative numbers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3 4",
          "4 3 2 -1",
          "3 2 1 -1",
          "1 1 -1 -2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 1",
          "7"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_104",
    "title": "Missing Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between 0 and `n`.\n\nOutput format: An integer representing the missing number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 0 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2",
          "0 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "9",
          "9 6 4 2 3 5 7 0 1"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_105",
    "title": "Single Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 3 * 10^4 (odd). Each number is between -3 * 10^4 and 3 * 10^4.\n\nOutput format: An integer representing the single number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "2 2 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "4 1 2 1 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_106",
    "title": "Number of Good Pairs",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums`, return the number of *good pairs*. A pair `(i, j)` is called good if `nums[i] == nums[j]` and `i < j`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Each number is between 1 and 100.\n\nOutput format: An integer representing the number of good pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 3 1 1 3"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "3",
          "1 1 1 1"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_107",
    "title": "Squares of a Sorted Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -10^4 and 10^4.\n\nOutput format: A space-separated string of integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "-4 -1 0 3 10"
        ],
        "expected_output": "0 1 9 16 100"
      },
      {
        "input": [
          "5",
          "-7 -3 2 3 11"
        ],
        "expected_output": "4 9 9 49 121"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_108",
    "title": "Remove Duplicates from Sorted Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted array `nums`, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the new length of the array after removing duplicates.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 0 and 3 * 10^4. Each number is between -100 and 100.\n\nOutput format: An integer representing the new length.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 1 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "5",
          "0 0 1 1 1 2 2 3 3 4"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_109",
    "title": "Maximum Subarray",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^5. Each number is between -10^4 and 10^4.\n\nOutput format: An integer representing the maximum sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "9",
          "-2 1 -3 4 -1 2 1 -5 4"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "5 4 -1 7 8"
        ],
        "expected_output": "23"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_110",
    "title": "Best Time to Buy and Sell Stock",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `prices` where `prices[i]` is the price of a given stock on the `i`-th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit. If you cannot achieve any profit, return 0.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^5. Each price is between 0 and 10^4.\n\nOutput format: An integer representing the maximum profit.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "7 1 5 3 6 4"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "5",
          "7 6 4 3 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_111",
    "title": "Plus One",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\nThe digits are stored such that the most significant digit is at the beginning of the array, and each element in the array contains a single digit. You may assume the integer does not contain any leading zero, except for the number 0 itself.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers (digits) on a new line. `n` is between 1 and 100. Each digit is between 0 and 9.\n\nOutput format: A space-separated string of digits representing the incremented number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "1 2 4"
      },
      {
        "input": [
          "3",
          "4 3 2 1"
        ],
        "expected_output": "4 3 2 2"
      },
      {
        "input": [
          "1",
          "9"
        ],
        "expected_output": "1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_112",
    "title": "Merge Sorted Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. Merge `nums2` into `nums1` as one sorted array.\n\n**Constraints**\nInput format: First line has `m` and `n`. Second line has `m` integers for `nums1`. Third line has `n` integers for `nums2`. `m, n` are between 0 and 200. `nums1` has `m+n` length initially, with last `n` elements as 0. `nums2` has `n` length. Numbers are between -10^9 and 10^9.\n\nOutput format: A space-separated string of integers representing the merged `nums1`.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 2 3 0 0 0",
          "2 5 6"
        ],
        "expected_output": "1 2 2 3 5 6"
      },
      {
        "input": [
          "1 0",
          "1",
          ""
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "0 1",
          "",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_113",
    "title": "Is Subsequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, return `true` if `s` is a subsequence of `t`, or `false` otherwise.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. Lengths of `s` and `t` are between 0 and 100. Both strings consist of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abc",
          "ahbgdc"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "axc",
          "ahbgdc"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_114",
    "title": "Word Pattern",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a `pattern` and a string `s`, find if `s` follows the same pattern. Here, \"follows\" means a full match, such that there is a one-to-one mapping between a letter in `pattern` and a non-empty word in `s`.\n\n**Constraints**\nInput format: First line is `pattern` string. Second line is `s` string. Length of `pattern` is between 1 and 300. Length of `s` is between 1 and 3000. `pattern` contains only lowercase English letters. `s` contains lowercase English letters and spaces ' '.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abba",
          "dog cat cat dog"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abba",
          "dog cat cat fish"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aaaa",
          "dog cat cat dog"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "abba",
          "dog dog dog dog"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_115",
    "title": "Isomorphic Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, determine if they are isomorphic. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of the characters. No two characters may map to the same character, but a character may map to itself.\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. Lengths of `s` and `t` are between 1 and 5 * 10^4. Both strings consist of any valid ASCII character.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "egg",
          "add"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "foo",
          "bar"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "paper",
          "title"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_116",
    "title": "First Unique Character in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 10^5. `s` consists of lowercase English letters.\n\nOutput format: An integer representing the index.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "loveleetcode"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "aabb"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_117",
    "title": "Ransom Note",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `ransomNote` and `magazine`, return `true` if `ransomNote` can be constructed by using the letters from `magazine` and `false` otherwise. Each letter in `magazine` can only be used once in `ransomNote`.\n\n**Constraints**\nInput format: Two lines, first `ransomNote`, then `magazine`. Lengths of `ransomNote` and `magazine` are between 1 and 10^5. Both strings consist of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "a",
          "b"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "ab"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "aab"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_118",
    "title": "Fizz Buzz",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return a string array `answer` (1-indexed) where:\n- `answer[i]` is \"FizzBuzz\" if `i` is divisible by 3 and 5.\n- `answer[i]` is \"Fizz\" if `i` is divisible by 3.\n- `answer[i]` is \"Buzz\" if `i` is divisible by 5.\n- `answer[i]` is `i` (as a string) if none of the above conditions are true.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 10^4.\n\nOutput format: A space-separated string of the array elements.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "15"
        ],
        "expected_output": "1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 Fizz"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_119",
    "title": "Add Digits",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `num`, repeatedly add all its digits until the result has only one digit.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 0 and 2^31 - 1.\n\nOutput format: An integer representing the single digit sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "38"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "199"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_120",
    "title": "Power of Two",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `true` if it is a power of two. Otherwise, return `false`.\nAn integer `n` is a power of two, if there exists an integer `x` such that `n == 2^x`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between -2^31 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_121",
    "title": "Ugly Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer `n`, return `true` if `n` is an ugly number.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between -2^31 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "14"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_122",
    "title": "Happy Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return `true` if `n` is a happy number, and `false` if not.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "19"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_123",
    "title": "Move Zeroes",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -2^31 and 2^31 - 1.\n\nOutput format: A space-separated string of integers representing the modified array.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "0 1 0 3 12"
        ],
        "expected_output": "1 3 12 0 0"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_124",
    "title": "Intersection of Two Arrays",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n\n**Constraints**\nInput format: First line has `n1` (length of nums1). Second line has `n1` integers for `nums1`. Third line has `n2` (length of nums2). Fourth line has `n2` integers for `nums2`. `n1, n2` are between 1 and 1000. Numbers are between 0 and 1000.\n\nOutput format: A space-separated string of integers representing the intersection, sorted in ascending order.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 2 1",
          "2",
          "2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "5",
          "4 9 5",
          "4",
          "9 4 9 8 4"
        ],
        "expected_output": "4 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_125",
    "title": "Majority Element",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `n / 2` times. You may assume that the majority element always exists in the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 5 * 10^4. Each number is between -10^9 and 10^9.\n\nOutput format: An integer representing the majority element.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "7",
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_126",
    "title": "Missing Ranges",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted integer array `nums`, where the range of elements is `[lower, upper]` inclusive, return its missing ranges.\n\n**Constraints**\nInput format: First line has `n` (array length), `lower`, `upper`. Second line has `n` integers for `nums`. `n` is between 0 and 100. `lower, upper` are between -10^9 and 10^9. `nums` elements are unique and within `[lower, upper]`.\n\nOutput format: A comma-separated string of ranges. Each range is either a single number or `start->end`.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5 0 99",
          "0 1 3 50 75"
        ],
        "expected_output": "2, 4->49, 76->99"
      },
      {
        "input": [
          "0 1 1",
          ""
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 -3 -1",
          "-1"
        ],
        "expected_output": "-3->-2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_127",
    "title": "Summary Ranges",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted unique integer array `nums`, return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 0 and 20. Each number is between -2^31 and 2^31 - 1.\n\nOutput format: A comma-separated string of ranges. Each range is either a single number or `start->end`.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "7",
          "0 1 2 4 5 7"
        ],
        "expected_output": "0->2, 4->5, 7"
      },
      {
        "input": [
          "3",
          "0 2 3 4 6 8 9"
        ],
        "expected_output": "0, 2->4, 6, 8->9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_128",
    "title": "Count Primes",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the number of prime numbers that are strictly less than `n`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 5 * 10^6.\n\nOutput format: An integer representing the count of prime numbers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_129",
    "title": "Is Power of Four",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `true` if it is a power of four. Otherwise, return `false`.\nAn integer `n` is a power of four, if there exists an integer `x` such that `n == 4^x`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between -2^31 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_130",
    "title": "Valid Perfect Square",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer `num`, return `true` if `num` is a perfect square or `false` otherwise. Do not use any built-in library function such as `sqrt`.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "14"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_131",
    "title": "Guess Number Higher or Lower",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWe are playing a game. The game is as follows: I pick a number from 1 to `n`. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess. You call a pre-defined `guess(num)` API which returns `0` if your guess is correct, `-1` if my number is lower, and `1` if my number is higher. Return the number that I picked.\n\n**Constraints**\nInput format: First line has `n` (upper bound of the range). Second line has `pick` (the number to guess, not directly given to function, but used by the test harness).\n`n` is between 1 and 2^31 - 1. `pick` is between 1 and `n`.\n\nOutput format: An integer representing the guessed number.",
    "starter_code": "def guess(num: int) -> int:\n    # This is a mock API, replace with actual implementation in a real environment.\n    # Example: if pick is 6, guess(7) would return -1\n    # Example: if pick is 6, guess(5) would return 1\n    # Example: if pick is 6, guess(6) would return 0\n    _pick = 6 # This value would be provided by the test system.\n    if num == _pick:\n        return 0\n    elif num < _pick:\n        return 1\n    else:\n        return -1\n\ndef guessNumber(n: int) -> int:\n    # Implement your binary search solution here.\n    pass",
    "test_cases": [
      {
        "input": [
          "10",
          "6"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_132",
    "title": "Sum of Square Numbers",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-negative integer `c`, decide whether there are two integers `a` and `b` such that `a^2 + b^2 = c`.\n\n**Constraints**\nInput format: A single integer `c`. `c` is between 0 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_133",
    "title": "Arranging Coins",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou have `n` coins and you want to build a staircase with them. The staircase has `k` rows where the `i`-th row has exactly `i` coins. The last row of the staircase may be incomplete. Given the integer `n`, return the number of complete rows of the staircase you will build.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 2^31 - 1.\n\nOutput format: An integer representing the number of complete rows.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_134",
    "title": "Convert a Number to Hexadecimal",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `num`, return a string representing its hexadecimal representation. For negative integers, two's complement method is used.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between -2^31 and 2^31 - 1.\n\nOutput format: A string representing the hexadecimal number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "26"
        ],
        "expected_output": "1a"
      },
      {
        "input": [
          "-1"
        ],
        "expected_output": "ffffffff"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_135",
    "title": "Find All Anagrams in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `p`, return an array of all the start indices of `p`'s anagrams in `s`. You may return the answer in any order.\n\n**Constraints**\nInput format: Two lines, first `s`, then `p`. Lengths of `s` and `p` are between 1 and 3 * 10^4. Both strings consist of lowercase English letters.\n\nOutput format: A space-separated string of indices, sorted in ascending order.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "cbaebabacd",
          "abc"
        ],
        "expected_output": "0 6"
      },
      {
        "input": [
          "abab",
          "ab"
        ],
        "expected_output": "0 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_136",
    "title": "Hamming Distance",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers `x` and `y`, return the Hamming distance between them.\n\n**Constraints**\nInput format: Two integers `x` and `y` on separate lines. `x, y` are between 0 and 2^31 - 1.\n\nOutput format: An integer representing the Hamming distance.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1",
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_137",
    "title": "Number Complement",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe complement of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation. Given an integer `num`, return its complement.\n\n**Constraints**\nInput format: A single integer `num`. `num` is a positive integer between 1 and 2^31 - 1.\n\nOutput format: An integer representing the complement.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_138",
    "title": "Island Perimeter",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water. Grid cells are connected horizontally/vertically (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, and its width and height don't exceed 100. Determine the perimeter of the island.\n\n**Constraints**\nInput format: First line has `rows` and `cols`. Then `rows` lines follow, each with `cols` space-separated integers (0s or 1s). `rows, cols` are between 1 and 100. Each `grid[i][j]` is 0 or 1.\n\nOutput format: An integer representing the perimeter of the island.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 4",
          "0 1 0 0",
          "1 1 1 0",
          "0 1 0 0",
          "1 1 0 0"
        ],
        "expected_output": "16"
      },
      {
        "input": [
          "1 1",
          "1"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "1 2",
          "1 0"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_139",
    "title": "Teemo Attacking",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nOur hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a precisely `duration` seconds. If Teemo attacks again before the poison effect ends, the timer for poison effect is reset, and the poison effect will end `duration` seconds after the new attack. You are given a non-decreasing integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`. Return the total time that Ashe is poisoned.\n\n**Constraints**\nInput format: First line has `n` (length of timeSeries) and `duration`. Second line has `n` integers for `timeSeries`. `n` is between 1 and 10^4. `duration` is between 1 and 10^7. `timeSeries` values are between 0 and 10^7.\n\nOutput format: An integer representing the total poisoned time.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 4"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2 2",
          "1 2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_140",
    "title": "License Key Formatting",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a license key represented as a string `s` which consists of only alphanumeric characters and dashes. The string is separated into `n + 1` groups by `n` dashes. You are also given an integer `k`. We want to reformat the string `s` such that the first group contains exactly `k` characters, and each subsequent group contains exactly `k` characters. All lowercase letters should be converted to uppercase. The dashes should be replaced by a single dash in the new formatted string.\n\n**Constraints**\nInput format: A string `s` followed by an integer `k`. Length of `s` is between 1 and 10^5. `k` is between 1 and 10^4.\n\nOutput format: The reformatted string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5F3Z-2E-9-W",
          "4"
        ],
        "expected_output": "5F3Z-2E9W"
      },
      {
        "input": [
          "2-5g-3-J",
          "2"
        ],
        "expected_output": "2-5G-3J"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_141",
    "title": "Student Attendance Record I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `s` representing an attendance record for a student. The record only contains the following three characters: 'A': Absent, 'L': Late, 'P': Present. A student could be rewarded if their attendance record does not contain more than one 'A' (absent) or more than two continuous 'L's (late). Return `true` if the student could be rewarded, `false` otherwise.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of 'A', 'L', 'P' only.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "PPALLA"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "PPALLL"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "PPA"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_142",
    "title": "Find Pivot Index (revisit with sum checks)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums`, calculate the pivot index of this array. The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. If no such index exists, return -1. If there are multiple pivot indexes, return the leftmost pivot index.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -1000 and 1000.\n\nOutput format: An integer representing the leftmost pivot index, or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 7 3 6 5 6"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "2",
          "2 1"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_143",
    "title": "Subarray Sum Equals K",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals `k`.\n\n**Constraints**\nInput format: First line has `n` (array length) and `k`. Second line has `n` integers. `n` is between 1 and 2 * 10^4. `nums[i]` is between -1000 and 1000. `k` is between -10^7 and 10^7.\n\nOutput format: An integer representing the count of subarrays.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3 2",
          "1 1 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 0",
          "1 2 3"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_144",
    "title": "Array Partition I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of 2n integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.\n\n**Constraints**\nInput format: An integer `n` (representing 2n elements) followed by `2n` integers on a new line. `n` is between 1 and 10^4. Each number is between -10^4 and 10^4.\n\nOutput format: An integer representing the maximized sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 4 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "6",
          "6 2 6 5 1 2"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_145",
    "title": "Reverse Words in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an input string `s`, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Remove any leading or trailing spaces and reduce multiple spaces between words to a single space.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 10^5. `s` contains English letters (uppercase and lowercase), digits, and spaces.\n\nOutput format: The reversed string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "the sky is blue"
        ],
        "expected_output": "blue is sky the"
      },
      {
        "input": [
          "  hello world  "
        ],
        "expected_output": "world hello"
      },
      {
        "input": [
          "a good   example"
        ],
        "expected_output": "example good a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_146",
    "title": "Max Area of Island",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with a value `1` in the island. Return the maximum area of an island in the given `grid`. If there is no island, return `0`.\n\n**Constraints**\nInput format: First line has `rows` and `cols`. Then `rows` lines follow, each with `cols` space-separated integers (0s or 1s). `rows, cols` are between 1 and 50. `grid[i][j]` is 0 or 1.\n\nOutput format: An integer representing the maximum area.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8 13",
          "0 0 1 0 0 0 0 1 0 0 0 0 0",
          "0 0 0 0 0 0 0 1 1 1 0 0 0",
          "0 1 1 0 1 0 0 0 0 0 0 0 0",
          "0 1 0 0 1 1 0 0 1 0 1 0 0",
          "0 1 0 0 1 1 0 0 1 1 1 0 0",
          "0 0 0 0 0 0 0 0 0 0 1 0 0",
          "0 0 0 0 0 0 0 1 1 1 0 0 0",
          "0 0 0 0 0 0 0 1 1 0 0 0 0"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "3 3",
          "0 0 0",
          "0 0 0",
          "0 0 0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_147",
    "title": "Shortest Unsorted Continuous Subarray",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, if you find the shortest subarray that you need to sort (in ascending order) for the whole array to be sorted in ascending order, return the length of this subarray.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -10^5 and 10^5.\n\nOutput format: An integer representing the length of the shortest unsorted subarray.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "7",
          "2 6 4 8 10 9 15"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "2",
          "1 0"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_148",
    "title": "Find the Duplicate Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one duplicate number in `nums`, return this duplicate number.\n\n**Constraints**\nInput format: An integer `n_plus_1` followed by `n_plus_1` integers on a new line. `n_plus_1` is between 2 and 10^5. Numbers are between 1 and `n` (where `n` is `n_plus_1 - 1`).\n\nOutput format: An integer representing the duplicate number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 3 4 2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3",
          "1 1 2"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "3 1 3 4 2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_149",
    "title": "Longest Palindrome",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` which consists of lowercase or uppercase English letters, return the length of the longest palindrome that can be built with those letters. Case is sensitive, for example, \"Aa\" is not considered a palindrome here.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 2000. `s` consists of lowercase and/or uppercase English letters.\n\nOutput format: An integer representing the length of the longest palindrome.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abccccdd"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "bb"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_150",
    "title": "Reverse Vowels of a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, reverse only all the vowels in the string and return it. The vowels are 'a', 'e', 'i', 'o', 'u', and they can appear in both lower and upper cases.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 3 * 10^5. `s` consists of printable ASCII characters.\n\nOutput format: The string with vowels reversed.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "holle"
      },
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "leotcede"
      },
      {
        "input": [
          "aA"
        ],
        "expected_output": "Aa"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_151",
    "title": "Find K Closest Elements",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.\n\n**Constraints**\nInput format: First line has `n` (array length), `k`, `x`. Second line has `n` integers for `arr`. `n` is between 1 and 10^4. `k` is between 1 and `n`. `arr` elements are between -10^4 and 10^4. `x` is between -10^4 and 10^4.\n\nOutput format: A space-separated string of `k` integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5 4 3",
          "1 2 3 4 5"
        ],
        "expected_output": "1 2 3 4"
      },
      {
        "input": [
          "5 4 -1",
          "1 2 3 4 5"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_152",
    "title": "Maximum Average Subarray I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` consisting of `n` elements, and an integer `k`. Find a contiguous subarray whose length is equal to `k` that has the maximum average value and return this value. Answers within 10^-5 of the actual answer will be accepted.\n\n**Constraints**\nInput format: First line has `n` (array length) and `k`. Second line has `n` integers for `nums`. `n` is between 1 and 10^5. `k` is between 1 and `n`. `nums[i]` is between -10^4 and 10^4.\n\nOutput format: A float representing the maximum average, formatted to 5 decimal places.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5 4",
          "1 12 -5 -6 50 3"
        ],
        "expected_output": "12.75000"
      },
      {
        "input": [
          "1 1",
          "5"
        ],
        "expected_output": "5.00000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_153",
    "title": "Binary Tree Paths",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 5000.\n\nOutput format: A newline-separated string of paths. Each path is represented as `node1->node2->...->node_leaf`. The order of paths does not matter.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef binaryTreePaths(root: TreeNode) -> list[str]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3 null 5"
        ],
        "expected_output": "1->2->5\n1->3"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_154",
    "title": "Longest Univalue Path",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -1000 and 1000. Number of nodes is between 0 and 10^4.\n\nOutput format: An integer representing the length of the longest univalue path.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef longestUnivaluePath(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "5 4 5 1 1 null 5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1 1 1 1 1 1 1"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_155",
    "title": "Path Sum III",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return the number of paths where the sum of the nodes' values equals `targetSum`. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n\n**Constraints**\nInput format: First line has `targetSum`. Second line has a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -1000 and 1000. `targetSum` is between -1000 and 1000. Number of nodes is between 0 and 1000.\n\nOutput format: An integer representing the number of paths.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef pathSum(root: TreeNode, targetSum: int) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "8",
          "10 5 -3 3 2 null 11 3 -2 null 1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "5 4 8 11 null 13 4 7 2 null null 5 1"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_156",
    "title": "Diameter of Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 10^4.\n\nOutput format: An integer representing the diameter.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef diameterOfBinaryTree(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_157",
    "title": "Merge Two Binary Trees",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two binary trees `root1` and `root2`. Imagine that when you put one of them on top of the other, some nodes of the two trees overlap while the others don't. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values as the new node's value. Otherwise, the non-empty node will be used as the node of the new tree. Return the merged tree.\n\n**Constraints**\nInput format: Two lines, each a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -1000 and 1000. Number of nodes for each tree is between 0 and 2000.\n\nOutput format: A space-separated string representing the merged tree in level order (null for empty nodes).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef serialize_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append(\"null\")\n    while result and result[-1] == \"null\":\n        result.pop()\n    return \" \".join(result)\n\ndef mergeTrees(root1: TreeNode, root2: TreeNode) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 3 2 5",
          "2 1 3 null 4 null 7"
        ],
        "expected_output": "3 4 5 5 4 null 7"
      },
      {
        "input": [
          "1",
          "1 2"
        ],
        "expected_output": "2 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_158",
    "title": "Trim a Binary Search Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary search tree and two integers `low` and `high`, trim the tree such that all its elements lie in `[low, high]`. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). Return the root of the trimmed BST.\n\n**Constraints**\nInput format: First line has `low` and `high`. Second line has a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 1000. `low, high` are between 0 and 1000. Number of nodes is between 0 and 10^4.\n\nOutput format: A space-separated string representing the trimmed tree in level order (null for empty nodes).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef serialize_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append(\"null\")\n    while result and result[-1] == \"null\":\n        result.pop()\n    return \" \".join(result)\n\ndef trimBST(root: TreeNode, low: int, high: int) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2",
          "1 0 2 null 3"
        ],
        "expected_output": "1 null 2"
      },
      {
        "input": [
          "1 3",
          "3 0 4 null 2 null null 5"
        ],
        "expected_output": "3 null 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_159",
    "title": "Average of Levels in Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10^-5 of the actual answer will be accepted.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -2^31 and 2^31 - 1. Number of nodes is between 0 and 10^4.\n\nOutput format: A space-separated string of floats representing the averages, formatted to 5 decimal places.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef averageOfLevels(root: TreeNode) -> list[float]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3.00000 14.50000 11.00000"
      },
      {
        "input": [
          "3 9 20 15 7"
        ],
        "expected_output": "3.00000 14.50000 11.00000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_160",
    "title": "Distribute Candies",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou have `n` candies, and you are given an integer array `candyType` of length `n` which describes the type of each candy. Each type of candy has a unique integer id, and all candies of the same type have the same integer id. You are also given that `n` is an even integer. You have only `n / 2` of these candies to eat. Return the maximum number of *different types* of candies you can eat.\n\n**Constraints**\nInput format: An integer `n` (length of candyType) followed by `n` integers for `candyType`. `n` is even and between 2 and 10^4. `candyType[i]` is between -10^5 and 10^5.\n\nOutput format: An integer representing the maximum number of different candy types.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 1 2 2 3 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "4",
          "1 1 2 3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4",
          "6 6 6 6"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_161",
    "title": "Reshape the Matrix",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nIn MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data. Given an `m x n` matrix `mat` and two integers `r` and `c`, return the reshaped matrix. If the reshape operation is invalid, return the original matrix.\n\n**Constraints**\nInput format: First line has `m` (rows), `n` (cols), `r` (new rows), `c` (new cols). Next `m` lines have `n` space-separated integers representing the matrix. `m, n` are between 1 and 100. `r, c` are between 1 and 1000. Matrix elements are between -1000 and 1000.\n\nOutput format: The reshaped matrix, with rows separated by newlines and elements in a row by spaces. If invalid, output the original matrix in the same format.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2 2 1 4",
          "1 2",
          "3 4"
        ],
        "expected_output": "1 2 3 4"
      },
      {
        "input": [
          "2 2 4 1",
          "1 2",
          "3 4"
        ],
        "expected_output": "1\n2\n3\n4"
      },
      {
        "input": [
          "2 2 1 3",
          "1 2",
          "3 4"
        ],
        "expected_output": "1 2\n3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_162",
    "title": "Longest Harmonious Subsequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWe define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1. Given an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers for `nums`. `n` is between 1 and 10^4. `nums[i]` is between -10^9 and 10^9.\n\nOutput format: An integer representing the length.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "7",
          "1 3 2 2 5 2 3 7"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2",
          "1 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_163",
    "title": "Maximum Depth of N-ary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a n-ary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty child list). Each node value is an integer. The number of nodes is between 0 and 10^4. Node values are between 0 and 10^4.\n\nOutput format: An integer representing the maximum depth.",
    "starter_code": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef build_n_ary_tree(nodes):\n    if not nodes:\n        return None\n    root = Node(int(nodes[0]))\n    q = [(root, 0)] # (node, index_in_nodes_list)\n    node_idx = 0\n    curr_children_start_idx = 2 # root (val, null), then children\n    \n    while q:\n        curr_node, _ = q.pop(0)\n        if not curr_node: # should not happen if input is valid\n            continue\n            \n        if curr_children_start_idx < len(nodes):\n            if nodes[curr_children_start_idx] == 'null':\n                curr_children_start_idx += 1 # Skip null\n                continue\n\n            temp_children = []\n            while curr_children_start_idx < len(nodes) and nodes[curr_children_start_idx] != 'null':\n                child_node = Node(int(nodes[curr_children_start_idx]))\n                temp_children.append(child_node)\n                q.append((child_node, curr_children_start_idx))\n                curr_children_start_idx += 1\n            curr_node.children = temp_children\n            curr_children_start_idx += 1 # Skip null after children\n            \n    return root\n\ndef maxDepth(root: Node) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 null 3 2 4 null 5 6"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 null 2 null 3 null 4 null 5 null 6"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_164",
    "title": "N-ary Tree Postorder Traversal",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of an n-ary tree, return the postorder traversal of its nodes' values.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty child list). Each node value is an integer. The number of nodes is between 0 and 10^4. Node values are between 0 and 10^4.\n\nOutput format: A space-separated string of integers representing the postorder traversal.",
    "starter_code": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef build_n_ary_tree(nodes):\n    if not nodes:\n        return None\n    root = Node(int(nodes[0]))\n    q = [(root, 0)]\n    node_idx = 0\n    curr_children_start_idx = 2\n    while q:\n        curr_node, _ = q.pop(0)\n        if not curr_node:\n            continue\n        if curr_children_start_idx < len(nodes):\n            if nodes[curr_children_start_idx] == 'null':\n                curr_children_start_idx += 1\n                continue\n            temp_children = []\n            while curr_children_start_idx < len(nodes) and nodes[curr_children_start_idx] != 'null':\n                child_node = Node(int(nodes[curr_children_start_idx]))\n                temp_children.append(child_node)\n                q.append((child_node, curr_children_start_idx))\n                curr_children_start_idx += 1\n            curr_node.children = temp_children\n            curr_children_start_idx += 1\n    return root\n\ndef postorder(root: Node) -> list[int]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 null 3 2 4 null 5 6"
        ],
        "expected_output": "5 6 3 2 4 1"
      },
      {
        "input": [
          "1 null 2 3 4 5 null null 6 7 null 8 null 9 10 null null 11 null 12 null 13 null null 14"
        ],
        "expected_output": "2 6 14 11 7 3 12 8 4 13 9 10 5 1"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_165",
    "title": "N-ary Tree Preorder Traversal",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of an n-ary tree, return the preorder traversal of its nodes' values.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty child list). Each node value is an integer. The number of nodes is between 0 and 10^4. Node values are between 0 and 10^4.\n\nOutput format: A space-separated string of integers representing the preorder traversal.",
    "starter_code": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\ndef build_n_ary_tree(nodes):\n    if not nodes:\n        return None\n    root = Node(int(nodes[0]))\n    q = [(root, 0)]\n    node_idx = 0\n    curr_children_start_idx = 2\n    while q:\n        curr_node, _ = q.pop(0)\n        if not curr_node:\n            continue\n        if curr_children_start_idx < len(nodes):\n            if nodes[curr_children_start_idx] == 'null':\n                curr_children_start_idx += 1\n                continue\n            temp_children = []\n            while curr_children_start_idx < len(nodes) and nodes[curr_children_start_idx] != 'null':\n                child_node = Node(int(nodes[curr_children_start_idx]))\n                temp_children.append(child_node)\n                q.append((child_node, curr_children_start_idx))\n                curr_children_start_idx += 1\n            curr_node.children = temp_children\n            curr_children_start_idx += 1\n    return root\n\ndef preorder(root: Node) -> list[int]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 null 3 2 4 null 5 6"
        ],
        "expected_output": "1 3 5 6 2 4"
      },
      {
        "input": [
          "1 null 2 3 4 5 null null 6 7 null 8 null 9 10 null null 11 null 12 null 13 null null 14"
        ],
        "expected_output": "1 2 3 6 7 11 14 4 8 12 9 13 10 5"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_166",
    "title": "Implement Stack using Queues",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).\n\n**Constraints**\nInput format: Each line represents an operation. 'push x' (x is integer), 'pop', 'top', 'empty'. Operations will be valid. Total operations are between 1 and 100. `x` is between 0 and 9.\n\nOutput format: For 'pop', 'top', 'empty' operations, output the result on a new line. 'empty' outputs 'True' or 'False'. 'top' and 'pop' output the integer value.",
    "starter_code": "from collections import deque\n\nclass MyStack:\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n\n    def push(self, x: int) -> None:\n        # Implement this method\n        pass\n\n    def pop(self) -> int:\n        # Implement this method\n        pass\n\n    def top(self) -> int:\n        # Implement this method\n        pass\n\n    def empty(self) -> bool:\n        # Implement this method\n        pass",
    "test_cases": [
      {
        "input": [
          "push 1",
          "push 2",
          "top",
          "pop",
          "empty"
        ],
        "expected_output": "2\n2\nFalse"
      },
      {
        "input": [
          "push 5",
          "pop",
          "empty"
        ],
        "expected_output": "5\nTrue"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_167",
    "title": "Implement Queue using Stacks",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a first-in-first-out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).\n\n**Constraints**\nInput format: Each line represents an operation. 'push x' (x is integer), 'pop', 'peek', 'empty'. Operations will be valid. Total operations are between 1 and 100. `x` is between 0 and 9.\n\nOutput format: For 'pop', 'peek', 'empty' operations, output the result on a new line. 'empty' outputs 'True' or 'False'. 'peek' and 'pop' output the integer value.",
    "starter_code": "class MyQueue:\n    def __init__(self):\n        self.s1 = []\n        self.s2 = []\n\n    def push(self, x: int) -> None:\n        # Implement this method\n        pass\n\n    def pop(self) -> int:\n        # Implement this method\n        pass\n\n    def peek(self) -> int:\n        # Implement this method\n        pass\n\n    def empty(self) -> bool:\n        # Implement this method\n        pass",
    "test_cases": [
      {
        "input": [
          "push 1",
          "push 2",
          "peek",
          "pop",
          "empty"
        ],
        "expected_output": "1\n1\nFalse"
      },
      {
        "input": [
          "push 5",
          "pop",
          "empty"
        ],
        "expected_output": "5\nTrue"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_168",
    "title": "Flood Fill",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn image is represented by an `m x n` integer grid `image` where `image[i][j]` represents the pixel value of the image. You are also given three integers `sr`, `sc`, and `color`. You should perform a flood fill on the image starting from the pixel `image[sr][sc]`. To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all the aforementioned pixels with `color`. Return the modified image.\n\n**Constraints**\nInput format: First line has `rows` and `cols`. Next `rows` lines have `cols` space-separated integers for `image`. Next line has `sr`, `sc`, `color`. `rows, cols` are between 1 and 50. `image[i][j]` and `color` are between 0 and 65535. `sr` is between 0 and `rows-1`. `sc` is between 0 and `cols-1`.\n\nOutput format: The modified image, with rows separated by newlines and elements in a row by spaces.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 1 1",
          "1 1 0",
          "1 0 1",
          "1 1 2"
        ],
        "expected_output": "1 2 1\n2 2 0\n2 0 1"
      },
      {
        "input": [
          "1 1",
          "0",
          "0 0 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_169",
    "title": "Max Increase to Keep City Skyline",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is a city with `n` rows and `n` columns of buildings. The dimensions of each building are given by `grid[r][c]` which represents the height of the building located at row `r` and column `c`. A city's skyline is the outer contour formed by all the buildings when viewed from a distance. We want to increase the height of some or all buildings in the grid to maximize the total possible height increase while still maintaining the city's skyline from all four directions (i.e., top, bottom, left, and right). Return the maximum total sum that the height of all buildings can be increased.\n\n**Constraints**\nInput format: An integer `n`. Next `n` lines have `n` space-separated integers for `grid`. `n` is between 2 and 50. `grid[i][j]` is between 0 and 100.\n\nOutput format: An integer representing the maximum total sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "3 0 8 4",
          "2 4 5 7",
          "9 2 6 3",
          "0 3 1 0"
        ],
        "expected_output": "35"
      },
      {
        "input": [
          "2",
          "0 0",
          "0 0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_170",
    "title": "Number of Atoms",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a chemical formula `formula` (representing a molecule), return the count of each atom. The final output should be in sorted order (alphabetical) of atom name, with a count of 1 not being shown.\n\n**Constraints**\nInput format: A single string `formula`. Length of `formula` is between 1 and 1000. `formula` consists of uppercase and lowercase English letters, digits, and parentheses.\n\nOutput format: A string representing the count of atoms.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "H2O"
        ],
        "expected_output": "H2O"
      },
      {
        "input": [
          "Mg(OH)2"
        ],
        "expected_output": "H2MgO2"
      },
      {
        "input": [
          "K4(ON(SO3)2)2"
        ],
        "expected_output": "K4N2O14S4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_171",
    "title": "Longest Word in Dictionary through Deleting",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the characters of `s`. If there are multiple possible results, return the longest word with the smallest lexicographical order. If there is no such string, return an empty string.\n\n**Constraints**\nInput format: First line has `s`. Second line has `n` (dictionary size) and `n` strings on a new line (dictionary words). Length of `s` is between 1 and 1000. `n` is between 1 and 1000. Length of dictionary words are between 1 and 1000. All strings consist of lowercase English letters.\n\nOutput format: The longest word.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abpcplea",
          "3",
          "ale apple monkey pleal"
        ],
        "expected_output": "apple"
      },
      {
        "input": [
          "abpcplea",
          "3",
          "a b c"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_172",
    "title": "Set Mismatch",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou have a set of integers `s`, which originally contained all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in repetition of one number and loss of another number. You are given an integer array `nums` representing the data status of this set after the error. Return an array in the form of `[duplicatedNumber, missingNumber]`.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` integers for `nums`. `n` is between 2 and 10^4. `nums[i]` is between 1 and 10^4.\n\nOutput format: Two space-separated integers: the duplicated number and the missing number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2",
          "1 2 2 4"
        ],
        "expected_output": "2 3"
      },
      {
        "input": [
          "2",
          "1 1"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_173",
    "title": "Max Chunks To Make Sorted",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `arr` that is a permutation of `[0, 1, ..., arr.length - 1]`. We split `arr` into some number of chunks (partitions), and each chunk is individually sorted. After concatenating them, the result is the sorted array. Return the maximum number of chunks we can make to get the sorted array.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` integers for `arr`. `n` is between 1 and 10. `arr[i]` is between 0 and `n-1`.\n\nOutput format: An integer representing the maximum number of chunks.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "4 3 2 1 0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "1 0 2 3 4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_174",
    "title": "Minimum Absolute Difference in BST",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 10^5. Number of nodes is between 2 and 10^4.\n\nOutput format: An integer representing the minimum absolute difference.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef getMinimumDifference(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "4 2 6 1 3"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 0 48 null null 12 49"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_175",
    "title": "K-th Smallest Element in a BST",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary search tree, and an integer `k`, return the `k`-th smallest value (1-indexed) of all the values of the nodes in the tree.\n\n**Constraints**\nInput format: First line has `k`. Second line has a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 10^4. `k` is between 1 and number of nodes. Number of nodes is between 1 and 10^4.\n\nOutput format: An integer representing the k-th smallest value.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef kthSmallest(root: TreeNode, k: int) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3",
          "3 1 4 null 2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1",
          "5 3 6 2 4 null null 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_176",
    "title": "Invert Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, invert the tree, and return its root.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 100.\n\nOutput format: A space-separated string representing the inverted tree in level order (null for empty nodes).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef serialize_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append(\"null\")\n    while result and result[-1] == \"null\":\n        result.pop()\n    return \" \".join(result)\n\ndef invertTree(root: TreeNode) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "4 2 7 1 3 6 9"
        ],
        "expected_output": "4 7 2 9 6 3 1"
      },
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "2 3 1"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_177",
    "title": "Convert Sorted Array to Binary Search Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 0 and 10^4. Each number is between -10^4 and 10^4.\n\nOutput format: A space-separated string representing the BST in level order (null for empty nodes).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef serialize_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append(\"null\")\n    while result and result[-1] == \"null\":\n        result.pop()\n    return \" \".join(result)\n\ndef sortedArrayToBST(nums: list[int]) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "5",
          "-10 -3 0 5 9"
        ],
        "expected_output": "0 -3 9 -10 null 5"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_178",
    "title": "Count Complete Tree Nodes",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a *complete* binary tree, return the number of nodes in the tree.\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes inclusive at the last level `h`.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 10^4. Number of nodes is between 0 and 5 * 10^4.\n\nOutput format: An integer representing the number of nodes.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef countNodes(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_179",
    "title": "Same Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the roots of two binary trees `p` and `q`, return `true` if they are the same tree, and `false` otherwise. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n**Constraints**\nInput format: Two lines, each a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -10^4 and 10^4. Number of nodes for each tree is between 0 and 100.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef isSameTree(p: TreeNode, q: TreeNode) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "1 2 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2",
          "1 null 2"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1 2 1",
          "1 1 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_180",
    "title": "Symmetric Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 1000.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef isSymmetric(root: TreeNode) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 4 4 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 2 null 3 null 3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_181",
    "title": "Binary Tree Level Order Traversal II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the *bottom-up* level order traversal of its nodes' values. (i.e., from leaf to root, right to left for each level).\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -1000 and 1000. Number of nodes is between 0 and 2000.\n\nOutput format: A newline-separated string of space-separated integers, representing the levels from bottom-up.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef levelOrderBottom(root: TreeNode) -> list[list[int]]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "15 7\n9 20\n3"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_182",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and so on. The next level again left to right, and so on.)\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 2000.\n\nOutput format: A newline-separated string of space-separated integers, representing the levels in zigzag order.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef zigzagLevelOrder(root: TreeNode) -> list[list[int]]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3\n20 9\n15 7"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_183",
    "title": "Validate Binary Search Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with values **less than** the node's value.\n- The right subtree of a node contains only nodes with values **greater than** the node's value.\n- Both the left and right subtrees must also be binary search trees.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -2^31 and 2^31 - 1. Number of nodes is between 0 and 10^4.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef isValidBST(root: TreeNode) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5 1 4 null null 3 6"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_184",
    "title": "Populating Next Right Pointers in Each Node",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. Populate each next right pointer to point to its next right node. If there is no next right node, the next right pointer should be set to `NULL`.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 2^12 - 1.\n\nOutput format: A space-separated string representing the tree in level order, with `next` pointers indicated by '->' then the value of the next node, or '-> #N' for null. Each level ends with '#'.",
    "starter_code": "class Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\ndef build_perfect_tree(nodes_str):\n    if not nodes_str or nodes_str[0] == 'null':\n        return None\n    nodes = [int(x) if x != 'null' else None for x in nodes_str.split()]\n    root = Node(nodes[0])\n    q = [root]\n    idx = 1\n    while q and idx < len(nodes):\n        curr_node = q.pop(0)\n        if nodes[idx] is not None:\n            curr_node.left = Node(nodes[idx])\n            q.append(curr_node.left)\n        idx += 1\n        if idx < len(nodes) and nodes[idx] is not None:\n            curr_node.right = Node(nodes[idx])\n            q.append(curr_node.right)\n        idx += 1\n    return root\n\ndef serialize_connected_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    q = [root]\n    next_level_start = root\n\n    while q:\n        curr = q.pop(0)\n        if curr == next_level_start:\n            if result: # Add newline for previous level, if any\n                result.append(\"#\")\n            next_level_start = curr.left if curr.left else None\n        \n        result.append(str(curr.val))\n        if curr.next:\n            result.append(\"->\")\n            result.append(str(curr.next.val))\n        else:\n            result.append(\"-> #N\")\n        \n        if curr.left:\n            q.append(curr.left)\n        if curr.right:\n            q.append(curr.right)\n\n    result.append(\"#\") # Mark end of the last level\n    return \" \".join(result)\n\ndef connect(root: 'Node') -> 'Node':\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6 7"
        ],
        "expected_output": "1-> #N # 2->3-> #N # 4->5->6->7-> #N #"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_185",
    "title": "Flatten Binary Tree to Linked List",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, flatten the tree into a \"linked list\": The \"linked list\" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`. The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 100. Number of nodes is between 0 and 2000.\n\nOutput format: A space-separated string representing the flattened linked list (right child only, left child null).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef serialize_flattened_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    curr = root\n    while curr:\n        result.append(str(curr.val))\n        curr = curr.right\n    return \" \".join(result)\n\ndef flatten(root: TreeNode) -> None:\n    # Implement your solution here (modifies root in-place)\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 5 3 4 null 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      },
      {
        "input": [
          ""
        ],
        "expected_output": ""
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_186",
    "title": "Sum Root to Leaf Numbers",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given the `root` of a binary tree containing digits from 0 to 9 only. Each root-to-leaf path in the tree represents a number. For example, if the path is 1 -> 2 -> 3, then it represents the number 123. Return the total sum of all root-to-leaf numbers.\nA leaf node is a node with no children.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 9. Number of nodes is between 1 and 1000.\n\nOutput format: An integer representing the total sum.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef sumNumbers(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "25"
      },
      {
        "input": [
          "4 9 0 5 1"
        ],
        "expected_output": "1026"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_187",
    "title": "Count Nodes Equal to Average of Subtree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree. The average of a subtree is the sum of its nodes' values divided by the number of nodes. (An integer division is performed.)\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 1000. Number of nodes is between 1 and 1000.\n\nOutput format: An integer representing the count of nodes.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef averageOfSubtree(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "4 8 5 0 1 null 6"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_188",
    "title": "Range Sum of BST",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST) and two integers `low` and `high`, return the sum of values of all nodes with a value in the inclusive range `[low, high]`.\n\n**Constraints**\nInput format: First line has `low` and `high`. Second line has a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 1 and 10^5. `low, high` are between 1 and 10^5. `low <= high`. Number of nodes is between 1 and 2 * 10^4.\n\nOutput format: An integer representing the sum of values.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef rangeSumBST(root: TreeNode, low: int, high: int) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "7 15",
          "10 5 15 3 7 null 18"
        ],
        "expected_output": "32"
      },
      {
        "input": [
          "6 10",
          "10 5 15 3 7 13 18 1 6 null null null null null 9"
        ],
        "expected_output": "23"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_189",
    "title": "Find Mode in Binary Search Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary search tree (BST) with duplicates, return all the mode(s) (the most frequently occurred element) in it. If the tree has more than one mode, return them in any order.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -10^5 and 10^5. Number of nodes is between 0 and 10^4.\n\nOutput format: A space-separated string of integers representing the mode(s).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef findMode(root: TreeNode) -> list[int]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 null 2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_190",
    "title": "Two Sum IV - Input is a BST",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST) and an integer `k`, return `true` if there exist two distinct nodes in the tree whose values sum up to `k`, or `false` otherwise.\n\n**Constraints**\nInput format: First line has `k`. Second line has a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -10^4 and 10^4. `k` is between -10^5 and 10^5. Number of nodes is between 1 and 10^4.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef findTarget(root: TreeNode, k: int) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "9",
          "5 3 6 2 4 null 7"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "28",
          "5 3 6 2 4 null 7"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_191",
    "title": "Convert BST to Greater Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every node's value is changed to the original value plus the sum of all greater values in the BST.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 10^4. Number of nodes is between 0 and 10^4.\n\nOutput format: A space-separated string representing the modified tree in level order (null for empty nodes).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef serialize_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append(\"null\")\n    while result and result[-1] == \"null\":\n        result.pop()\n    return \" \".join(result)\n\ndef convertBST(root: TreeNode) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "4 1 6 0 2 5 7 null null null 3 null null null 8"
        ],
        "expected_output": "30 36 21 36 35 26 15 null null null 33 null null null 8"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_192",
    "title": "Add One Row to Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, then value `val` and depth `d`, you need to add a row of nodes with value `val` at the given depth `d`. The `root` node is at depth 1. The adding rule is: given a positive integer depth `d`, for every node `p` at depth `d - 1` (and these nodes exist), create two new tree nodes with value `val` as `p`'s new left child and right child. `p`'s original left child and right child should be the left and right children of the new left and right child respectively.\n\n**Constraints**\nInput format: First line has `val` and `d`. Second line has a space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. `val` is between -100 and 100. `d` is between 1 and the depth of the tree + 1. Number of nodes is between 0 and 10^4.\n\nOutput format: A space-separated string representing the modified tree in level order (null for empty nodes).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef serialize_tree(root):\n    if not root:\n        return \"\"\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append(\"null\")\n    while result and result[-1] == \"null\":\n        result.pop()\n    return \" \".join(result)\n\ndef addOneRow(root: TreeNode, val: int, depth: int) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2",
          "4 2 6 3 1 null null null null null 5"
        ],
        "expected_output": "4 1 null 2 null 3 6 null null null null 5"
      },
      {
        "input": [
          "1 3",
          "4 2 6 3 1 null null null null null 5"
        ],
        "expected_output": "4 2 6 1 1 1 1 null null null null 3 null null null null 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_193",
    "title": "Smallest String Starting From Leaf",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given the `root` of a binary tree where each node has a value from 0 to 25 representing the letters 'a' to 'z'. Return the lexicographically smallest string that starts at a leaf of this tree and goes upwards to the root.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 25. Number of nodes is between 1 and 1000.\n\nOutput format: A string representing the lexicographically smallest string.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef smallestFromLeaf(root: TreeNode) -> str:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "0 1 2 3 4 5 6"
        ],
        "expected_output": "dba"
      },
      {
        "input": [
          "25 1 0 0 1 null null null 1 0 null null null null 0"
        ],
        "expected_output": "adz"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_194",
    "title": "Uncommon Words from Two Sentences",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, \"this is a sentence\". You are given two sentences `s1` and `s2`. Return a list of all uncommon words. An uncommon word is a word that appears exactly once in one of the sentences, and does not appear in the other sentence.\n\n**Constraints**\nInput format: Two lines, first `s1`, then `s2`. Lengths of `s1` and `s2` are between 1 and 200. Both sentences consist of lowercase English letters and spaces.\n\nOutput format: A space-separated string of uncommon words, sorted lexicographically.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "this apple is sweet",
          "this apple is sour"
        ],
        "expected_output": "sour sweet"
      },
      {
        "input": [
          "apple apple",
          "banana"
        ],
        "expected_output": "banana"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_195",
    "title": "Monotonic Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn array is monotonic if it is either monotone increasing or monotone decreasing. An array `nums` is monotone increasing if all `nums[i] <= nums[i+1]` for all `i <= j`. An array `nums` is monotone decreasing if all `nums[i] >= nums[i+1]` for all `i <= j`. Given an integer array `nums`, return `true` if the given array is monotonic, or `false` otherwise.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers for `nums`. `n` is between 1 and 10^5. `nums[i]` is between -10^5 and 10^5.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 2 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "6 5 4 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "1 3 2"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_196",
    "title": "Fair Candy Swap",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAlice and Bob have `n` candies and `m` candies respectively. You are given their two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `i`-th candy box that Alice has, and `bobSizes[j]` is the number of candies of the `j`-th candy box that Bob has. It is guaranteed that Alice and Bob have different total numbers of candies. They want to swap one candy box from Alice and one candy box from Bob so that they both have the same total amount of candy. Return an integer array `[aliceCandy, bobCandy]` where `aliceCandy` is the size of the candy box that Alice must exchange, and `bobCandy` is the size of the candy box that Bob must exchange.\n\n**Constraints**\nInput format: First line has `n` (Alice's candies length) and `m` (Bob's candies length). Second line has `n` integers for `aliceSizes`. Third line has `m` integers for `bobSizes`. `n, m` are between 1 and 10^4. Candy sizes are between 1 and 10^5.\n\nOutput format: Two space-separated integers representing `aliceCandy` and `bobCandy`.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 1",
          "2 2"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "2 2",
          "1 2",
          "2 3"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "5 4",
          "2 6 3 1",
          "3 8 7 10 5"
        ],
        "expected_output": "2 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_197",
    "title": "Minimum Number of Frogs Croaking",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `croakOfFrogs`, which represents a combination of the string \"croak\" by some number of frogs, and also every frog croaks concurrently. For example, \"croakcroak\" is a valid string. The length of the string is 10. If this string is not a combination of \"croak\" by some number of frogs, return -1.\n\n**Constraints**\nInput format: A single string `croakOfFrogs`. Length of `croakOfFrogs` is between 1 and 10^5. `croakOfFrogs` consists of characters 'c', 'r', 'o', 'a', 'k'.\n\nOutput format: An integer representing the minimum number of frogs, or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "croakcroak"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "crcoakroak"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "croakcrook"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_198",
    "title": "Minimum Cost to Move Chips to The Same Position",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWe have `n` chips, where the `i`-th chip is at `position[i]`. We need to move all the chips to the same position. In one step, we can change the position of the `i`-th chip from `position[i]` to: `position[i] + 2` or `position[i] - 2` with cost 0, or `position[i] + 1` or `position[i] - 1` with cost 1. Return the minimum cost needed to move all the chips to the same position.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers for `position`. `n` is between 1 and 100. `position[i]` is between 1 and 10^9.\n\nOutput format: An integer representing the minimum cost.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "2 2 2 3 3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2",
          "1 1000000000"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_199",
    "title": "Count Substrings with Only One Distinct Letter",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `S`, return the number of substrings that have only one distinct letter.\n\n**Constraints**\nInput format: A single string `S`. Length of `S` is between 1 and 1000. `S` consists of lowercase English letters.\n\nOutput format: An integer representing the count of substrings.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "aaaba"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "aaaaaaaaaa"
        ],
        "expected_output": "55"
      },
      {
        "input": [
          "abc"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_200",
    "title": "Minimum Absolute Difference in BST",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between 0 and 10^5. Number of nodes is between 2 and 10^4.\n\nOutput format: An integer representing the minimum absolute difference.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef getMinimumDifference(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "4 2 6 1 3"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 0 48 null null 12 49"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_201",
    "title": "Merge Two Sorted Lists",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists into a single sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.\n\n**Constraints**\nInput format: Two lines, each a space-separated string of integers representing a sorted linked list. 'null' represents the end of the list. Number of nodes in each list is between 0 and 50. Node values are between -100 and 100. Both `list1` and `list2` are sorted in non-decreasing order.\n\nOutput format: A space-separated string of integers representing the merged sorted linked list.",
    "starter_code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef build_list(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    head = ListNode(int(nodes[0]))\n    current = head\n    for val_str in nodes[1:]:\n        if val_str == 'null':\n            break\n        current.next = ListNode(int(val_str))\n        current = current.next\n    return head\n\ndef list_to_str(head):\n    res = []\n    current = head\n    while current:\n        res.append(str(current.val))\n        current = current.next\n    return ' '.join(res) if res else 'null'\n\ndef mergeTwoLists(list1: ListNode, list2: ListNode) -> ListNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 4 null",
          "1 3 4 null"
        ],
        "expected_output": "1 1 2 3 4 4"
      },
      {
        "input": [
          "null",
          "0 null"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_202",
    "title": "Remove Duplicates from Sorted List",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n\n**Constraints**\nInput format: A space-separated string of integers representing a sorted linked list. 'null' represents the end of the list. Number of nodes is between 0 and 300. Node values are between -100 and 100. The list is guaranteed to be sorted in ascending order.\n\nOutput format: A space-separated string of integers representing the linked list with duplicates removed.",
    "starter_code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef build_list(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    head = ListNode(int(nodes[0]))\n    current = head\n    for val_str in nodes[1:]:\n        if val_str == 'null':\n            break\n        current.next = ListNode(int(val_str))\n        current = current.next\n    return head\n\ndef list_to_str(head):\n    res = []\n    current = head\n    while current:\n        res.append(str(current.val))\n        current = current.next\n    return ' '.join(res) if res else 'null'\n\ndef deleteDuplicates(head: ListNode) -> ListNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 1 2 null"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "1 1 2 3 3 null"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_203",
    "title": "Symmetric Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 1000.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef isSymmetric(root: TreeNode) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 4 4 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 2 null 3 null 3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_204",
    "title": "Maximum Depth of Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 10^4.\n\nOutput format: An integer representing the maximum depth.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef maxDepth(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 null 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_205",
    "title": "Minimum Depth of Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 10^5.\n\nOutput format: An integer representing the minimum depth.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef minDepth(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 null 3 null 4 null 5 null 6"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_206",
    "title": "Convert Sorted Array to Binary Search Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 0 and 10^4. Each number is between -10^4 and 10^4. `nums` is sorted in a strictly increasing order.\n\nOutput format: A space-separated string representing the tree nodes in level order (null for empty nodes).",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef tree_to_list(root):\n    if not root:\n        return ['null']\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append('null')\n    while result and result[-1] == 'null':\n        result.pop()\n    return ' '.join(result) if result else 'null'\n\ndef sortedArrayToBST(nums: list[int]) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "5",
          "-10 -3 0 5 9"
        ],
        "expected_output": "0 -3 9 -10 null 5"
      },
      {
        "input": [
          "3",
          "1 3 5"
        ],
        "expected_output": "3 1 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_207",
    "title": "Path Sum",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return `True` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`. A leaf is a node with no children.\n\n**Constraints**\nInput format: First line has a space-separated string representing the tree nodes in level order (null for empty nodes). Second line has an integer `targetSum`. Node values are between -1000 and 1000. Number of nodes is between 0 and 5000. `targetSum` is between -1000 and 1000.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef hasPathSum(root: TreeNode, targetSum: int) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "5 4 8 11 null 13 4 7 2 null null null 1",
          "22"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3",
          "5"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_208",
    "title": "Invert Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, invert the tree, and return its root.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 0 and 100.\n\nOutput format: A space-separated string representing the inverted tree nodes in level order.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef tree_to_list(root):\n    if not root:\n        return ['null']\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append('null')\n    while result and result[-1] == 'null':\n        result.pop()\n    return ' '.join(result) if result else 'null'\n\ndef invertTree(root: TreeNode) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "4 2 7 1 3 6 9"
        ],
        "expected_output": "4 7 2 9 6 3 1"
      },
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "2 3 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_209",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a Binary Search Tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\n\n**Constraints**\nInput format: First line has a space-separated string representing the tree nodes in level order (null for empty nodes). Second line has two integers `p_val` and `q_val` representing the values of nodes `p` and `q`. Node values are unique and between 0 and 10^9. Number of nodes is between 2 and 10^5. `p_val` and `q_val` will exist in the BST.\n\nOutput format: An integer representing the value of the LCA node.",
    "starter_code": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef find_node(root, val):\n    if not root:\n        return None\n    if root.val == val:\n        return root\n    left_search = find_node(root.left, val)\n    if left_search:\n        return left_search\n    return find_node(root.right, val)\n\ndef lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "6 2 8 0 4 7 9 null null 3 5",
          "2 8"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "6 2 8 0 4 7 9 null null 3 5",
          "2 4"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_210",
    "title": "Majority Element",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `n / 2` times. You may assume that the majority element always exists in the array.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 1 and 5 * 10^4. Each number is between -10^9 and 10^9.\n\nOutput format: An integer representing the majority element.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "7",
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_211",
    "title": "Contains Duplicate",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return `True` if any value appears at least twice in the array, and return `False` if every element is distinct.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 1 and 10^5. Each number is between -10^9 and 10^9.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 3 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_212",
    "title": "Missing Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 1 and 10^4. All numbers are distinct and in the range `[0, n]`.\n\nOutput format: An integer representing the missing number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 0 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2",
          "0 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_213",
    "title": "Intersection of Two Arrays",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n\n**Constraints**\nInput format: First line has `n1` (length of nums1) then `n1` space-separated integers. Second line has `n2` (length of nums2) then `n2` space-separated integers. `n1`, `n2` are between 1 and 1000. Each number is between 0 and 1000.\n\nOutput format: A space-separated string of integers representing the intersection.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 2 1",
          "2",
          "2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4",
          "4 9 5",
          "4",
          "9 4 9 8 4"
        ],
        "expected_output": "9 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_214",
    "title": "Assign Cookies",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n**Constraints**\nInput format: First line has `n` (number of children) then `n` space-separated integers for `g`. Second line has `m` (number of cookies) then `m` space-separated integers for `s`. `n`, `m` are between 1 and 3 * 10^4. Greed factor and cookie size are between 1 and 10^9.\n\nOutput format: An integer representing the maximum number of content children.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "2",
          "1 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2",
          "1 2",
          "3",
          "1 2 3"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_215",
    "title": "Fizz Buzz",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return a string array `answer` (1-indexed) where:\n\n* `answer[i]` == \"FizzBuzz\" if `i` is divisible by 3 and 5.\n* `answer[i]` == \"Fizz\" if `i` is divisible by 3.\n* `answer[i]` == \"Buzz\" if `i` is divisible by 5.\n* `answer[i]` == `i` (as a string) if none of the above conditions are true.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 10^4.\n\nOutput format: A space-separated string of the elements in the `answer` array.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 Fizz"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "1 2 Fizz 4 Buzz"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_216",
    "title": "Number of Segments in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space characters.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 3 * 10^5. `s` consists of printable ASCII characters.\n\nOutput format: An integer representing the number of segments.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "Hello, my name is John"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "Hello"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_217",
    "title": "First Unique Character in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 10^5. `s` consists of lowercase English letters.\n\nOutput format: An integer representing the index of the first unique character, or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "loveleetcode"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_218",
    "title": "Ransom Note",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `ransomNote` and `magazine`, return `True` if `ransomNote` can be constructed by using the letters from `magazine` and `False` otherwise. Each letter in `magazine` can only be used once in `ransomNote`.\n\n**Constraints**\nInput format: Two lines, first `ransomNote`, then `magazine`. Lengths of `ransomNote` and `magazine` are between 1 and 10^5. Both strings consist of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "a",
          "b"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "ab"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "aab"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_219",
    "title": "Third Maximum Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 1 and 10^4. Each number is between -2^31 and 2^31 - 1.\n\nOutput format: An integer representing the third maximum number or the maximum number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 2 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2",
          "1 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "7",
          "2 2 3 1 5 6 7"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_220",
    "title": "Island Perimeter",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water. Grid cells are connected horizontally/vertically (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. Calculate the perimeter of the island.\n\n**Constraints**\nInput format: First line has `rows` and `cols`. Next `rows` lines, each `cols` space-separated integers (0 or 1). `rows`, `cols` are between 1 and 100. Grid elements are 0 or 1.\n\nOutput format: An integer representing the island perimeter.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 4",
          "0 1 0 0",
          "1 1 1 0",
          "0 1 0 0",
          "1 1 0 0"
        ],
        "expected_output": "16"
      },
      {
        "input": [
          "1 1",
          "1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_221",
    "title": "Teemo Attacking",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nOur hero Teemo is attacking Ashe with his poisoned darts! When Teemo attacks Ashe, Ashe gets poisoned for a precisely `duration` seconds. When Teemo attacks again before the poison effect ends, the poison effect will be renewed (reset) to `duration` seconds. You are given a non-decreasing integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`. Return the total time that Ashe is poisoned.\n\n**Constraints**\nInput format: First line has `n` (length of timeSeries) and `duration`. Second line has `n` space-separated integers for `timeSeries`. `n` is between 1 and 10^4. Each time point is between 0 and 10^7. `duration` is between 1 and 10^7. `timeSeries` is sorted in non-decreasing order.\n\nOutput format: An integer representing the total poisoned time.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 4"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2 2",
          "1 2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_222",
    "title": "Harmonic Mean",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a list of positive numbers, calculate their harmonic mean. The harmonic mean of `n` numbers `x1, x2, ..., xn` is defined as `n / (1/x1 + 1/x2 + ... + 1/xn)`. If any number is zero, the harmonic mean is undefined; however, for this problem, assume all numbers are positive.\n\n**Constraints**\nInput format: An integer `n` (number of elements) followed by `n` space-separated positive floating-point numbers. `n` is between 1 and 100. Each number is between 0.1 and 1000.0.\n\nOutput format: A floating-point number representing the harmonic mean, rounded to 5 decimal places.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2",
          "1.0 1.0"
        ],
        "expected_output": "1.00000"
      },
      {
        "input": [
          "3",
          "10.0 20.0 30.0"
        ],
        "expected_output": "16.36364"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_223",
    "title": "Check if N and its Double Exist",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `arr` of integers, check if there exist two indices `i` and `j` such that `i != j` and `arr[i] == 2 * arr[j]`.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `arr`. `n` is between 2 and 500. Each number is between -1000 and 1000.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "10 2 5 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "7 1 14 11"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "3 1 7 11"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_224",
    "title": "Average of Levels in Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within `10^-5` of the actual answer will be accepted.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -2^31 and 2^31 - 1. Number of nodes is between 1 and 10^4.\n\nOutput format: A space-separated string of floating-point numbers representing the average of each level, rounded to 5 decimal places.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef averageOfLevels(root: TreeNode) -> list[float]:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3.00000 14.50000 11.00000"
      },
      {
        "input": [
          "3 1 5 null null null 7"
        ],
        "expected_output": "3.00000 3.00000 7.00000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_225",
    "title": "Subtree of Another Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the roots of two binary trees `root` and `subRoot`, return `True` if `subRoot` is a subtree of `root` of `False` otherwise. A subtree of a binary tree `root` is a tree that consists of `root` and all of its descendants. The tree `root` could also be considered as a subtree of itself.\n\n**Constraints**\nInput format: First line has a space-separated string representing `root` nodes in level order. Second line has a space-separated string representing `subRoot` nodes in level order. Node values are between -10^4 and 10^4. Number of nodes in `root` is between 1 and 2000. Number of nodes in `subRoot` is between 1 and 1000.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef isSubtree(root: TreeNode, subRoot: TreeNode) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "3 4 5 1 2",
          "4 1 2"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 4 5 1 2 null null null null 0",
          "4 1 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_226",
    "title": "Diameter of Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.\n\nThe length of a path between two nodes is represented by the number of edges between them.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -100 and 100. Number of nodes is between 1 and 10^4.\n\nOutput format: An integer representing the diameter of the tree.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef diameterOfBinaryTree(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_227",
    "title": "Merge Two Binary Trees",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two binary trees `root1` and `root2`. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values as the new node's value. Otherwise, the non-null node will be used as the node of the new tree. Return the merged tree.\n\n**Constraints**\nInput format: First line has a space-separated string representing `root1` nodes in level order. Second line has a space-separated string representing `root2` nodes in level order. Node values are between -1000 and 1000. Number of nodes in each tree is between 0 and 2000.\n\nOutput format: A space-separated string representing the merged tree nodes in level order.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef tree_to_list(root):\n    if not root:\n        return ['null']\n    result = []\n    q = [root]\n    while q:\n        node = q.pop(0)\n        if node:\n            result.append(str(node.val))\n            q.append(node.left)\n            q.append(node.right)\n        else:\n            result.append('null')\n    while result and result[-1] == 'null':\n        result.pop()\n    return ' '.join(result) if result else 'null'\n\ndef mergeTrees(root1: TreeNode, root2: TreeNode) -> TreeNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 3 2 5",
          "2 1 3 null 4 null 7"
        ],
        "expected_output": "3 4 5 5 4 null 7"
      },
      {
        "input": [
          "1",
          "1 2"
        ],
        "expected_output": "2 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_228",
    "title": "Longest Univalue Path",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the length of the longest path where every node in the path has the same value. This path may or may not pass through the root. The length of the path between two nodes is represented by the number of edges between them.\n\n**Constraints**\nInput format: A space-separated string representing the tree nodes in level order (null for empty nodes). Node values are between -1000 and 1000. Number of nodes is between 0 and 10^4.\n\nOutput format: An integer representing the length of the longest univalue path.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef longestUnivaluePath(root: TreeNode) -> int:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "5 4 5 1 1 null 5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1 1 1 1 1 1 1"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_229",
    "title": "Maximum Product of Three Numbers",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, find three numbers whose product is maximum and return this maximum product.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 3 and 10^4. Each number is between -1000 and 1000.\n\nOutput format: An integer representing the maximum product.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "24"
      },
      {
        "input": [
          "5",
          "-1 -2 -3 -4 -5"
        ],
        "expected_output": "-6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_230",
    "title": "Array Partition",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.\n\n**Constraints**\nInput format: An integer `n` (number of pairs, array length is `2n`) followed by `2n` space-separated integers for `nums`. `n` is between 1 and 10^4. Each number is between -10^4 and 10^4.\n\nOutput format: An integer representing the maximized sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2",
          "1 4 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "3",
          "6 2 6 5 1 2"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_231",
    "title": "Longest Continuous Increasing Subsequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest continuous increasing subsequence (i.e., subarray). The subsequence must be strictly increasing. A continuous increasing subsequence is defined by two indices `l` and `r` (`l < r`) such that for all `i` in the range `[l, r)`, `nums[i] < nums[i + 1]` and `r - l + 1` is the length of the subsequence.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 0 and 10^4. Each number is between -10^9 and 10^9.\n\nOutput format: An integer representing the length of the longest continuous increasing subsequence.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 3 5 4 7"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1",
          "2 2 2 2 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_232",
    "title": "Max Area of Island",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with a value of `1` in the island. Return the maximum area of an island in `grid`. If there is no island, return 0.\n\n**Constraints**\nInput format: First line has `m` and `n`. Next `m` lines, each `n` space-separated integers (0 or 1). `m`, `n` are between 1 and 50. Grid elements are 0 or 1.\n\nOutput format: An integer representing the maximum area of an island.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8 13",
          "0 0 1 0 0 0 0 1 0 0 0 0 0",
          "0 0 0 0 0 0 0 1 1 1 0 0 0",
          "0 1 1 0 1 0 0 0 0 0 0 0 0",
          "0 1 0 0 1 1 0 0 1 0 1 0 0",
          "0 1 0 0 1 1 0 0 1 1 1 0 0",
          "0 0 0 0 0 0 0 0 0 0 1 0 0",
          "0 0 0 0 0 0 0 1 1 1 0 0 0",
          "0 0 0 0 0 0 0 1 1 0 0 0 0"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "3 3",
          "0 0 0",
          "0 0 0",
          "0 0 0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_233",
    "title": "Max Consecutive Ones",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary array `nums`, return the maximum number of consecutive `1`'s in the array.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers (0 or 1) for `nums`. `n` is between 1 and 10^5. Each number is 0 or 1.\n\nOutput format: An integer representing the maximum number of consecutive ones.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 1 0 1 1 1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "1 0 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_234",
    "title": "Two Sum IV - Input is a BST",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree and a target number `k`, return `True` if there exist two distinct nodes in the tree whose values sum up to `k`, or `False` otherwise.\n\n**Constraints**\nInput format: First line has a space-separated string representing the tree nodes in level order (null for empty nodes). Second line has an integer `k`. Node values are between -10^4 and 10^4. Number of nodes is between 1 and 10^4. `k` is between -10^5 and 10^5.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    root = TreeNode(int(nodes[0]))\n    q = [root]\n    i = 1\n    while q and i < len(nodes):\n        node = q.pop(0)\n        if node:\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                q.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                q.append(node.right)\n            i += 1\n    return root\n\ndef findTarget(root: TreeNode, k: int) -> bool:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "5 3 6 2 4 null 7",
          "9"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2 1 3",
          "6"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_235",
    "title": "Reshape the Matrix",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` matrix `mat` and two integers `r` and `c`, reshape the matrix into an `r x c` matrix. The reshaping should be done by reading all of the elements of the original matrix in row-major order, and then putting them into the new matrix in row-major order.\n\nIf the `reshape` operation is possible and legal, return the new reshaped matrix; Otherwise, return the original matrix.\n\n**Constraints**\nInput format: First line has `m` and `n`. Next `m` lines, each `n` space-separated integers. Then `r` and `c` on a new line. `m`, `n`, `r`, `c` are between 1 and 100. Each number in `mat` is between -1000 and 1000.\n\nOutput format: The reshaped matrix, with rows separated by newlines and elements in each row space-separated.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 2",
          "3 4",
          "1 4"
        ],
        "expected_output": "1 2 3 4"
      },
      {
        "input": [
          "2 2",
          "1 2",
          "3 4",
          "2 4"
        ],
        "expected_output": "1 2\n3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_236",
    "title": "Student Attendance Record I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `s` representing an attendance record for a student. The record only contains the following three characters:\n\n* 'A': Absent.\n* 'L': Late.\n* 'P': Present.\n\nThe student is eligible for an attendance award if they meet both of the following conditions:\n\n* The student was absent ('A') for strictly fewer than 2 days total.\n* The student was never late ('L') for 3 or more consecutive days.\n\nReturn `True` if the student is eligible for an attendance award, or `False` otherwise.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of 'A', 'L', 'P' only.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "PPALLP"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "PPALLL"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_237",
    "title": "Reverse String II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string. If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original. Return the reversed string.\n\n**Constraints**\nInput format: First line has string `s`. Second line has integer `k`. Length of `s` is between 1 and 10^4. `k` is between 1 and 10^4. `s` consists of lowercase English letters.\n\nOutput format: The reversed string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abcdefg",
          "2"
        ],
        "expected_output": "bacdfeg"
      },
      {
        "input": [
          "abcd",
          "2"
        ],
        "expected_output": "bacd"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_238",
    "title": "Relative Ranks",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `score` of size `n`, where `score[i]` is the score of the `i`-th athlete in a competition. All the scores are guaranteed to be unique. The athletes are ranked as follows:\n\n1. The 1st place athlete's rank is \"Gold Medal\".\n2. The 2nd place athlete's rank is \"Silver Medal\".\n3. The 3rd place athlete's rank is \"Bronze Medal\".\n4. For the 4th place to the `n`-th place athlete, their rank is their placement number (i.e., the `i`-th place athlete's rank is `i`).\n\nReturn an array `answer` of size `n` where `answer[i]` is the rank of the `i`-th athlete.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `score`. `n` is between 1 and 10^4. Each score is between 0 and 10^6. All scores are unique.\n\nOutput format: A space-separated string of the ranks.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "5 4 3 2 1"
        ],
        "expected_output": "Gold Medal Silver Medal Bronze Medal 4 5"
      },
      {
        "input": [
          "3",
          "10 3 8"
        ],
        "expected_output": "Gold Medal 3 Silver Medal"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_239",
    "title": "Longest Word in Dictionary",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of strings `words`, find the longest string in `words` that can be built one character at a time by other strings in `words`. If there is more than one such string, return the one that has the smallest lexicographical order. If there is no such string, return an empty string.\n\n**Constraints**\nInput format: An integer `n` (number of words) followed by `n` space-separated strings for `words`. `n` is between 1 and 1000. Each word length is between 1 and 30. All words consist of lowercase English letters. No two words are the same.\n\nOutput format: The longest word or an empty string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "a banana app apple apply apology"
        ],
        "expected_output": "apple"
      },
      {
        "input": [
          "4",
          "a banana app apl"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_240",
    "title": "Monotonic Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn array is monotonic if it is either monotone increasing or monotone decreasing. An array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`. Given an integer array `nums`, return `True` if the given array is monotonic, or `False` otherwise.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 1 and 10^5. Each number is between -10^5 and 10^5.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "1 2 2 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5",
          "6 5 4 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "1 3 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_241",
    "title": "Fair Candy Swap",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAlice and Bob have a different number of candies. You are given two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `i`-th box of candies that Alice has, and `bobSizes[j]` is the number of candies of the `j`-th box of candies that Bob has. Each of them wishes to exchange one candy box so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the candies in their boxes. Return an integer array `answer` where `answer[0]` is the size of the candy box that Alice must exchange, and `answer[1]` is the size of the candy box that Bob must exchange. If there are multiple answers, you may return any one of them.\n\n**Constraints**\nInput format: First line has `n1` (length of aliceSizes) then `n1` space-separated integers. Second line has `n2` (length of bobSizes) then `n2` space-separated integers. `n1`, `n2` are between 1 and 10^4. Each candy size is between 1 and 10^5.\n\nOutput format: A space-separated string of two integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2",
          "1 1",
          "2",
          "2 2"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "2",
          "1 2",
          "3",
          "2 3"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_242",
    "title": "Shortest Distance to a Character",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a character `c`, return an array of integers representing the shortest distance from the character `c` in `s` to each character in `s`.\n\n**Constraints**\nInput format: First line has string `s`. Second line has character `c`. Length of `s` is between 1 and 10^4. `s` consists of lowercase English letters. `c` is a lowercase English letter and `c` is present in `s`.\n\nOutput format: A space-separated string of integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "loveleetcode",
          "e"
        ],
        "expected_output": "3 2 1 0 1 0 0 1 2 2 1 0"
      },
      {
        "input": [
          "aaab",
          "b"
        ],
        "expected_output": "3 2 1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_243",
    "title": "Minimum Time Difference",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time points in the list.\n\n**Constraints**\nInput format: An integer `n` (number of time points) followed by `n` space-separated strings for `timePoints`. `n` is between 2 and 2 * 10^4. Each time point is in \"HH:MM\" format.\n\nOutput format: An integer representing the minimum minute difference.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "23:59 00:00 00:01"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2",
          "00:00 23:59"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_244",
    "title": "Maximum Average Subarray I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` consisting of `n` elements, and an integer `k`. Find a contiguous subarray whose length is equal to `k` that has the maximum average value and return this value. Any answer with a calculation error less than `10^-5` will be accepted.\n\n**Constraints**\nInput format: First line has `n` and `k`. Second line has `n` space-separated integers for `nums`. `n` is between 1 and 10^5. `k` is between 1 and `n`. Each number is between -10^4 and 10^4.\n\nOutput format: A floating-point number representing the maximum average subarray, rounded to 5 decimal places.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5 4",
          "1 12 -5 -6 50 3"
        ],
        "expected_output": "12.75000"
      },
      {
        "input": [
          "1 1",
          "5"
        ],
        "expected_output": "5.00000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_245",
    "title": "Detect Capital",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWe define the usage of capitals in a word to be right if one of the following cases holds:\n\n1. All letters in this word are capitals, like \"USA\".\n2. All letters in this word are not capitals, like \"leetcode\".\n3. Only the first letter in this word is capital, like \"Google\".\n\nGiven a string `word`, return `True` if the usage of capitals in it is right.\n\n**Constraints**\nInput format: A single string `word`. Length of `word` is between 1 and 100. `word` consists of lowercase and uppercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "USA"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "FlaG"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_246",
    "title": "Image Smoother",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn image smoother is a filter that can remove noise from images. Given an `m x n` integer matrix `img` representing a grayscale image, return the image after applying the smoother to each cell of it. An image smoother takes the average of the 8 surrounding cells and the cell itself (total 9 cells) to create a new cell. If a cell has less than 8 surrounding cells, then use as many as you can.\n\n**Constraints**\nInput format: First line has `m` and `n`. Next `m` lines, each `n` space-separated integers. `m`, `n` are between 1 and 200. Each `img[i][j]` is between 0 and 255.\n\nOutput format: The smoothed image, with rows separated by newlines and elements in each row space-separated.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 1 1",
          "1 0 1",
          "1 1 1"
        ],
        "expected_output": "0 0 0\n0 0 0\n0 0 0"
      },
      {
        "input": [
          "3 3",
          "2 3 4",
          "5 6 7",
          "8 9 10"
        ],
        "expected_output": "4 4 5\n5 6 6\n7 7 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_247",
    "title": "Valid Palindrome II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return `True` if the `s` can be a palindrome after deleting at most one character from it.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 10^5. `s` consists of lowercase English letters.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "aba"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abca"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abc"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_248",
    "title": "Merge Sorted Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. Merge `nums1` and `nums2` into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are `0`'s and should be ignored. `nums2` has a length of `n`.\n\n**Constraints**\nInput format: First line has `m` then `n`. Second line has `m+n` space-separated integers for `nums1`. Third line has `n` space-separated integers for `nums2`. `m`, `n` are between 0 and 200. `m + n` is between 1 and 200. Each number is between -10^9 and 10^9.\n\nOutput format: A space-separated string of integers representing the merged `nums1` array.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 2 3 0 0 0",
          "2 5 6"
        ],
        "expected_output": "1 2 2 3 5 6"
      },
      {
        "input": [
          "1 0",
          "1",
          ""
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_249",
    "title": "Search Insert Position",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted array of distinct integers `nums` and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n**Constraints**\nInput format: First line has `n` (array length) then `n` space-separated integers for `nums`. Second line has `target`. `n` is between 1 and 10^4. Each number is between -10^4 and 10^4. `nums` is sorted in ascending order and contains distinct values. `target` is between -10^4 and 10^4.\n\nOutput format: An integer representing the insert position.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 3 5 6",
          "5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4",
          "1 3 5 6",
          "2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_250",
    "title": "Plus One",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a large integer represented as an integer array `digits`, where each `digits[i]` is the `i`-th digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s, except for the number `0` itself. Increment the large integer by one and return the resulting array of digits.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `digits`. `n` is between 1 and 100. Each number is between 0 and 9. `digits` does not contain any leading `0`'s, except for the zero itself.\n\nOutput format: A space-separated string of integers representing the incremented digits.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "1 2 4"
      },
      {
        "input": [
          "3",
          "4 3 2 1"
        ],
        "expected_output": "4 3 2 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_251",
    "title": "Sqrt(x)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-negative integer `x`, compute and return the square root of `x`. Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.\n\n**Constraints**\nInput format: A single integer `x`. `x` is between 0 and 2^31 - 1.\n\nOutput format: An integer representing the square root.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_252",
    "title": "Single Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 1 and 3 * 10^4. Each number is between -3 * 10^4 and 3 * 10^4. Each element in the array appears twice except for one element which appears only once.\n\nOutput format: An integer representing the single number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "2 2 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "4 1 2 1 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_253",
    "title": "Happy Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite an algorithm to determine if a number `n` is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return `True` if `n` is a happy number, and `False` if not.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 2^31 - 1.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "19"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_254",
    "title": "Count Primes",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the number of prime numbers that are strictly less than `n`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 5 * 10^6.\n\nOutput format: An integer representing the count of prime numbers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_255",
    "title": "Isomorphic Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, determine if they are isomorphic. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of the characters. No two characters may map to the same character, but a character may map to itself.\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. Lengths of `s` and `t` are between 1 and 5 * 10^4. Both strings consist of any valid ASCII character.\n\nOutput format: The string \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "egg",
          "add"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "foo",
          "bar"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_256",
    "title": "Reverse Linked List II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.\n\n**Constraints**\nInput format: First line has `left` and `right`. Second line has a space-separated string of integers representing the linked list nodes. 'null' represents the end of the list. Number of nodes is between 1 and 500. Node values are between -500 and 500. `1 <= left <= right <= n`.\n\nOutput format: A space-separated string of integers representing the modified linked list.",
    "starter_code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef build_list(nodes):\n    if not nodes or nodes[0] == 'null':\n        return None\n    head = ListNode(int(nodes[0]))\n    current = head\n    for val_str in nodes[1:]:\n        if val_str == 'null':\n            break\n        current.next = ListNode(int(val_str))\n        current = current.next\n    return head\n\ndef list_to_str(head):\n    res = []\n    current = head\n    while current:\n        res.append(str(current.val))\n        current = current.next\n    return ' '.join(res) if res else 'null'\n\ndef reverseBetween(head: ListNode, left: int, right: int) -> ListNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "2 4",
          "1 2 3 4 5 null"
        ],
        "expected_output": "1 4 3 2 5"
      },
      {
        "input": [
          "1 1",
          "5 null"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_257",
    "title": "Intersection of Two Arrays II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n\n**Constraints**\nInput format: First line has `n1` (length of nums1) then `n1` space-separated integers. Second line has `n2` (length of nums2) then `n2` space-separated integers. `n1`, `n2` are between 1 and 1000. Each number is between 0 and 1000.\n\nOutput format: A space-separated string of integers representing the intersection.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 2 1",
          "2",
          "2 2"
        ],
        "expected_output": "2 2"
      },
      {
        "input": [
          "4",
          "4 9 5",
          "5",
          "9 4 9 8 4"
        ],
        "expected_output": "4 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_258",
    "title": "Find All Numbers Disappeared in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.\n\n**Constraints**\nInput format: An integer `n` (array length) followed by `n` space-separated integers for `nums`. `n` is between 1 and 10^5. Each number is between 1 and `n`.\n\nOutput format: A space-separated string of integers representing the disappeared numbers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8",
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "5 6"
      },
      {
        "input": [
          "2",
          "1 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_259",
    "title": "K-diff Pairs in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` and an integer `k`, return the number of unique `k`-diff pairs in the array. A `k`-diff pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n* `0 <= i < j < nums.length`\n* `|nums[i] - nums[j]| == k`\n\nNotice that `|val|` denotes the absolute value of `val`.\n\n**Constraints**\nInput format: First line has `n` (array length) then `n` space-separated integers for `nums`. Second line has `k`. `n` is between 1 and 10^4. Each number is between -10^7 and 10^7. `k` is between 0 and 10^7.\n\nOutput format: An integer representing the number of unique k-diff pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "3 1 4 1 5",
          "2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "5",
          "1 2 3 4 5",
          "1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_260",
    "title": "Count Vowels and Consonants",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string, count the number of vowels and consonants in it. Vowels are 'a', 'e', 'i', 'o', 'u' (case-insensitive). All other English letters are consonants.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of English letters and spaces.\n\nOutput format: Two space-separated integers, first the count of vowels, then consonants.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "3 7"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "1 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_261",
    "title": "Check if String Contains All Alphabets",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string, determine if it contains every letter of the alphabet (a-z) at least once. Ignore case and non-alphabetic characters.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "The quick brown fox jumps over the lazy dog"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_262",
    "title": "Reverse Words in a Sentence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sentence, reverse the order of words. Words are separated by a single space. No leading or trailing spaces.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 500. `s` consists of English letters and spaces.\n\nOutput format: The string with words reversed.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "world hello"
      },
      {
        "input": [
          "the quick brown fox"
        ],
        "expected_output": "fox brown quick the"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_263",
    "title": "Find Second Smallest Element in Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers, find the second smallest element. Assume there are at least two distinct elements.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 1000. Each number is between -10^4 and 10^4.\n\nOutput format: An integer representing the second smallest element.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "3 1 4 1 5"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "4",
          "10 20 5 15"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_264",
    "title": "Check if Array is Sorted and Rotated",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums`, return `True` if it is sorted in non-decreasing order and rotated at some pivot, or `False` otherwise. An array rotated `x` positions means `nums[i]` becomes `nums[(i+x) % n]`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Each number is between 1 and 1000.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "3 4 5 1 2"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "2 1 3 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_265",
    "title": "Find Common Elements in Two Sorted Arrays",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two sorted arrays, find the common elements in them. Return them in ascending order. Each element in the result must be unique.\n\n**Constraints**\nInput format: First line has `n1` then `n1` integers. Second line has `n2` then `n2` integers. `n1`, `n2` are between 1 and 1000. Numbers are between 1 and 1000.\n\nOutput format: A space-separated string of common integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 2 3",
          "3",
          "2 3 4"
        ],
        "expected_output": "2 3"
      },
      {
        "input": [
          "3",
          "5 6 7",
          "3",
          "8 9 10"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_266",
    "title": "Check if Number is Palindrome",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `x`, return `True` if `x` is a palindrome integer. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not.\n\n**Constraints**\nInput format: A single integer `x`. `x` is between -2^31 and 2^31 - 1.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "121"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "-121"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_267",
    "title": "Count Primes up to N",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the number of prime numbers that are strictly less than `n`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 10^5.\n\nOutput format: An integer representing the count of prime numbers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_268",
    "title": "Reverse Integer",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-2^31, 2^31 - 1]`, then return 0.\n\n**Constraints**\nInput format: A single integer `x`. `x` is between -2^31 and 2^31 - 1.\n\nOutput format: An integer representing the reversed number or 0 if overflow.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "321"
      },
      {
        "input": [
          "-123"
        ],
        "expected_output": "-321"
      },
      {
        "input": [
          "2147483647"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_269",
    "title": "Check if String is a Permutation of Another",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s1` and `s2`, return `True` if `s2` contains a permutation of `s1`, or `False` otherwise. In other words, return `True` if `s2` contains one of the permutations of `s1`. Strings consist of lowercase English letters.\n\n**Constraints**\nInput format: Two lines, first `s1`, then `s2`. Lengths are between 1 and 10^4.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "ab",
          "eidbaooo"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "ab",
          "eidboaoo"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_270",
    "title": "Sum of Two Smallest Numbers in Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of at least four positive integers, return the sum of the two smallest positive numbers.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 4 and 1000. Each number is between 1 and 10^5.\n\nOutput format: An integer representing the sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "19 5 42 2 77"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "4",
          "10 343 345 3"
        ],
        "expected_output": "13"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_271",
    "title": "Find the Difference of Two Arrays",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two 0-indexed integer arrays `nums1` and `nums2`, return a list `answer` of size 2 where:\n- `answer[0]` is a list of all distinct integers in `nums1` which are not present in `nums2`.\n- `answer[1]` is a list of all distinct integers in `nums2` which are not present in `nums1`.\nReturn the lists in any order.\n\n**Constraints**\nInput format: First line `n1` then `n1` integers for `nums1`. Second line `n2` then `n2` integers for `nums2`. `n1, n2` are between 1 and 1000. Numbers are between -1000 and 1000.\n\nOutput format: Two lines, each with space-separated integers for `answer[0]` and `answer[1]` respectively.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "2",
          "2 4 6"
        ],
        "expected_output": "1 3\n4 6"
      },
      {
        "input": [
          "4",
          "1 2 3 4",
          "4",
          "1 2 3 4"
        ],
        "expected_output": "\n"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_272",
    "title": "Remove Duplicates from Sorted Array II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted array `nums`, remove the duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same. Return the new length.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 0 and 3 * 10^4. Numbers are between -10^4 and 10^4.\n\nOutput format: An integer representing the new length.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8",
          "1 1 1 2 2 3 3 3"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "2",
          "1 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_273",
    "title": "Plus One (Large Number)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a large integer represented as an integer array `digits`, where each `digits[i]` is the `i`-th digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading zeros, except for the number 0 itself. Increment the large integer by one and return the resulting array of digits.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Each digit is between 0 and 9.\n\nOutput format: A space-separated string of digits representing the incremented number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "1 2 4"
      },
      {
        "input": [
          "1",
          "9"
        ],
        "expected_output": "1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_274",
    "title": "Add Binary Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two binary strings `a` and `b`, return their sum as a binary string.\n\n**Constraints**\nInput format: Two lines, each with a binary string. Lengths are between 1 and 10^4. Strings consist only of '0' or '1'. No leading zeros except for the string \"0\" itself.\n\nOutput format: A string representing the sum in binary.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "11",
          "1"
        ],
        "expected_output": "100"
      },
      {
        "input": [
          "1010",
          "1011"
        ],
        "expected_output": "10101"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_275",
    "title": "Sqrt(x)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-negative integer `x`, compute and return the square root of `x`. Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.\n\n**Constraints**\nInput format: A single integer `x`. `x` is between 0 and 2^31 - 1.\n\nOutput format: An integer representing the square root.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_276",
    "title": "Factorial Trailing Zeros (Revisited)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the number of trailing zeros in `n!`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 10^9. (Previously 10^4, now larger for more advanced understanding of problem.)\n\nOutput format: An integer representing the count of trailing zeros.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "25"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "100"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_277",
    "title": "Find the First Bad Version",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\nYou are given an API `isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n\n**Constraints**\nInput format: An integer `n` (total versions) followed by an integer `first_bad` (the actual first bad version, hidden from the function). `n` is between 1 and 2^31 - 1. `first_bad` is between 1 and `n`.\n\nOutput format: An integer representing the first bad version.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "4"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_278",
    "title": "Reverse Words in a String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an input string `s`, reverse the order of the *words*. A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Your reversed string should not contain leading or trailing spaces or multiple spaces between two words.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 10^5.\n\nOutput format: The string with words reversed.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "the sky is blue"
        ],
        "expected_output": "blue is sky the"
      },
      {
        "input": [
          "  hello world  "
        ],
        "expected_output": "world hello"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_279",
    "title": "Valid Mountain Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `arr`, return `True` if and only if it is a valid mountain array. Recall that `arr` is a mountain array if and only if:\n- `arr.length >= 3`\n- There exists some `i` with `0 < i < arr.length - 1` such that:\n    - `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    - `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 0 and 10^4. Each number is between 0 and 10^4.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "0 3 2 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "3 5 5 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_280",
    "title": "Check if N and its Double Exist",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `arr` of integers, check if there exist two indices `i` and `j` such that `i != j`, `0 <= i, j < arr.length`, and `arr[i] == 2 * arr[j]`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 500. Each number is between -1000 and 1000.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "10 2 5 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "7 1 14 11"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "3 1 7 11"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_281",
    "title": "Contains Duplicate II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return `True` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.\n\n**Constraints**\nInput format: First line `n` then `n` integers for `nums`. Second line `k`. `n` is between 1 and 10^5. `k` is between 0 and 10^5. Numbers are between -10^9 and 10^9.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 3 1",
          "3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 0 1 1",
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5",
          "1 2 3 1 2",
          "2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_282",
    "title": "Intersection of Two Arrays II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result should appear as many times as it shows in both arrays and you may return the result in any order.\n\n**Constraints**\nInput format: First line `n1` then `n1` integers for `nums1`. Second line `n2` then `n2` integers for `nums2`. `n1`, `n2` are between 1 and 1000. Each number is between 0 and 1000.\n\nOutput format: A space-separated string of integers representing the intersection.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 2 1",
          "2",
          "2 2"
        ],
        "expected_output": "2 2"
      },
      {
        "input": [
          "4",
          "4 9 5",
          "4",
          "9 4 9 8 4"
        ],
        "expected_output": "4 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_283",
    "title": "Move Zeroes",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, move all 0's to the end of it while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -2^31 and 2^31 - 1.\n\nOutput format: A space-separated string of integers representing the modified array.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "0 1 0 3 12"
        ],
        "expected_output": "1 3 12 0 0"
      },
      {
        "input": [
          "3",
          "0 0 1"
        ],
        "expected_output": "1 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_284",
    "title": "Third Maximum Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the third distinct maximum number in this array. If the third distinct maximum does not exist, return the maximum number.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -2^31 and 2^31 - 1.\n\nOutput format: An integer representing the third distinct maximum or the maximum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 2 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4",
          "1 2 2 5"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_285",
    "title": "Find All Numbers Disappeared in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^5. Numbers are between 1 and `n`.\n\nOutput format: A space-separated string of integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8",
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "5 6"
      },
      {
        "input": [
          "2",
          "1 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_286",
    "title": "Max Consecutive Ones",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary array `nums`, return the maximum number of consecutive 1's in the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers (0s or 1s) on a new line. `n` is between 1 and 10^5. Numbers are 0 or 1.\n\nOutput format: An integer representing the maximum count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 1 0 1 1 1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "1 0 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_287",
    "title": "Find Pivot Index",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums`, calculate the pivot index of this array.\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\nReturn the leftmost pivot index. If no such index exists, return -1.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Each number is between -1000 and 1000.\n\nOutput format: An integer representing the pivot index or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 7 3 6 5 6"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3",
          "1 2 3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_288",
    "title": "Isomorphic Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, determine if they are isomorphic. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.\nAll occurrences of a character must be replaced with another character while preserving the order of the characters. No two characters may map to the same character, but a character may map to itself.\n\n**Constraints**\nInput format: Two lines, first `s`, then `t`. Lengths are between 1 and 5 * 10^4. Strings consist of any valid ASCII character.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "egg",
          "add"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "foo",
          "bar"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_289",
    "title": "Word Pattern",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a `pattern` and a string `s`, find if `s` follows the same pattern. Here `follow` means a full match, such that there is a one-to-one correspondence between a letter in `pattern` and a non-empty word in `s`. Letters in `pattern` are lowercase English letters, and words in `s` are lowercase English letters separated by a single space.\n\n**Constraints**\nInput format: First line `pattern` (string). Second line `s` (string). `pattern` length is between 1 and 300. `s` length is between 1 and 3000. Words in `s` are separated by single spaces.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abba",
          "dog cat cat dog"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abba",
          "dog cat cat fish"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_290",
    "title": "Reverse Linked List",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, reverse the list, and return the reversed list. Represent the linked list as a space-separated sequence of integers, with `null` representing the end of the list.\n\n**Constraints**\nInput format: A space-separated string representing the linked list nodes. Number of nodes is between 0 and 5000. Node values are between -5000 and 5000.\n\nOutput format: A space-separated string representing the reversed linked list.",
    "starter_code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head: ListNode) -> ListNode:\n    # Implement your solution here\n    pass",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "1 2"
        ],
        "expected_output": "2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_291",
    "title": "Contains Duplicate III",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return `True` if there are two distinct indices `i` and `j` in the array such that `abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`. Return `False` otherwise.\n\n**Constraints**\nInput format: First line `n` then `n` integers for `nums`. Second line `k` then `t`. `n` is between 0 and 2 * 10^4. `k` is between 0 and 10^4. `t` is between 0 and 2^31 - 1. Numbers are between -2^31 and 2^31 - 1.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 3 1",
          "3 0"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 5 9 1 5 9",
          "2 3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_292",
    "title": "Missing Ranges",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are within the inclusive range. A number `x` is considered missing if `lower <= x <= upper` and `x` is not in `nums`. Return the shortest sorted list of ranges that cover all the missing numbers.\n\n**Constraints**\nInput format: First line `lower` then `upper`. Second line `n` then `n` integers for `nums`. `lower, upper` are between -10^9 and 10^9. `n` is between 0 and 100. `nums` elements are unique and sorted within `[lower, upper]`.\n\nOutput format: A comma-separated string of ranges. Each range is either a single number (e.g., \"5\") or a range (e.g., \"0->2\").",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "0",
          "99",
          "5",
          "0 1 3 50 75"
        ],
        "expected_output": "2,4->49,51->74,76->99"
      },
      {
        "input": [
          "-10",
          "10",
          "0",
          ""
        ],
        "expected_output": "-10->10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_293",
    "title": "Compare Version Numbers",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two version numbers, `version1` and `version2`, compare them. Version numbers consist of one or more revisions joined by a dot `'.'`. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character.\nReturn 1 if `version1 > version2`, -1 if `version1 < version2`, and 0 otherwise.\n\n**Constraints**\nInput format: Two lines, first `version1`, then `version2`. Lengths are between 1 and 500. Revisions are between 0 and 9.9.999999999999999E+307.\n\nOutput format: An integer (1, -1, or 0).",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1.01",
          "1.001"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1.0",
          "1.0.0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "0.1",
          "1.1"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_294",
    "title": "Reverse String II",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string. If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, reverse the first `k` characters and leave the other as original.\n\n**Constraints**\nInput format: First line `s`. Second line `k`. Length of `s` is between 1 and 10^4. `k` is between 1 and 10^4. `s` consists of lowercase English letters.\n\nOutput format: The modified string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abcdefg",
          "2"
        ],
        "expected_output": "bacdfeg"
      },
      {
        "input": [
          "abcd",
          "2"
        ],
        "expected_output": "bacd"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_295",
    "title": "Check if All A's Appears Before All B's",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` consisting of only the characters 'a' and 'b', return `True` if every 'a' appears before every 'b' in the string. Otherwise, return `False`.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 100. `s` consists of 'a' and 'b'.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "aaabbb"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abab"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_296",
    "title": "Largest Odd Number in String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `num` representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of `num`, or an empty string `\"\"` if no odd integer exists.\nA substring is a contiguous sequence of characters within a string.\n\n**Constraints**\nInput format: A single string `num`. Length of `num` is between 1 and 10^5. `num` consists of digits and does not contain any leading zeros.\n\nOutput format: A string representing the largest odd number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "52"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "4206"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "35427"
        ],
        "expected_output": "35427"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_297",
    "title": "Find Closest Number to Zero",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of size `n`, return the number in `nums` that is closest to 0. If there are multiple answers, return the largest such number.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 1000. Each number is between -10^5 and 10^5.\n\nOutput format: An integer.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "-4 -2 1 4 8"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "2 -1 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_298",
    "title": "Sum of Subarray Minimums",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `arr`, find the sum of `min(b)` for every (contiguous) subarray `b` of `arr`. Since the answer may be large, return the answer modulo 10^9 + 7.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Each number is between 1 and 10^5.\n\nOutput format: An integer representing the sum modulo 10^9 + 7.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "3 1 2 4"
        ],
        "expected_output": "17"
      },
      {
        "input": [
          "1",
          "11"
        ],
        "expected_output": "11"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_299",
    "title": "Count Square Sum Triples",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA square sum triple `(a, b, c)` is a triple of integers such that `a^2 + b^2 = c^2`. Given an integer `n`, return the number of square sum triples such that `1 <= a, b, c <= n`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 250.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_300",
    "title": "Count Symmetric Integers",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two positive integers `low` and `high`, return the number of symmetric integers in the range `[low, high]`. A positive integer is called symmetric if the sum of the first half of its digits is equal to the sum of the second half of its digits. For example, 1203 is symmetric because 1+2 = 0+3. Note that the number of digits in the integer must be even.\n\n**Constraints**\nInput format: First line `low`. Second line `high`. `low, high` are between 1 and 10^4.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1",
          "100"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "1200",
          "1230"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_301",
    "title": "Minimum Absolute Difference in BST",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\n**Constraints**\nInput format: A space-separated string representing the BST nodes in level order. Number of nodes is between 2 and 10^4. Node values are between 0 and 10^5.\n\nOutput format: An integer representing the minimum absolute difference.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right",
    "test_cases": [
      {
        "input": [
          "4 2 6 1 3"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 0 48 null null 12 49"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_302",
    "title": "Average of Levels in Binary Tree",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10^-5 of the actual answer will be accepted.\n\n**Constraints**\nInput format: A space-separated string representing the binary tree nodes in level order. Number of nodes is between 1 and 10^4. Node values are between -2^31 and 2^31 - 1.\n\nOutput format: A space-separated string of floats, each rounded to 5 decimal places.",
    "starter_code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3.00000 14.50000 11.00000"
      },
      {
        "input": [
          "3 1 5"
        ],
        "expected_output": "3.00000 3.00000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_303",
    "title": "Check if a Number is Fascinating",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer `n` that consists of exactly three digits. We call the integer `n` fascinating if, after concatenating `n`, `2 * n`, and `3 * n`, the resulting string contains all the digits from 1 to 9 exactly once and does not contain any 0s.\nReturn `True` if `n` is fascinating, otherwise return `False`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 100 and 999.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "192"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "100"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "789"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_304",
    "title": "Find the K-Beauty of a Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe k-beauty of an integer `num` is defined as the number of substrings of `num`'s string representation `s` such that:\n- `s` is a substring of `num` having a length of `k`.\n- `s` is not a divisor of `num`.\nReturn the k-beauty of `num`.\n\n**Constraints**\nInput format: First line `num` (integer). Second line `k` (integer). `num` is between 1 and 10^9. `k` is between 1 and the number of digits in `num`.\n\nOutput format: An integer representing the k-beauty.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "240",
          "2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "430043",
          "2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_305",
    "title": "Maximum Number of Words You Can Type",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is a text editor with a keyboard. You are given a string `text` and a string `brokenLetters`. You can type `text` by using the keyboard. Initially, all keys are working. However, some of the keys are broken. You are given a string `brokenLetters` consisting of distinct characters, indicating the keys that are broken. A word is typed if all of its letters are typed (i.e., no broken keys are needed). Return the number of words in `text` that can be typed.\n\n**Constraints**\nInput format: First line `text`. Second line `brokenLetters`. Length of `text` is between 1 and 10^4. Length of `brokenLetters` is between 0 and 26. `text` consists of lowercase English letters and spaces. `brokenLetters` consists of distinct lowercase English letters.\n\nOutput format: An integer representing the count of typable words.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "hello world",
          "ad"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "leet code",
          "lt"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_306",
    "title": "Averages in a Stream",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a stream of integers and an integer `k`, return a new array where each element is the average of the last `k` numbers in the stream. If there are fewer than `k` numbers, average all available numbers. All averages should be floats.\n\n**Constraints**\nInput format: First line `n` (number of elements) then `n` integers for the stream. Second line `k`. `n` is between 1 and 10^4. `k` is between 1 and `n`. Numbers are between -10^5 and 10^5.\n\nOutput format: A space-separated string of floats, each rounded to 2 decimal places.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "10 20 30 40 50",
          "3"
        ],
        "expected_output": "10.00 15.00 20.00 30.00 40.00"
      },
      {
        "input": [
          "3",
          "1 2 3",
          "5"
        ],
        "expected_output": "1.00 1.50 2.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_307",
    "title": "Check if Number Has Equal Digit Count and Digit Value",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed string `num` of length `n` consisting of digits. Return `True` if for every index `i` in the range `0 <= i < n`, the digit `i` occurs `num[i]` times in `num`, otherwise return `False`.\n\n**Constraints**\nInput format: A single string `num`. Length of `num` is between 1 and 10. `num` consists of digits from '0' to '9'.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1210"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "030"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_308",
    "title": "Maximum Product of Two Elements in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the array of integers `nums`, you will choose two different indices `i` and `j` of that array. Return the maximum value of `(nums[i]-1)*(nums[j]-1)`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 500. Numbers are between 1 and 1000.\n\nOutput format: An integer representing the maximum product.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "3 4 5 2"
        ],
        "expected_output": "12"
      },
      {
        "input": [
          "2",
          "1 5"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_309",
    "title": "Sum of All Odd Length Subarrays",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of positive integers `arr`, calculate the sum of all possible odd-length subarrays of `arr`.\nA subarray is a contiguous subsequence of the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Numbers are between 1 and 1000.\n\nOutput format: An integer representing the sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 4 2 5 3"
        ],
        "expected_output": "58"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_310",
    "title": "Count the Number of Consistent Strings",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `allowed` consisting of distinct characters and an array of strings `words`. A string is consistent if all characters in the string appear in the string `allowed`. Return the number of consistent strings in the array `words`.\n\n**Constraints**\nInput format: First line `allowed`. Second line `n` (number of words) then `n` space-separated words. `allowed` length is between 1 and 26. `n` is between 1 and 1000. Each word length is between 1 and 10. All strings consist of lowercase English letters.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "ab",
          "3",
          "ad bd aaab aab bc"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "abc",
          "3",
          "a b c ab ac bc abc"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_311",
    "title": "Check if Word Equals Summation of Two Words",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe letter value of a letter is its position in the alphabet (i.e., 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.). The numerical value of some string of lowercase English letters is the concatenation of the letter values of each of its letters, which is then converted into an integer.\nGiven three strings `firstWord`, `secondWord`, and `targetWord`, return `True` if the summation of the numerical values of `firstWord` and `secondWord` equals the numerical value of `targetWord`. Return `False` otherwise.\n\n**Constraints**\nInput format: Three lines, each with a string. Lengths are between 1 and 8. Strings consist of lowercase English letters.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "acb",
          "cba",
          "cdb"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "aaa",
          "a",
          "aab"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_312",
    "title": "Maximum Ascending Subarray Sum",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of positive integers `nums`, return the maximum possible sum of an ascending subarray. A subarray is ascending if `nums[i] < nums[i+1]` for all `i` in the subarray.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Numbers are between 1 and 100.\n\nOutput format: An integer representing the maximum sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "10 20 30 5 10 50"
        ],
        "expected_output": "60"
      },
      {
        "input": [
          "3",
          "10 20 30"
        ],
        "expected_output": "60"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_313",
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary string `s` (consisting of only '0's and '1's), return `True` if there is at most one contiguous segment of ones and it is not followed by any ones. Return `False` otherwise.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 100. `s` consists of '0' or '1'.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1001"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "110"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_314",
    "title": "Longest Nice Substring",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA string `s` is nice if, for every letter of the alphabet that appears in `s`, its uppercase and lowercase counterparts also appear in `s`. For example, \"abABB\" is nice because 'a' and 'A' appear, and 'b' and 'B' appear. \"abA\" is not because 'B' does not appear. Given a string `s`, return the longest substring of `s` that is nice. If there are multiple, return the one with the smallest starting index.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 100. `s` consists of uppercase and lowercase English letters.\n\nOutput format: A string representing the longest nice substring.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "YazaAay"
        ],
        "expected_output": "aAa"
      },
      {
        "input": [
          "Bb"
        ],
        "expected_output": "Bb"
      },
      {
        "input": [
          "c"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_315",
    "title": "Count Elements With Strictly Smaller and Greater Elements",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the number of elements that have both a strictly smaller and a strictly greater element in the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Numbers are between -10^5 and 10^5.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "11 7 2 15"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3",
          "1 1 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_316",
    "title": "Minimum Sum of Four Digit Number After Splitting Digits",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a positive integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the digits of `num`. Each digit must be used exactly once. Leading zeros are allowed. Return the minimum possible sum of `new1` and `new2`.\n\n**Constraints**\nInput format: A single integer `num` (4 digits). `num` is between 1000 and 9999.\n\nOutput format: An integer representing the minimum sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2932"
        ],
        "expected_output": "52"
      },
      {
        "input": [
          "4009"
        ],
        "expected_output": "13"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_317",
    "title": "Convert the Temperature",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a non-negative floating point number `celsius` that denotes the temperature in Celsius. Convert Celsius to Fahrenheit and Kelvin. Return the answer as a string of two space-separated floating-point numbers, corresponding to Kelvin and Fahrenheit respectively. Your answer must be accurate to within 10^-5 of the actual answer. (Kelvin = Celsius + 273.15, Fahrenheit = Celsius * 1.80 + 32.00)\n\n**Constraints**\nInput format: A single float `celsius`. `celsius` is between 0.0 and 1000.0.\n\nOutput format: A space-separated string of two floats, each rounded to 5 decimal places.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "36.50"
        ],
        "expected_output": "309.65000 97.70000"
      },
      {
        "input": [
          "122.11"
        ],
        "expected_output": "395.26000 251.79800"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_318",
    "title": "Find Resultant Array After Removing Anagrams",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed string array `words`, where `words[i]` is the `i`-th word. In one operation, you can select any index `i` such that `0 < i < words.length` and `words[i-1]` and `words[i]` are anagrams, and delete `words[i]`. Continue until no such operation can be performed. Return `words` after performing all such operations. The order of the resultant array should be the same as the original array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` space-separated strings. `n` is between 1 and 100. Each word length is between 1 and 10. Words consist of lowercase English letters.\n\nOutput format: A space-separated string of words.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "abba abab baba xxyy yyx xxyy"
        ],
        "expected_output": "abba xxyy"
      },
      {
        "input": [
          "2",
          "a b"
        ],
        "expected_output": "a b"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_319",
    "title": "Count Integers With Even Digit Sum",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer `num`, return the number of positive integers less than or equal to `num` whose digit sums are even.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 1000.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "30"
        ],
        "expected_output": "14"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_320",
    "title": "Find Kth Positive Missing Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `arr` of positive integers sorted in a strictly increasing order, and an integer `k`. Return the `k`-th positive integer that is missing from this array.\n\n**Constraints**\nInput format: First line `n` then `n` integers for `arr`. Second line `k`. `n` is between 1 and 1000. `k` is between 1 and 1000. Numbers are between 1 and 1000.\n\nOutput format: An integer representing the `k`-th missing positive number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "2 3 4 7 11",
          "5"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "3",
          "1 2 3",
          "1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_321",
    "title": "Calculate Amount Paid in Taxes",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed 2D integer array `brackets` where `brackets[i] = [upper_i, percent_i]` means that the `i`-th tax bracket has an upper limit of `upper_i` and is taxed at a `percent_i` percentage. The brackets are sorted by `upper_i` in increasing order. You are also given an integer `income`.\nCalculate the total amount of tax paid.\n\n**Constraints**\nInput format: First line `n` (number of brackets). Next `n` lines, each with `upper_i` and `percent_i`. Then `income`. `n` is between 1 and 100. `upper_i` and `percent_i` are between 1 and 100. `income` is between 0 and 1000.\n\nOutput format: A float representing the total tax paid, rounded to 5 decimal places.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "10 10",
          "20 20",
          "30 30",
          "20"
        ],
        "expected_output": "3.00000"
      },
      {
        "input": [
          "2",
          "3 50",
          "7 10",
          "0"
        ],
        "expected_output": "0.00000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_322",
    "title": "Check if Number Has Same First and Last Digit",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-negative integer `num`, return `True` if its first digit and last digit are the same, otherwise return `False`.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 0 and 10^9.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1231"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "456"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_323",
    "title": "Merge Strings Alternately",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\n**Constraints**\nInput format: First line `word1`. Second line `word2`. Lengths are between 1 and 100. Strings consist of lowercase English letters.\n\nOutput format: The merged string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abc",
          "pqr"
        ],
        "expected_output": "apbqcr"
      },
      {
        "input": [
          "ab",
          "pqrs"
        ],
        "expected_output": "apbqrs"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_324",
    "title": "Check if One String Swap Can Make Strings Equal",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two strings `s1` and `s2` of equal length. You can choose to swap two characters in `s1` (at different indices) or leave them as they are. Return `True` if it is possible to make `s1` and `s2` equal by at most one string swap, otherwise return `False`.\n\n**Constraints**\nInput format: First line `s1`. Second line `s2`. Lengths are between 1 and 100. Strings consist of lowercase English letters.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "bank",
          "kanb"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "attack",
          "defend"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "ac"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_325",
    "title": "Find the Kth Factor of N",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two positive integers `n` and `k`. A factor of an integer `n` is an integer `i` where `n % i == 0`. Consider all factors of `n` sorted in ascending order. Return the `k`-th factor in this list or -1 if `n` has less than `k` factors.\n\n**Constraints**\nInput format: First line `n`. Second line `k`. `n` is between 1 and 1000. `k` is between 1 and `n`.\n\nOutput format: An integer representing the `k`-th factor or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "12",
          "3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "7",
          "2"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_326",
    "title": "Maximum Product of Three Numbers",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, find three numbers whose product is maximum and return the maximum product.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 3 and 10^4. Numbers are between -1000 and 1000.\n\nOutput format: An integer representing the maximum product.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "1 2 3"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "6",
          "1 2 3 4"
        ],
        "expected_output": "24"
      },
      {
        "input": [
          "4",
          "-1 -2 -3"
        ],
        "expected_output": "-6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_327",
    "title": "Shortest Unsorted Continuous Subarray",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order. Return the length of this shortest such subarray.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. Numbers are between -10^5 and 10^5.\n\nOutput format: An integer representing the length.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "7",
          "2 6 4 8 10 9 15"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "4",
          "1 2 3 4"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_328",
    "title": "Degree of an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array of non-negative integers `nums`, the degree of this array is defined as the maximum frequency of any one of its elements. Your task is to find the smallest possible length of a (contiguous) subarray of `nums` that has the same degree as `nums`.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 5 * 10^4. Numbers are between 0 and 49999.\n\nOutput format: An integer representing the smallest length.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 2 2 3 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "7",
          "1 2 2 3 1 4 2"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_329",
    "title": "Longest Harmonious Subsequence",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nWe define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1. Given an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 2 * 10^4. Numbers are between -10^9 and 10^9.\n\nOutput format: An integer representing the length.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "1 3 2 2 5 2 3 7"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "3",
          "1 1 1 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_330",
    "title": "Kth Largest Element in a Stream",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign a class to find the `k`-th largest element in a stream. Note that it is the `k`-th largest element in the sorted order, not the `k`-th distinct element. Implement the `KthLargest` class.\n\n**Constraints**\nInput format: First line `k`. Second line `n` (initial numbers) then `n` integers for `nums`. Next `m` lines, each with an integer `val` to add. `k` is between 1 and 10^4. `n` is between 0 and 10^4. `m` is between 1 and 10^4. `nums` elements and `val` are between -10^4 and 10^4.\n\nOutput format: For each `add` operation, print the `k`-th largest element on a new line.",
    "starter_code": "class KthLargest:\n    def __init__(self, k: int, nums: list[int]):\n        # Implement initialization here\n        pass\n\n    def add(self, val: int) -> int:\n        # Implement add method here\n        pass",
    "test_cases": [
      {
        "input": [
          "3",
          "4",
          "4 5 8 2",
          "3",
          "5",
          "10",
          "9",
          "4"
        ],
        "expected_output": "4\n5\n5\n8\n8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_331",
    "title": "Array Partition I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.\n\n**Constraints**\nInput format: An integer `n` (number of pairs) followed by `2n` integers on a new line. `n` is between 1 and 10^4. Each number is between -10^4 and 10^4.\n\nOutput format: An integer representing the maximized sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2",
          "1 4 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "3",
          "6 2 6 5 1 2"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_332",
    "title": "Distribute Candies",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAlice has `n` candies, where the `i`-th candy is of type `candyType[i]`. Alice can only eat `n / 2` of the candies. Return the maximum number of different types of candies Alice can eat.\n\n**Constraints**\nInput format: An integer `n` (total candies) followed by `n` integers for `candyType`. `n` is even, between 2 and 10^4. Candy types are between -10^5 and 10^5.\n\nOutput format: An integer representing the maximum number of different types.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 1 2 2 3 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "4",
          "1 1 2 3"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_333",
    "title": "Check if N is a Power of Four",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `True` if it is a power of four. Otherwise, return `False`. An integer `n` is a power of four, if there exists an integer `x` such that `n == 4^x`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between -2^31 and 2^31 - 1.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_334",
    "title": "Find All Duplicates in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of length `n` where all the integers in `nums` are in the range `[1, n]` and each integer appears once or twice, return an array of all the integers that appears twice.\nYou must write an algorithm that runs in `O(n)` time and uses only constant extra space.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^5. Numbers are between 1 and `n`.\n\nOutput format: A space-separated string of integers representing the duplicates.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "8",
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "2 3"
      },
      {
        "input": [
          "4",
          "1 1 2 2"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_335",
    "title": "Convert a Number to Hexadecimal",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `num`, return a string representing its hexadecimal representation. For negative integers, two's complement method is used.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between -2^31 and 2^31 - 1.\n\nOutput format: A string representing the hexadecimal number.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "26"
        ],
        "expected_output": "1a"
      },
      {
        "input": [
          "-1"
        ],
        "expected_output": "ffffffff"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_336",
    "title": "Subarray Sum Equals K",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals to `k`.\n\n**Constraints**\nInput format: First line `n` then `n` integers for `nums`. Second line `k`. `n` is between 1 and 2 * 10^4. `k` is between -10^7 and 10^7. Numbers are between -1000 and 1000.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "1 1 1",
          "2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "6",
          "1 2 3",
          "3"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_337",
    "title": "Binary Number with Alternating Bits",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer `n`, return `True` if its binary representation has alternating digits and no two adjacent bits are the same. Otherwise, return `False`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 2^31 - 1.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "11"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_338",
    "title": "Shortest Completing Word",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `licensePlate` and an array of strings `words`, find the shortest completing word in `words`. A completing word is a word that contains all the letters in `licensePlate`. Ignore numbers and spaces in `licensePlate`, and ignore case of letters.\nIf there are multiple shortest completing words, return the first one that appears in `words`.\n\n**Constraints**\nInput format: First line `licensePlate`. Second line `n` (number of words) then `n` space-separated words. `licensePlate` length is between 1 and 7. `n` is between 1 and 1000. Each word length is between 1 and 15. All strings consist of lowercase English letters.\n\nOutput format: A string representing the shortest completing word.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "1s3 PSt",
          "4",
          "step steps stripe plate"
        ],
        "expected_output": "steps"
      },
      {
        "input": [
          "Gr9eAT9UP",
          "3",
          "great gxrat grea"
        ],
        "expected_output": "great"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_339",
    "title": "Monotonic Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn array is monotonic if it is either monotone increasing or monotone decreasing. An array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`. Given an integer array `nums`, return `True` if the given array is monotonic, or `False` otherwise.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^5. Numbers are between -10^5 and 10^5.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 2 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "6 5 4 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "1 3 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_340",
    "title": "Reverse Only Letters",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the reversed string where all characters that are not a letter stay in the same place, and all letters reverse their positions.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 100. `s` consists of printable ASCII characters.\n\nOutput format: The reversed string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "ab-cd"
        ],
        "expected_output": "dc-ba"
      },
      {
        "input": [
          "a-bC-dEf-ghIj"
        ],
        "expected_output": "j-Ih-gfE-dCba"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_341",
    "title": "Smallest Range I",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` and an integer `k`. For each `nums[i]`, you can add at most `k` to `nums[i]` or subtract at most `k` from `nums[i]`. The score of `nums` is the difference between the maximum and minimum elements in `nums`. Return the minimum score of `nums` after applying the mentioned operation at most once for each element in it.\n\n**Constraints**\nInput format: First line `n` then `n` integers for `nums`. Second line `k`. `n` is between 1 and 10^4. `k` is between 0 and 10^4. Numbers are between 0 and 10^4.\n\nOutput format: An integer representing the minimum score.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 3 6",
          "3"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "3",
          "0 10",
          "2"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_342",
    "title": "Single Number III",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, in which exactly two elements appear once and all the other elements appear exactly twice. Find the two elements that appear only once. Return the answer in any order.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 3 * 10^4 (even). Numbers are between -2^31 and 2^31 - 1. Exactly two elements appear once.\n\nOutput format: Two space-separated integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 2 1 3 2 5"
        ],
        "expected_output": "3 5"
      },
      {
        "input": [
          "2",
          "-1 0"
        ],
        "expected_output": "-1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_343",
    "title": "Fibonacci Number Revisited",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, `F(0) = 0`, `F(1) = 1`, `F(n) = F(n - 1) + F(n - 2)` for `n > 1`. Given `n`, calculate `F(n)`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 0 and 30.\n\nOutput format: An integer representing `F(n)`.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_344",
    "title": "Count Substrings with Only One Distinct Letter",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the number of substrings that contain only one distinct letter.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of lowercase English letters.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "aaaba"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "abc"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_345",
    "title": "Find the Student That Will Replace the Chalk",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are `n` students in a class numbered from `0` to `n - 1`. You are given an integer array `chalk` and an integer `k`. Initially, you have `k` amount of chalk. When student `i` uses the chalk, they use `chalk[i]` amount. After student `i` uses the chalk, the next student who uses the chalk is `(i + 1) % n`. The class continues until some student runs out of chalk. Return the index of the student who will run out of chalk.\n\n**Constraints**\nInput format: First line `n` (length of chalk) then `n` integers for `chalk`. Second line `k`. `n` is between 1 and 10^5. `k` is between 1 and 10^9. `chalk[i]` is between 1 and 10^5.\n\nOutput format: An integer representing the student index.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "5 1 5",
          "22"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "2",
          "3 4",
          "25"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_346",
    "title": "Find N Unique Integers Sum up to Zero",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return any array containing `n` unique integers such that they add up to 0.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 1000.\n\nOutput format: A space-separated string of `n` unique integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "-2 -1 0 1 2"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "-1 0 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_347",
    "title": "Check if All Characters Have Equal Number of Occurrences",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return `True` if all characters that appear in the string have the same number of occurrences. Otherwise, return `False`.\n\n**Constraints**\nInput format: A single string `s`. Length of `s` is between 1 and 1000. `s` consists of lowercase English letters.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "abacaba"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aabbcc"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_348",
    "title": "Count Good Triplets",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `arr`, and three integers `a`, `b` and `c`. A triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are true:\n- `0 <= i < j < k < arr.length`\n- `|arr[i] - arr[j]| <= a`\n- `|arr[j] - arr[k]| <= b`\n- `|arr[i] - arr[k]| <= c`\nReturn the number of good triplets.\n\n**Constraints**\nInput format: First line `n` then `n` integers for `arr`. Second line `a` `b` `c`. `n` is between 3 and 100. `a, b, c` are between 0 and 1000. Numbers in `arr` are between 0 and 1000.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "3 0 1 1 9 7",
          "7 2 3"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "4",
          "1 9 0 2",
          "100 100 0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_349",
    "title": "Number of Lines To Write String",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a string `s` of lowercase English letters and an array of integers `widths` of length 26. Each `widths[0]` is the width of 'a', `widths[1]` is the width of 'b', ..., and `widths[25]` is the width of 'z'. Each letter has a width. If a line of text exceeds 100 units in width, then the current line is filled, and the remaining characters are put on the next line. The word will not break into two lines. Return an integer array of length 2 where the first element is the number of lines needed, and the second element is the width of the last line of text.\n\n**Constraints**\nInput format: First line 26 integers for `widths`. Second line `s`. `widths[i]` are between 2 and 10. Length of `s` is between 1 and 1000. `s` consists of lowercase English letters.\n\nOutput format: Two space-separated integers.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10",
          "abcdefghijklmnopqrstuvwxyz"
        ],
        "expected_output": "3 60"
      },
      {
        "input": [
          "4 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10",
          "bbbcccdddaaa"
        ],
        "expected_output": "2 40"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_350",
    "title": "Relative Ranks",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `score` of size `n`, where `score[i]` is the score of the `i`-th athlete in a competition. All the scores are guaranteed to be unique. The athletes are ranked as follows:\n- The 1st place athlete gets a gold medal.\n- The 2nd place athlete gets a silver medal.\n- The 3rd place athlete gets a bronze medal.\n- For the 4th place to the `n`-th place athlete, they get their rank number (i.e., the 4th place athlete gets rank \"4\", the 5th place athlete gets rank \"5\", and so on).\nReturn an array `answer` of size `n` where `answer[i]` is the rank of the `i`-th athlete.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 10^4. `score[i]` is between 0 and 10^6. All scores are unique.\n\nOutput format: A space-separated string of ranks.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "5 4 3 2 1"
        ],
        "expected_output": "Gold Medal Silver Medal Bronze Medal 4 5"
      },
      {
        "input": [
          "3",
          "10 3 8"
        ],
        "expected_output": "Gold Medal 3 Silver Medal"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_351",
    "title": "Island Perimeter (Revisited)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given `row x col` grid representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water. The grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n\n**Constraints**\nInput format: First line `rows` and `cols`. Then `rows` lines follow, each with `cols` space-separated integers (0s or 1s). `rows, cols` are between 1 and 100. `grid[i][j]` is 0 or 1. There is exactly one island.\n\nOutput format: An integer representing the perimeter of the island.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4 4",
          "0 1 0 0",
          "1 1 1 0",
          "0 1 0 0",
          "1 1 0 0"
        ],
        "expected_output": "16"
      },
      {
        "input": [
          "1 1",
          "1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_352",
    "title": "Minimum Absolute Difference",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of distinct integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements. Return a list of such pairs, each pair as a list of two elements, sorted in ascending order. If there are multiple pairs with the same minimum absolute difference, return all of them.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 2 and 10^5. Numbers are between -10^6 and 10^6. All numbers are distinct.\n\nOutput format: A semicolon-separated string of space-separated integer pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "4 2 1 3"
        ],
        "expected_output": "1 2;2 3;3 4"
      },
      {
        "input": [
          "6",
          "1 3 6 10 15"
        ],
        "expected_output": "1 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_353",
    "title": "Check if Number is a Sum of Powers of Three",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `True` if it is possible to represent `n` as the sum of distinct powers of three. Otherwise, return `False`. An integer `y` is a power of three if there exists an integer `x` such that `y = 3^x`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 10^7.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "21"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_354",
    "title": "Maximum Number of Balloons",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `text`, you want to form as many instances of the word \"balloon\" as possible. You can use each character in `text` at most once. Return the maximum number of instances that can be formed.\n\n**Constraints**\nInput format: A single string `text`. Length of `text` is between 1 and 10^4. `text` consists of lowercase English letters.\n\nOutput format: An integer representing the maximum instances.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "nlaebolko"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "loonbalxcatxbycbyxblloohsm"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_355",
    "title": "Check if Sentence is Pangram",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nA pangram is a sentence where every letter of the English alphabet appears at least once. Given a string `sentence` containing only lowercase English letters, return `True` if `sentence` is a pangram, or `False` otherwise.\n\n**Constraints**\nInput format: A single string `sentence`. Length of `sentence` is between 1 and 1000. `sentence` consists of lowercase English letters.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "thequickbrownfoxjumpsoverthelazydog"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_356",
    "title": "Largest Perimeter Triangle",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of non-zero area, return 0.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 3 and 10^4. Numbers are between 1 and 10^6.\n\nOutput format: An integer representing the largest perimeter.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "2 1 2"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "3",
          "1 2 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_357",
    "title": "Number of Pairs of Interchangeable Rectangles",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven `n` rectangles, where `rectangles[i] = [width_i, height_i]` denotes the `i`-th rectangle. Two rectangles `i` and `j` are interchangeable if `width_i / height_i == width_j / height_j` (i.e., they have the same aspect ratio). Return the number of pairs of interchangeable rectangles in the given list.\n\n**Constraints**\nInput format: An integer `n` followed by `n` lines, each with two integers `width` and `height`. `n` is between 1 and 10^5. `width, height` are between 1 and 10^9.\n\nOutput format: An integer representing the count of pairs.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "4 8",
          "3 6",
          "10 20",
          "15 30"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "3",
          "4 5",
          "7 10",
          "10 10"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_358",
    "title": "Count Special Quadruplets",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a 0-indexed integer array `nums`, return the number of distinct quadruplets `(a, b, c, d)` such that:\n- `0 <= a < b < c < d < nums.length`\n- `nums[a] + nums[b] + nums[c] == nums[d]`\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 4 and 50. Numbers are between 1 and 100.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 3 6"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5",
          "1 1 1 3 5"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_359",
    "title": "Find Original Array From Doubled Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nAn integer array `original` is transformed into a `doubled` array by appending twice the value of every element in `original`, and then randomly shuffling the resulting array. Given a `doubled` array, return `original` if `doubled` is a doubled array. If `doubled` is not a doubled array, return an empty array. The elements of `original` array can be returned in any order.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is even, between 0 and 10^5. Numbers are between 0 and 10^5.\n\nOutput format: A space-separated string of integers or an empty string.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6",
          "1 3 4 2 6 8"
        ],
        "expected_output": "1 3 4"
      },
      {
        "input": [
          "4",
          "6 3 0 1"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_360",
    "title": "Find Players With Zero or One Losses",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `matches` where `matches[i] = [winner_i, loser_i]` indicates that the player `winner_i` defeated player `loser_i` in a match. Return a list `answer` of size 2 where:\n- `answer[0]` is a list of all players that have not lost any match.\n- `answer[1]` is a list of all players that have lost exactly one match.\nThe players in both lists should be sorted in increasing order.\n\n**Constraints**\nInput format: An integer `n` (number of matches) followed by `n` lines, each with two integers `winner` and `loser`. `n` is between 1 and 10^5. Player IDs are between 1 and 10^5.\n\nOutput format: Two lines, each with space-separated integers for `answer[0]` and `answer[1]` respectively.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "1 3",
          "2 3",
          "3 6",
          "5 6",
          "5 7",
          "4 5",
          "4 8",
          "4 9",
          "10 4",
          "10 9"
        ],
        "expected_output": "1 2 10\n4 5 7 8"
      },
      {
        "input": [
          "2",
          "1 2",
          "2 1"
        ],
        "expected_output": "\n1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_361",
    "title": "Sort the People",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two arrays, `names` and `heights`, of the same length `n`. For `0 <= i < n`, `names[i]` and `heights[i]` denote the name and height of the `i`-th person. Return the `names` array sorted in descending order by the people's heights.\n\n**Constraints**\nInput format: First line `n` (number of people). Second line `n` space-separated strings for `names`. Third line `n` space-separated integers for `heights`. `n` is between 1 and 1000. `names[i]` length is between 1 and 20. `heights[i]` is between 1 and 10^5. All names are unique. All heights are unique.\n\nOutput format: A space-separated string of names.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "Mary John Emma",
          "180 170 175"
        ],
        "expected_output": "Mary Emma John"
      },
      {
        "input": [
          "2",
          "Alice Bob",
          "155 185"
        ],
        "expected_output": "Bob Alice"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_362",
    "title": "Minimum Rounds to Complete All Tasks",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed integer array `tasks`, where `tasks[i]` represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level. Return the minimum number of rounds required to complete all the tasks, or -1 if it's impossible.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers for `tasks`. `n` is between 1 and 10^5. `tasks[i]` is between 1 and 10^9.\n\nOutput format: An integer representing the minimum rounds or -1.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "5",
          "2 2 3 3 2 4 4 4 4 4"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2",
          "2 3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_363",
    "title": "Difference Between Element Sum and Digit Sum of an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer array `nums`, return the absolute difference between the sum of its elements and the sum of its digits.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 100. Numbers are between 1 and 2000.\n\nOutput format: An integer representing the absolute difference.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 15 6 3"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "2",
          "1 2 3 45"
        ],
        "expected_output": "36"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_364",
    "title": "Alternating Digit Sum",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a positive integer `n`. Each digit of `n` has a sign according to its position: the most significant digit is positive, the next digit is negative, and so on. Return the alternating digit sum of `n`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 10^9.\n\nOutput format: An integer representing the alternating digit sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "521"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "111"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "886996"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_365",
    "title": "Maximum Value of a String in an Array",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nThe value of an alphanumeric string can be defined as:\n- Its integer value if it consists over only digits.\n- Its length otherwise.\nGiven an array of strings `strs`, return the maximum value of all the strings in the array.\n\n**Constraints**\nInput format: An integer `n` followed by `n` space-separated strings. `n` is between 1 and 100. Each string length is between 1 and 9. Strings consist of lowercase English letters and digits.\n\nOutput format: An integer representing the maximum value.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "alcatraz 98765 24"
        ],
        "expected_output": "98765"
      },
      {
        "input": [
          "2",
          "hello world"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_366",
    "title": "Smallest Even Multiple",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer `n`, return the smallest positive integer that is a multiple of both 2 and `n`.\n\n**Constraints**\nInput format: A single integer `n`. `n` is between 1 and 1000.\n\nOutput format: An integer representing the smallest even multiple.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "14"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_367",
    "title": "Count the Digits That Divide a Number",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `num`, return the number of digits in `num` that divide `num`. A digit `d` divides `num` if `num % d == 0`.\n\n**Constraints**\nInput format: A single integer `num`. `num` is between 1 and 10^9.\n\nOutput format: An integer representing the count.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "121"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_368",
    "title": "Sum of Values at Indices With K Set Bits",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a 0-indexed integer array `nums` and an integer `k`. Return the sum of all elements in `nums` whose corresponding index has exactly `k` set bits in its binary representation.\n\n**Constraints**\nInput format: First line `n` then `n` integers for `nums`. Second line `k`. `n` is between 1 and 1000. `k` is between 0 and 10. `nums[i]` is between 1 and 10^5.\n\nOutput format: An integer representing the sum.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "4",
          "5 10 1 5",
          "1"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "4",
          "4 3 2 1",
          "2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_369",
    "title": "Smallest Missing Non-Negative Integer",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the smallest missing non-negative integer. Example: for `[1, 0, 3]`, the smallest missing non-negative integer is 2.\n\n**Constraints**\nInput format: An integer `n` followed by `n` integers on a new line. `n` is between 1 and 1000. Numbers are between -1000 and 1000.\n\nOutput format: An integer representing the smallest missing non-negative integer.",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "1 0 3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4",
          "0 1 2 4"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "pr_370",
    "title": "Check if Array is Good (Revisited)",
    "category": "Pattern Recognition",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` of length `n`. We call `nums` good if it satisfies all the following conditions:\n- `nums.length == n + 1`\n- The elements of `nums` form a permutation of `[1, n]`.\n- There is exactly one element in `nums` that is equal to `n`.\nReturn `True` if `nums` is good, otherwise return `False`.\n\n**Constraints**\nInput format: An integer `n` (not actual length, but the `n` for permutation) followed by `length` integers on a new line. `n` is between 1 and 100. `length` is `n+1`. Each number in `nums` is between 1 and `n+1`.\n\nOutput format: \"True\" or \"False\".",
    "starter_code": "",
    "test_cases": [
      {
        "input": [
          "3",
          "4",
          "2 1 3 3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "3",
          "4",
          "1 2 3 3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  }
]