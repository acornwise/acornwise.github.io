[
    {
        "id": "mas_1",
        "title": "Longest Palindromic Substring",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, return the longest palindromic substring in `s`. If there are multiple, return any valid one.\n\n**Constraints**\n* 1 <= s.length <= 1000\n* `s` consists of only digits and English letters.\n\nInput format: A single line containing the string `s`.\n\nOutput format: A single line containing the longest palindromic substring.",
        "starter_code": "# Given a string s, return the longest palindromic substring in s.",
        "test_cases": [
            {
                "input": [
                    "babad"
                ],
                "expected_output": "bab"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_2",
        "title": "Container With Most Water",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.\n\n**Constraints**\n* n == height.length\n* 2 <= n <= 10^5\n* 0 <= height[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `height` array.\n\nOutput format: A single integer representing the maximum amount of water.",
        "starter_code": "# Find two lines that together with the x-axis form a container, such that the container contains the most water.",
        "test_cases": [
            {
                "input": [
                    "1 8 6 2 5 4 8 3 7"
                ],
                "expected_output": "49"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_3",
        "title": "Integer to Roman",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer, convert it to a Roman numeral.\n\n**Constraints**\n* 1 <= num <= 3999\n\nInput format: A single integer `num`.\n\nOutput format: A string representing the Roman numeral.",
        "starter_code": "# Convert an integer to a Roman numeral.",
        "test_cases": [
            {
                "input": [
                    "1994"
                ],
                "expected_output": "MCMXCIV"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_4",
        "title": "Roman to Integer",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a Roman numeral, convert it to an integer.\n\n**Constraints**\n* 1 <= s.length <= 15\n* `s` contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\n* It is guaranteed that `s` is a valid Roman numeral in the range [1, 3999].\n\nInput format: A single line containing the Roman numeral string `s`.\n\nOutput format: A single integer representing the Roman numeral.",
        "starter_code": "# Convert a Roman numeral to an integer.",
        "test_cases": [
            {
                "input": [
                    "MCMXCIV"
                ],
                "expected_output": "1994"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_5",
        "title": "Longest Common Prefix",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string `\"\"`.\n\n**Constraints**\n* 1 <= strs.length <= 200\n* 0 <= strs[i].length <= 200\n* `strs[i]` consists of only lowercase English letters.\n\nInput format: The first line contains an integer `n` indicating the number of strings. The next `n` lines each contain a string.\n\nOutput format: A single line containing the longest common prefix.",
        "starter_code": "# Find the longest common prefix string amongst an array of strings.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "flower",
                    "flow",
                    "flight"
                ],
                "expected_output": "fl"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_6",
        "title": "3Sum Closest",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n**Constraints**\n* 3 <= nums.length <= 1000\n* -1000 <= nums[i] <= 1000\n* -10^4 <= target <= 10^4\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `target`.\n\nOutput format: A single integer representing the sum closest to the `target`.",
        "starter_code": "# Find three integers in nums such that the sum is closest to target.",
        "test_cases": [
            {
                "input": [
                    "-1 2 1 -4",
                    "1"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_7",
        "title": "Letter Combinations of a Phone Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n**Constraints**\n* 0 <= digits.length <= 4\n* `digits[i]` is a digit in the range ['2', '9'].\n\nInput format: A single line containing the string of digits.\n\nOutput format: A comma-separated string of letter combinations, sorted alphabetically.",
        "starter_code": "# Return all possible letter combinations that the number could represent.",
        "test_cases": [
            {
                "input": [
                    "23"
                ],
                "expected_output": "ad,ae,af,bd,be,bf,cd,ce,cf"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_8",
        "title": "4Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `nums` of `n` integers, return an array of all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that `0 <= a, b, c, d < n`, `a`, `b`, `c`, and `d` are distinct, and `nums[a] + nums[b] + nums[c] + nums[d] == target`. You may return the answer in any order.\n\n**Constraints**\n* 1 <= nums.length <= 200\n* -10^9 <= nums[i] <= 10^9\n* -10^9 <= target <= 10^9\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `target`.\n\nOutput format: A list of space-separated quadruplets, each quadruplet's numbers are space-separated, and quadruplets are sorted lexicographically.",
        "starter_code": "# Find all unique quadruplets in nums that sum up to target.",
        "test_cases": [
            {
                "input": [
                    "1 0 -1 0 -2 2",
                    "0"
                ],
                "expected_output": "-2 -1 1 2, -2 0 0 2, -1 0 0 1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_9",
        "title": "Remove Nth Node From End of List",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `head` of a linked list, remove the `n`th node from the end of the list and return its head.\n\n**Constraints**\n* The number of nodes in the list is `sz`.\n* 1 <= sz <= 30\n* 1 <= n <= sz\n\nInput format: The first line contains space-separated integers representing the linked list nodes. The second line contains the integer `n`.\n\nOutput format: A space-separated string of the remaining linked list nodes.",
        "starter_code": "# Remove the nth node from the end of a linked list.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5",
                    "2"
                ],
                "expected_output": "1 2 3 5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_10",
        "title": "Valid Parentheses",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of closing brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type.\n\n**Constraints**\n* 1 <= s.length <= 10^4\n* `s` consists of parentheses only '()[]{}'.\n\nInput format: A single line containing the string `s`.\n\nOutput format: \"true\" if the string is valid, \"false\" otherwise.",
        "starter_code": "# Determine if the input string of parentheses is valid.",
        "test_cases": [
            {
                "input": [
                    "()[]{}"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_11",
        "title": "Merge Two Sorted Lists",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.\n\n**Constraints**\n* The number of nodes in both lists is in the range [0, 50].\n* -100 <= Node.val <= 100\n* Both `list1` and `list2` are sorted in non-decreasing order.\n\nInput format: The first line contains space-separated integers representing `list1`. The second line contains space-separated integers representing `list2`. Use \"None\" for an empty list.\n\nOutput format: A space-separated string of the merged linked list nodes.",
        "starter_code": "# Merge two sorted linked lists into one sorted list.",
        "test_cases": [
            {
                "input": [
                    "1 2 4",
                    "1 3 4"
                ],
                "expected_output": "1 1 2 3 4 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_12",
        "title": "Generate Parentheses",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n**Constraints**\n* 1 <= n <= 8\n\nInput format: A single integer `n`.\n\nOutput format: A comma-separated string of all combinations of well-formed parentheses, sorted alphabetically.",
        "starter_code": "# Generate all combinations of well-formed parentheses.",
        "test_cases": [
            {
                "input": [
                    "3"
                ],
                "expected_output": "((())),(()()),(())(),()(()),()()()"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_13",
        "title": "Merge k Sorted Lists",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of `k` linked-lists `lists`, each linked list is sorted in ascending order. Merge all the linked-lists into one sorted linked list and return it.\n\n**Constraints**\n* k == lists.length\n* 0 <= k <= 10^4\n* 0 <= lists[i].length <= 500\n* -10^4 <= lists[i][j] <= 10^4\n* `lists[i]` is sorted in ascending order.\n* The sum of `lists[i].length` will not exceed 10^4.\n\nInput format: The first line contains an integer `k` representing the number of linked lists. The next `k` lines each contain space-separated integers representing a linked list. Use \"None\" for an empty list.\n\nOutput format: A space-separated string of the merged linked list nodes.",
        "starter_code": "# Merge k sorted linked lists into one sorted linked list.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 4 5",
                    "1 3 4",
                    "2 6"
                ],
                "expected_output": "1 1 2 3 4 4 5 6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_14",
        "title": "Swap Nodes in Pairs",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed).\n\n**Constraints**\n* The number of nodes in the list is in the range [0, 100].\n* 0 <= Node.val <= 100\n\nInput format: A single line of space-separated integers representing the linked list nodes.\n\nOutput format: A space-separated string of the linked list nodes after swapping.",
        "starter_code": "# Swap every two adjacent nodes in a linked list.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4"
                ],
                "expected_output": "2 1 4 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_15",
        "title": "Reverse Nodes in k-Group",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `head` of a linked list, reverse the nodes of the list `k` at a time, and return the modified list. `k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is. You may not alter the values in the list's nodes, only nodes themselves may be changed.\n\n**Constraints**\n* The number of nodes in the list is `n`.\n* 1 <= k <= n <= 5000\n* 0 <= Node.val <= 1000\n\nInput format: The first line contains space-separated integers representing the linked list nodes. The second line contains the integer `k`.\n\nOutput format: A space-separated string of the linked list nodes after reversing.",
        "starter_code": "# Reverse the nodes of a linked list k at a time.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5",
                    "2"
                ],
                "expected_output": "2 1 4 3 5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_16",
        "title": "Remove Duplicates from Sorted Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in `nums`. Consider the number of unique elements in `nums` to be `k`, then return `k`. The first `k` elements of `nums` should contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.\n\n**Constraints**\n* 0 <= nums.length <= 3 * 10^4\n* -100 <= nums[i] <= 100\n* `nums` is sorted in non-decreasing order.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer `k` followed by a new line, and then the first `k` elements of the modified `nums` array, space-separated.",
        "starter_code": "# Remove duplicates from a sorted array in-place.",
        "test_cases": [
            {
                "input": [
                    "1 1 2"
                ],
                "expected_output": "2\n1 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_17",
        "title": "Remove Element",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` in-place. The relative order of the elements may be changed. Then return the number of elements in `nums` which are not equal to `val`. Consider the number of elements in `nums` which are not equal to `val` to be `k`, then return `k`. The first `k` elements of `nums` should contain the elements of `nums` which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.\n\n**Constraints**\n* 0 <= nums.length <= 100\n* 0 <= nums[i] <= 100\n* 0 <= val <= 100\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `val`.\n\nOutput format: A single integer `k` followed by a new line, and then the first `k` elements of the modified `nums` array, space-separated.",
        "starter_code": "# Remove all occurrences of a value from an array in-place.",
        "test_cases": [
            {
                "input": [
                    "3 2 2 3",
                    "3"
                ],
                "expected_output": "2\n2 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_18",
        "title": "Implement strStr()",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `haystack` and `needle`, return the index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack`.\n\n**Constraints**\n* 0 <= haystack.length, needle.length <= 10^4\n* `haystack` and `needle` consist of only lowercase English characters.\n\nInput format: The first line contains the string `haystack`. The second line contains the string `needle`.\n\nOutput format: A single integer representing the index.",
        "starter_code": "# Return the index of the first occurrence of needle in haystack.",
        "test_cases": [
            {
                "input": [
                    "hello",
                    "ll"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_19",
        "title": "Divide Two Integers",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and `mod` operator. The integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`. Assume we are dealing with an environment that can only store integers within the 32-bit signed integer range: `[\u22122^31, 2^31 \u2212 1]`. For this problem, if the quotient is strictly greater than `2^31 \u2212 1`, then return `2^31 \u2212 1`, and if the quotient is strictly less than `\u22122^31`, then return `\u22122^31`.\n\n**Constraints**\n* -2^31 <= dividend, divisor <= 2^31 - 1\n* divisor != 0\n\nInput format: The first line contains the integer `dividend`. The second line contains the integer `divisor`.\n\nOutput format: A single integer representing the quotient.",
        "starter_code": "# Divide two integers without using multiplication, division, and mod operator.",
        "test_cases": [
            {
                "input": [
                    "10",
                    "3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_20",
        "title": "Substring with Concatenation of All Words",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a string `s` and an array of strings `words`. All the strings in `words` are of the same length. Find all starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, in any order, and without any intervening characters. You may return the answer in any order.\n\n**Constraints**\n* 1 <= s.length <= 10^4\n* 1 <= words.length <= 5000\n* 1 <= words[i].length <= 30\n* `s` and `words[i]` consist of lowercase English letters.\n\nInput format: The first line contains the string `s`. The second line contains space-separated words for `words`.\n\nOutput format: A comma-separated string of starting indices, sorted numerically.",
        "starter_code": "# Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.",
        "test_cases": [
            {
                "input": [
                    "barfoothefoobarman",
                    "foo bar"
                ],
                "expected_output": "0,9"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_21",
        "title": "Next Permutation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA permutation of an array of integers is an arrangement of its members into a sequence or linear order. The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all permutations of the array are sorted in one container, then the next permutation of that array is the permutation directly after it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\n**Constraints**\n* 1 <= nums.length <= 100\n* 0 <= nums[i] <= 100\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A space-separated string of the `nums` array after modification.",
        "starter_code": "# Find the next lexicographically greater permutation of an integer array.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "1 3 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_22",
        "title": "Search in Rotated Sorted Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere is an integer array `nums` sorted in ascending order (with distinct values). Prior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k` (0 <= k < nums.length) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index 3 and become `[4,5,6,7,0,1,2]`. Given the array `nums` after the rotation and an integer `target`, return the index of `target` if it is in `nums`, or -1 if it is not in `nums`. You must write an algorithm with `O(log n)` runtime complexity.\n\n**Constraints**\n* 1 <= nums.length <= 5000\n* -10^4 <= nums[i] <= 10^4\n* All values of `nums` are unique.\n* `nums` is an ascending array that is possibly rotated.\n* -10^4 <= target <= 10^4\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `target`.\n\nOutput format: A single integer representing the index.",
        "starter_code": "# Search for a target in a rotated sorted array.",
        "test_cases": [
            {
                "input": [
                    "4 5 6 7 0 1 2",
                    "0"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_23",
        "title": "Find First and Last Position of Element in Sorted Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. You must write an algorithm with `O(log n)` runtime complexity.\n\n**Constraints**\n* 0 <= nums.length <= 10^5\n* -10^9 <= nums[i] <= 10^9\n* `nums` is a non-decreasing array.\n* -10^9 <= target <= 10^9\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `target`.\n\nOutput format: A space-separated string of two integers representing the starting and ending positions.",
        "starter_code": "# Find the starting and ending position of a given target value in a sorted array.",
        "test_cases": [
            {
                "input": [
                    "5 7 7 8 8 10",
                    "8"
                ],
                "expected_output": "3 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_24",
        "title": "Combination Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\n**Constraints**\n* 1 <= candidates.length <= 30\n* 2 <= candidates[i] <= 40\n* All elements of `candidates` are distinct.\n* 1 <= target <= 40\n\nInput format: The first line contains space-separated integers for `candidates`. The second line contains the integer `target`.\n\nOutput format: A list of space-separated combinations, each combination's numbers are space-separated, and combinations are sorted lexicographically.",
        "starter_code": "# Find all unique combinations of candidates where the chosen numbers sum to target.",
        "test_cases": [
            {
                "input": [
                    "2 3 6 7",
                    "7"
                ],
                "expected_output": "2 2 3, 7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_25",
        "title": "Combination Sum II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`. Each number in `candidates` may only be used once in the combination. Note: The solution set must not contain duplicate combinations.\n\n**Constraints**\n* 1 <= candidates.length <= 100\n* 1 <= candidates[i] <= 50\n* 1 <= target <= 30\n\nInput format: The first line contains space-separated integers for `candidates`. The second line contains the integer `target`.\n\nOutput format: A list of space-separated combinations, each combination's numbers are space-separated, and combinations are sorted lexicographically.",
        "starter_code": "# Find all unique combinations in candidates where the candidate numbers sum to target, using each number once.",
        "test_cases": [
            {
                "input": [
                    "10 1 2 7 6 1 5",
                    "8"
                ],
                "expected_output": "1 1 6, 1 2 5, 1 7, 2 6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_26",
        "title": "First Missing Positive",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an unsorted integer array `nums`, return the smallest missing positive integer. You must implement an algorithm that runs in `O(n)` time and uses constant extra space.\n\n**Constraints**\n* 1 <= nums.length <= 5 * 10^5\n* -2^31 <= nums[i] <= 2^31 - 1\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the smallest missing positive integer.",
        "starter_code": "# Return the smallest missing positive integer in an unsorted array.",
        "test_cases": [
            {
                "input": [
                    "1 2 0"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_27",
        "title": "Trapping Rain Water",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\n**Constraints**\n* n == height.length\n* 1 <= n <= 2 * 10^4\n* 0 <= height[i] <= 10^5\n\nInput format: A single line of space-separated integers representing the `height` array.\n\nOutput format: A single integer representing the total amount of water trapped.",
        "starter_code": "# Compute how much water can be trapped after raining given an elevation map.",
        "test_cases": [
            {
                "input": [
                    "0 1 0 2 1 0 1 3 2 1 2 1"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_28",
        "title": "Rotate Image",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `n x n` 2D `matrix` representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\n**Constraints**\n* n == matrix.length == matrix[i].length\n* 1 <= n <= 20\n* -1000 <= matrix[i][j] <= 1000\n\nInput format: The first line contains an integer `n` representing the size of the square matrix. The next `n` lines each contain `n` space-separated integers representing a row of the matrix.\n\nOutput format: The `n` lines of the modified matrix, with space-separated integers in each row.",
        "starter_code": "# Rotate a 2D matrix by 90 degrees (clockwise) in-place.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 2 3",
                    "4 5 6",
                    "7 8 9"
                ],
                "expected_output": "7 4 1\n8 5 2\n9 6 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_29",
        "title": "Jump Game",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums`. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return `true` if you can reach the last index, or `false` otherwise.\n\n**Constraints**\n* 1 <= nums.length <= 10^4\n* 0 <= nums[i] <= 10^5\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Determine if you can reach the last index of an array given jump lengths.",
        "test_cases": [
            {
                "input": [
                    "2 3 1 1 4"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_30",
        "title": "Merge Intervals",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\n**Constraints**\n* 1 <= intervals.length <= 10^4\n* 0 <= starti <= endi <= 10^4\n\nInput format: The first line contains an integer `n` representing the number of intervals. The next `n` lines each contain two space-separated integers representing `starti` and `endi`.\n\nOutput format: Each merged interval on a new line, with space-separated `start` and `end` values.",
        "starter_code": "# Merge all overlapping intervals.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "1 3",
                    "2 6",
                    "8 10",
                    "15 18"
                ],
                "expected_output": "1 6\n8 10\n15 18"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_31",
        "title": "Insert Interval",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` are sorted by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval. Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary). Return `intervals` after the insertion.\n\n**Constraints**\n* 0 <= intervals.length <= 10^4\n* intervals[i].length == 2\n* 0 <= starti <= endi <= 10^5\n* intervals is sorted by starti in a non-decreasing order.\n* newInterval.length == 2\n* 0 <= start <= end <= 10^5\n\nInput format: The first line contains an integer `n` representing the number of intervals. The next `n` lines each contain two space-separated integers representing `starti` and `endi`. The last line contains two space-separated integers representing `newInterval`.\n\nOutput format: Each merged interval on a new line, with space-separated `start` and `end` values.",
        "starter_code": "# Insert a new interval into a sorted list of non-overlapping intervals, merging if necessary.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 3",
                    "6 9",
                    "2 5"
                ],
                "expected_output": "1 5\n6 9"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_32",
        "title": "Permutations",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.\n\n**Constraints**\n* 1 <= nums.length <= 6\n* -10 <= nums[i] <= 10\n* All the integers in `nums` are unique.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: Each permutation on a new line, with space-separated integers, sorted lexicographically.",
        "starter_code": "# Generate all possible permutations of an array of distinct integers.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_33",
        "title": "Permutations II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.\n\n**Constraints**\n* 1 <= nums.length <= 8\n* -10 <= nums[i] <= 10\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: Each unique permutation on a new line, with space-separated integers, sorted lexicographically.",
        "starter_code": "# Generate all possible unique permutations of an array that might contain duplicates.",
        "test_cases": [
            {
                "input": [
                    "1 1 2"
                ],
                "expected_output": "1 1 2\n1 2 1\n2 1 1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_34",
        "title": "Rotate List",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `head` of a linked list, rotate the list to the right by `k` places.\n\n**Constraints**\n* The number of nodes in the list is in the range `[0, 500]`. \n* -100 <= Node.val <= 100\n* 0 <= k <= 2 * 10^9\n\nInput format: The first line contains space-separated integers representing the linked list nodes. The second line contains the integer `k`.\n\nOutput format: A space-separated string of the linked list nodes after rotation.",
        "starter_code": "# Rotate a linked list to the right by k places.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5",
                    "2"
                ],
                "expected_output": "4 5 1 2 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_35",
        "title": "Unique Paths",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere is a robot on an `m x n` grid. The robot is initially located at the top-left corner (`grid[0][0]`). The robot tries to move to the bottom-right corner (`grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. Given the two integers `m` and `n`, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\n**Constraints**\n* 1 <= m, n <= 100\n\nInput format: The first line contains the integer `m`. The second line contains the integer `n`.\n\nOutput format: A single integer representing the number of unique paths.",
        "starter_code": "# Calculate the number of unique paths for a robot on an m x n grid.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "7"
                ],
                "expected_output": "28"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_36",
        "title": "Unique Paths II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` integer array `grid`. There is a robot initially located at the top-left corner (`grid[0][0]`). The robot tries to move to the bottom-right corner (`grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. An obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include any obstacle. Return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\n**Constraints**\n* m == obstacleGrid.length\n* n == obstacleGrid[i].length\n* 1 <= m, n <= 100\n* obstacleGrid[i][j] is 0 or 1.\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing the `obstacleGrid`.\n\nOutput format: A single integer representing the number of unique paths.",
        "starter_code": "# Calculate the number of unique paths for a robot on a grid with obstacles.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "0 0 0",
                    "0 1 0",
                    "0 0 0"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_37",
        "title": "Minimum Path Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.\n\n**Constraints**\n* m == grid.length\n* n == grid[i].length\n* 1 <= m, n <= 200\n* 0 <= grid[i][j] <= 100\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing the `grid`.\n\nOutput format: A single integer representing the minimum path sum.",
        "starter_code": "# Find the minimum path sum from top left to bottom right in a grid.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "1 3 1",
                    "1 5 1",
                    "4 2 1"
                ],
                "expected_output": "7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_38",
        "title": "Edit Distance",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. You have the following three operations permitted on a word: insert a character, delete a character, replace a character.\n\n**Constraints**\n* 0 <= word1.length, word2.length <= 500\n* `word1` and `word2` consist of lowercase English letters.\n\nInput format: The first line contains the string `word1`. The second line contains the string `word2`.\n\nOutput format: A single integer representing the minimum number of operations.",
        "starter_code": "# Calculate the minimum number of operations to convert word1 to word2.",
        "test_cases": [
            {
                "input": [
                    "horse",
                    "ros"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_39",
        "title": "Set Matrix Zeroes",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` integer matrix, if an element is `0`, set its entire row and column to `0`.\nYou must do it in-place.\n\n**Constraints**\n* m == matrix.length\n* n == matrix[0].length\n* 1 <= m, n <= 200\n* -10^9 <= matrix[i][j] <= 10^9\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing the `matrix`.\n\nOutput format: The `m` lines of the modified matrix, with space-separated integers in each row.",
        "starter_code": "# Set entire row and column to 0 if an element in the matrix is 0.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "1 1 1",
                    "1 0 1",
                    "1 1 1"
                ],
                "expected_output": "1 0 1\n0 0 0\n1 0 1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_40",
        "title": "Search a 2D Matrix",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` integer matrix `matrix` with the following two properties:\n* Each row is sorted in non-decreasing order.\n* The first integer of each row is greater than the last integer of the previous row.\nGiven an integer `target`, return `true` if `target` is in the matrix, or `false` otherwise.\n\n**Constraints**\n* m == matrix.length\n* n == matrix[i].length\n* 1 <= m, n <= 100\n* -10^4 <= matrix[i][j], target <= 10^4\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing the `matrix`. The last line contains the integer `target`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Search for a target in a 2D matrix with specific properties.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "4",
                    "1 3 5 7",
                    "10 11 16 20",
                    "23 30 34 60",
                    "3"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_41",
        "title": "Sort Colors",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function.\n\n**Constraints**\n* n == nums.length\n* 1 <= n <= 100\n* nums[i] is either 0, 1, or 2.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A space-separated string of the sorted `nums` array.",
        "starter_code": "# Sort an array of colors (0, 1, or 2) in-place without using library sort.",
        "test_cases": [
            {
                "input": [
                    "2 0 2 1 1 0"
                ],
                "expected_output": "0 0 1 1 2 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_42",
        "title": "Subsets",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.\n\n**Constraints**\n* 1 <= nums.length <= 10\n* -10 <= nums[i] <= 10\n* All the numbers of `nums` are unique.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: Each subset on a new line, with space-separated integers, sorted lexicographically. An empty set is represented by \"[]\".",
        "starter_code": "# Generate all possible subsets of an array with unique elements.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "[]\n1\n1 2\n1 2 3\n1 3\n2\n2 3\n3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_43",
        "title": "Largest Rectangle in Histogram",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of integers `heights` representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n\n**Constraints**\n* 1 <= heights.length <= 10^5\n* 0 <= heights[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `heights` array.\n\nOutput format: A single integer representing the area of the largest rectangle.",
        "starter_code": "# Find the area of the largest rectangle in a histogram.",
        "test_cases": [
            {
                "input": [
                    "2 1 5 6 2 3"
                ],
                "expected_output": "10"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_44",
        "title": "Maximal Rectangle",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return its area.\n\n**Constraints**\n* rows == matrix.length\n* cols == matrix[i].length\n* 1 <= rows, cols <= 200\n* matrix[i][j] is '0' or '1'.\n\nInput format: The first line contains an integer `rows` representing the number of rows. The second line contains an integer `cols` representing the number of columns. The next `rows` lines each contain `cols` characters ('0' or '1') representing a row of the `matrix`.\n\nOutput format: A single integer representing the area of the largest rectangle.",
        "starter_code": "# Find the largest rectangle containing only '1's in a binary matrix.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "5",
                    "1 0 1 0 0",
                    "1 0 1 1 1",
                    "1 1 1 1 1",
                    "1 0 0 1 0"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_45",
        "title": "Merge Sorted Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. Merge `nums1` and `nums2` into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.\n\n**Constraints**\n* nums1.length == m + n\n* nums2.length == n\n* 0 <= m, n <= 200\n* 1 <= m + n <= 200\n* -10^9 <= nums1[i], nums2[j] <= 10^9\n\nInput format: The first line contains space-separated integers for `nums1` (with placeholder zeros). The second line contains the integer `m`. The third line contains space-separated integers for `nums2`. The fourth line contains the integer `n`.\n\nOutput format: A space-separated string of the merged and sorted `nums1` array.",
        "starter_code": "# Merge two sorted arrays into nums1 in-place.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 0 0 0",
                    "3",
                    "2 5 6",
                    "3"
                ],
                "expected_output": "1 2 2 3 5 6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_46",
        "title": "Remove Duplicates from Sorted List",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n\n**Constraints**\n* The number of nodes in the list is in the range [0, 300].\n* -100 <= Node.val <= 100\n* The list is guaranteed to be sorted in ascending order.\n\nInput format: A single line of space-separated integers representing the linked list nodes.\n\nOutput format: A space-separated string of the linked list nodes after removing duplicates.",
        "starter_code": "# Delete all duplicates from a sorted linked list.",
        "test_cases": [
            {
                "input": [
                    "1 1 2 3 3"
                ],
                "expected_output": "1 2 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_47",
        "title": "Remove Duplicates from Sorted List II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n\n**Constraints**\n* The number of nodes in the list is in the range [0, 300].\n* -100 <= Node.val <= 100\n* The list is guaranteed to be sorted in ascending order.\n\nInput format: A single line of space-separated integers representing the linked list nodes.\n\nOutput format: A space-separated string of the linked list nodes after removing duplicates.",
        "starter_code": "# Delete all nodes that have duplicate numbers from a sorted linked list.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 3 4 4 5"
                ],
                "expected_output": "1 2 5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_48",
        "title": "Largest Palindrome Product",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nFind the largest palindrome made from the product of two `n`-digit numbers. Since the result can be very large, return the largest palindrome `mod 1337`.\n\n**Constraints**\n* 1 <= n <= 8\n\nInput format: A single integer `n`.\n\nOutput format: A single integer representing the largest palindrome product mod 1337.",
        "starter_code": "# Find the largest palindrome made from the product of two n-digit numbers, modulo 1337.",
        "test_cases": [
            {
                "input": [
                    "2"
                ],
                "expected_output": "987"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_49",
        "title": "Sum Root to Leaf Numbers",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given the `root` of a binary tree where each node contains a digit from 0-9. Each root-to-leaf path represents a number. For example, if the path is 1 -> 2 -> 3, then the number is 123. Return the total sum of all root-to-leaf numbers. A leaf node is a node with no children.\n\n**Constraints**\n* The number of nodes in the tree is in the range [1, 1000].\n* 0 <= Node.val <= 9\n* The depth of the tree will not exceed 10.\n\nInput format: A space-separated string representing the binary tree in level order, with \"null\" for missing children. For example, \"1 2 3 null null 4 5\" would represent a tree where 1 is the root, 2 and 3 are its children, 4 and 5 are children of 3.\n\nOutput format: A single integer representing the total sum of all root-to-leaf numbers.",
        "starter_code": "# Calculate the total sum of all root-to-leaf numbers in a binary tree.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "25"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_50",
        "title": "Longest Consecutive Sequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in `O(n)` time.\n\n**Constraints**\n* 0 <= nums.length <= 10^5\n* -10^9 <= nums[i] <= 10^9\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the length of the longest consecutive elements sequence.",
        "starter_code": "# Find the length of the longest consecutive elements sequence in an unsorted array.",
        "test_cases": [
            {
                "input": [
                    "100 4 200 1 3 2"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_51",
        "title": "Median of Two Sorted Arrays",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be `O(log (m+n))`.\n\n**Constraints**\n* nums1.length == m\n* nums2.length == n\n* 0 <= m <= 1000\n* 0 <= n <= 1000\n* 1 <= m + n <= 2000\n* -10^6 <= nums1[i], nums2[i] <= 10^6\n\nInput format: The first line contains space-separated integers for `nums1`. The second line contains space-separated integers for `nums2`.\n\nOutput format: A single float representing the median.",
        "starter_code": "# Find the median of two sorted arrays.",
        "test_cases": [
            {
                "input": [
                    "1 3",
                    "2"
                ],
                "expected_output": "2.0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_52",
        "title": "Regular Expression Matching",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an input string `s` and a pattern `p`, implement regular expression matching with support for '.' and '*'.\n* '.' Matches any single character.\n* '*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial). Return `true` if `s` matches `p`, or `false` otherwise.\n\n**Constraints**\n* 1 <= s.length <= 20\n* 1 <= p.length <= 30\n* `s` contains only lowercase English letters.\n* `p` contains only lowercase English letters, '.', and '*'.\n* It is guaranteed that there will be no two consecutive '*' characters in the pattern `p`.\n\nInput format: The first line contains the string `s`. The second line contains the string `p`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Implement regular expression matching.",
        "test_cases": [
            {
                "input": [
                    "aa",
                    "a*"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_53",
        "title": "Container With Most Water II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of non-negative integers `heights` representing an elevation map where the width of each bar is 1. Your task is to find the maximum amount of water that can be trapped in a 3D container formed by selecting four vertical lines from `heights` and the x-axis, such that the base of the container is formed by two lines, and the other two lines form the sides. The container must have a rectangular base. Return the maximum amount of water this container can store.\n\n**Constraints**\n* n == heights.length\n* 4 <= n <= 10^3\n* 0 <= heights[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `heights` array.\n\nOutput format: A single integer representing the maximum amount of water.",
        "starter_code": "# Find the maximum amount of water that can be trapped in a 3D container formed by four vertical lines.",
        "test_cases": [
            {
                "input": [
                    "1 8 6 2 5 4 8 3 7"
                ],
                "expected_output": "18"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_54",
        "title": "Integer to English Words",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nConvert a non-negative integer `num` to its English words representation. The input number is guaranteed to be less than 2^31 - 1.\n\n**Constraints**\n* 0 <= num <= 2^31 - 1\n\nInput format: A single integer `num`.\n\nOutput format: A string representing the English words.",
        "starter_code": "# Convert an integer to its English words representation.",
        "test_cases": [
            {
                "input": [
                    "123"
                ],
                "expected_output": "One Hundred Twenty Three"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_55",
        "title": "Longest Valid Parentheses",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\n**Constraints**\n* 0 <= s.length <= 3 * 10^4\n* `s[i]` is '(' or ')'.\n\nInput format: A single line containing the string `s`.\n\nOutput format: A single integer representing the length.",
        "starter_code": "# Find the length of the longest valid parentheses substring.",
        "test_cases": [
            {
                "input": [
                    "(()"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_56",
        "title": "Count and Say",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThe count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n* `countAndSay(1) = \"1\"`\n* `countAndSay(n)` is the way you would \"say\" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string. To \"say\" a digit string, split it into the fewest possible number of groups of consecutive identical characters. Then, for each group, say the number of characters, then say the character. Then concatenate all the sayings.\nGiven a positive integer `n`, return the `n`th term of the count-and-say sequence.\n\n**Constraints**\n* 1 <= n <= 30\n\nInput format: A single integer `n`.\n\nOutput format: A string representing the `n`th term.",
        "starter_code": "# Generate the nth term of the count-and-say sequence.",
        "test_cases": [
            {
                "input": [
                    "4"
                ],
                "expected_output": "1211"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_57",
        "title": "Combination Sum III",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nFind all valid combinations of `k` numbers that sum up to `n` such that only numbers from 1 to 9 are used and each combination is a unique set of numbers. Return the combinations in any order.\n\n**Constraints**\n* 2 <= k <= 9\n* 1 <= n <= 60\n\nInput format: The first line contains the integer `k`. The second line contains the integer `n`.\n\nOutput format: A list of space-separated combinations, each combination's numbers are space-separated, and combinations are sorted lexicographically.",
        "starter_code": "# Find all valid combinations of k numbers that sum up to n using numbers from 1 to 9.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "7"
                ],
                "expected_output": "1 2 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_58",
        "title": "N-Queens",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThe `n`-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return all distinct solutions to the `n`-queens puzzle. Each solution contains a distinct board configuration of the `n`-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n\n**Constraints**\n* 1 <= n <= 9\n\nInput format: A single integer `n`.\n\nOutput format: Each solution on new lines, with each row of the board represented by a string and rows separated by a newline character, solutions separated by a blank line.",
        "starter_code": "# Solve the N-Queens puzzle.",
        "test_cases": [
            {
                "input": [
                    "4"
                ],
                "expected_output": ". Q . .\n. . . Q\nQ . . .\n. . Q .\n\n. . Q .\nQ . . .\n. . . Q\n. Q . ."
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_59",
        "title": "N-Queens II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThe `n`-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return the number of distinct solutions to the `n`-queens puzzle.\n\n**Constraints**\n* 1 <= n <= 9\n\nInput format: A single integer `n`.\n\nOutput format: A single integer representing the number of distinct solutions.",
        "starter_code": "# Count the number of distinct solutions to the N-Queens puzzle.",
        "test_cases": [
            {
                "input": [
                    "4"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_60",
        "title": "Maximum Subarray",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, find the subarray with the largest sum, and return its sum.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the largest sum.",
        "starter_code": "# Find the subarray with the largest sum.",
        "test_cases": [
            {
                "input": [
                    "-2 1 -3 4 -1 2 1 -5 4"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_61",
        "title": "Spiral Matrix",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` `matrix`, return all elements of the `matrix` in spiral order.\n\n**Constraints**\n* m == matrix.length\n* n == matrix[i].length\n* 1 <= m, n <= 10\n* -100 <= matrix[i][j] <= 100\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing the `matrix`.\n\nOutput format: A space-separated string of the elements in spiral order.",
        "starter_code": "# Return all elements of a matrix in spiral order.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "1 2 3",
                    "4 5 6",
                    "7 8 9"
                ],
                "expected_output": "1 2 3 6 9 8 7 4 5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_62",
        "title": "Jump Game II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of non-negative integers `nums`, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. You can assume that you can always reach the last index.\n\n**Constraints**\n* 1 <= nums.length <= 10^4\n* 0 <= nums[i] <= 1000\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the minimum number of jumps.",
        "starter_code": "# Find the minimum number of jumps to reach the last index.",
        "test_cases": [
            {
                "input": [
                    "2 3 1 1 4"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_63",
        "title": "Permutation Sequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThe set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations. By listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:\n1. \"123\"\n2. \"132\"\n3. \"213\"\n4. \"231\"\n5. \"312\"\n6. \"321\"\nGiven `n` and `k`, return the `k`th permutation sequence.\n\n**Constraints**\n* 1 <= n <= 9\n* 1 <= k <= n!\n\nInput format: The first line contains the integer `n`. The second line contains the integer `k`.\n\nOutput format: A string representing the `k`th permutation sequence.",
        "starter_code": "# Return the kth permutation sequence.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3"
                ],
                "expected_output": "213"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_64",
        "title": "Valid Sudoku",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nDetermine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n1. Each of the digits 1-9 must appear exactly once in each row.\n2. Each of the digits 1-9 must appear exactly once in each column.\n3. Each of the digits 1-9 must appear exactly once in each of the nine 3x3 sub-boxes of the grid.\nA Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated.\n\n**Constraints**\n* board.length == 9\n* board[i].length == 9\n* board[i][j] is a digit (1-9) or '.'.\n\nInput format: 9 lines, each containing 9 characters representing a row of the Sudoku board. Use '.' for empty cells.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Determine if a 9x9 Sudoku board is valid.",
        "test_cases": [
            {
                "input": [
                    "53..7....",
                    "6..195...",
                    ".98....6.",
                    "8...6...3",
                    "4..8.3..1",
                    "7...2...6",
                    ".6....28.",
                    "...419..5",
                    "....8..79"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_65",
        "title": "Sudoku Solver",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nWrite a program to solve a Sudoku puzzle by filling the empty cells. A Sudoku solution must satisfy all of the following rules:\n1. Each of the digits 1-9 must appear exactly once in each row.\n2. Each of the digits 1-9 must appear exactly once in each column.\n3. Each of the digits 1-9 must appear exactly once in each of the nine 3x3 sub-boxes of the grid.\nThe `.` character indicates empty cells.\n\n**Constraints**\n* board.length == 9\n* board[i].length == 9\n* board[i][j] is a digit (1-9) or '.'.\n* It is guaranteed that the input board has only one solution.\n\nInput format: 9 lines, each containing 9 characters representing a row of the Sudoku board. Use '.' for empty cells.\n\nOutput format: 9 lines, each containing 9 characters representing a row of the solved Sudoku board.",
        "starter_code": "# Solve a Sudoku puzzle.",
        "test_cases": [
            {
                "input": [
                    "53..7....",
                    "6..195...",
                    ".98....6.",
                    "8...6...3",
                    "4..8.3..1",
                    "7...2...6",
                    ".6....28.",
                    "...419..5",
                    "....8..79"
                ],
                "expected_output": "534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_66",
        "title": "Count Primes",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer `n`, return the number of prime numbers that are strictly less than `n`.\n\n**Constraints**\n* 0 <= n <= 5 * 10^6\n\nInput format: A single integer `n`.\n\nOutput format: A single integer representing the count of primes.",
        "starter_code": "# Count the number of prime numbers less than n.",
        "test_cases": [
            {
                "input": [
                    "10"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_67",
        "title": "Super Ugly Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA super ugly number is a positive integer whose prime factors are in a given integer array `primes`. Given an integer `n` and an array of integers `primes`, return the `n`th super ugly number. The `n`th super ugly number is guaranteed to fit in a 32-bit signed integer.\n\n**Constraints**\n* 1 <= n <= 10^5\n* 1 <= primes.length <= 100\n* 2 <= primes[i] <= 1000\n* `primes` is sorted in ascending order.\n* All `primes[i]` are distinct and are prime numbers.\n\nInput format: The first line contains the integer `n`. The second line contains space-separated integers for `primes`.\n\nOutput format: A single integer representing the `n`th super ugly number.",
        "starter_code": "# Find the nth super ugly number.",
        "test_cases": [
            {
                "input": [
                    "12",
                    "2 7 13 19"
                ],
                "expected_output": "32"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_68",
        "title": "Pow(x, n)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nImplement `pow(x, n)`, which calculates `x` raised to the power `n` (`x^n`).\n\n**Constraints**\n* -100.0 < x < 100.0\n* -2^31 <= n <= 2^31 - 1\n* -10^9 <= x^n <= 10^9\n\nInput format: The first line contains the float `x`. The second line contains the integer `n`.\n\nOutput format: A single float representing `x^n`.",
        "starter_code": "# Implement pow(x, n).",
        "test_cases": [
            {
                "input": [
                    "2.00000",
                    "10"
                ],
                "expected_output": "1024.00000"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_69",
        "title": "Maximum Product Subarray",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\n\n**Constraints**\n* 1 <= nums.length <= 2 * 10^4\n* -10 <= nums[i] <= 10\n* The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the largest product.",
        "starter_code": "# Find the subarray with the largest product.",
        "test_cases": [
            {
                "input": [
                    "2 3 -2 4"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_70",
        "title": "Find Peak Element",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA peak element is an element that is strictly greater than its neighbors. Given a 0-indexed integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks. You may imagine that `nums[-1] = nums[n] = -inf`.\nYou must write an algorithm that runs in `O(log n)` time.\n\n**Constraints**\n* 1 <= nums.length <= 1000\n* -2^31 <= nums[i] <= 2^31 - 1\n* `nums[i] != nums[i + 1]` for all valid `i`.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the index of a peak element.",
        "starter_code": "# Find a peak element in an array.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 1"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_71",
        "title": "Search in Rotated Sorted Array II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere is an integer array `nums` sorted in non-decreasing order (not necessarily distinct values). Prior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k` (0 <= k < nums.length) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). Given the array `nums` after the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` otherwise. You must write an algorithm that runs in `O(log n)` average time complexity, but worst-case could be `O(n)`.\n\n**Constraints**\n* 1 <= nums.length <= 5000\n* -10^4 <= nums[i] <= 10^4\n* `nums` is guaranteed to be rotated at some pivot.\n* -10^4 <= target <= 10^4\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `target`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Search for a target in a rotated sorted array with duplicates.",
        "test_cases": [
            {
                "input": [
                    "2 5 6 0 0 1 2",
                    "0"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_72",
        "title": "Find Minimum in Rotated Sorted Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSuppose an array of length `n` sorted in ascending order is rotated between 1 and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]` if it was rotated 4 times. Given the sorted rotated array `nums` of unique elements, return the minimum element of this array. You must write an algorithm that runs in `O(log n)` time.\n\n**Constraints**\n* n == nums.length\n* 1 <= n <= 5000\n* -5000 <= nums[i] <= 5000\n* All the integers in `nums` are unique.\n* `nums` is sorted and rotated at an unknown pivot.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the minimum element.",
        "starter_code": "# Find the minimum element in a rotated sorted array.",
        "test_cases": [
            {
                "input": [
                    "3 4 5 1 2"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_73",
        "title": "Find Minimum in Rotated Sorted Array II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSuppose an array of length `n` sorted in ascending order is rotated between 1 and `n` times. Given the sorted rotated array `nums` which may contain duplicates, return the minimum element of this array. You must write an algorithm that runs in `O(log n)` average time complexity, but worst-case could be `O(n)`.\n\n**Constraints**\n* n == nums.length\n* 1 <= n <= 5000\n* -5000 <= nums[i] <= 5000\n* `nums` is sorted and rotated at an unknown pivot.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the minimum element.",
        "starter_code": "# Find the minimum element in a rotated sorted array with duplicates.",
        "test_cases": [
            {
                "input": [
                    "1 3 5"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_74",
        "title": "Decode Ways",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA message containing letters from `A-Z` can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (and sometimes a digit may be mapped to a letter separately or as part of a larger number). Given a string `s` containing only digits, return the number of ways to decode it. A valid message must be decoded using valid mappings. For example, \"06\" is invalid because \"6\" cannot be mapped into 'F' (as a single digit) and \"06\" is not a valid two-digit mapping to 'J' (as a two-digit number).\n\n**Constraints**\n* 1 <= s.length <= 100\n* `s` contains only digits and may contain leading zero(s).\n\nInput format: A single line containing the string `s`.\n\nOutput format: A single integer representing the number of ways to decode.",
        "starter_code": "# Calculate the number of ways to decode a message.",
        "test_cases": [
            {
                "input": [
                    "12"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_75",
        "title": "Subsets II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` that may contain duplicates, return all possible unique subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.\n\n**Constraints**\n* 1 <= nums.length <= 10\n* -10 <= nums[i] <= 10\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: Each unique subset on a new line, with space-separated integers, sorted lexicographically. An empty set is represented by \"[]\".",
        "starter_code": "# Generate all possible unique subsets of an array that may contain duplicates.",
        "test_cases": [
            {
                "input": [
                    "1 2 2"
                ],
                "expected_output": "[]\n1\n1 2\n1 2 2\n2\n2 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_76",
        "title": "Word Search",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` `board` of characters and a string `word`, return `true` if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n**Constraints**\n* m == board.length\n* n == board[i].length\n* 1 <= m, n <= 6\n* 1 <= word.length <= 15\n* board and word consist of only lowercase and uppercase English letters.\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` characters representing a row of the `board`. The last line contains the string `word`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Determine if a word exists in a grid.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "4",
                    "A B C E",
                    "S F C S",
                    "A D E E",
                    "ABCCED"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_77",
        "title": "Longest Substring Without Repeating Characters",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, find the length of the longest substring without repeating characters.\n\n**Constraints**\n* 0 <= s.length <= 5 * 10^4\n* `s` consists of English letters, digits, symbols and spaces.\n\nInput format: A single line containing the string `s`.\n\nOutput format: A single integer representing the length.",
        "starter_code": "# Find the length of the longest substring without repeating characters.",
        "test_cases": [
            {
                "input": [
                    "abcabcbb"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_78",
        "title": "Longest Palindromic Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, find the longest palindromic subsequence's length in `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\n* 1 <= s.length <= 1000\n* `s` consists only of lowercase English letters.\n\nInput format: A single line containing the string `s`.\n\nOutput format: A single integer representing the length.",
        "starter_code": "# Find the length of the longest palindromic subsequence.",
        "test_cases": [
            {
                "input": [
                    "bbbab"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_79",
        "title": "Perfect Squares",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer `n`, return the least number of perfect square numbers that sum to `n`. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares.\n\n**Constraints**\n* 1 <= n <= 10^4\n\nInput format: A single integer `n`.\n\nOutput format: A single integer representing the least number of perfect squares.",
        "starter_code": "# Find the least number of perfect square numbers that sum to n.",
        "test_cases": [
            {
                "input": [
                    "12"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_80",
        "title": "Coin Change",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.\n\n**Constraints**\n* 1 <= coins.length <= 12\n* 1 <= coins[i] <= 2^31 - 1\n* 0 <= amount <= 10^4\n\nInput format: The first line contains space-separated integers for `coins`. The second line contains the integer `amount`.\n\nOutput format: A single integer representing the fewest number of coins.",
        "starter_code": "# Find the fewest number of coins to make up a given amount.",
        "test_cases": [
            {
                "input": [
                    "1 2 5",
                    "11"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_81",
        "title": "Longest Increasing Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return the length of the longest strictly increasing subsequence.\n\n**Constraints**\n* 1 <= nums.length <= 2500\n* -10^4 <= nums[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the length.",
        "starter_code": "# Find the length of the longest strictly increasing subsequence.",
        "test_cases": [
            {
                "input": [
                    "10 9 2 5 3 7 101 18"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_82",
        "title": "Word Break",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words.\n\n**Constraints**\n* 1 <= s.length <= 20\n* 1 <= wordDict.length <= 1000\n* 1 <= wordDict[i].length <= 20\n* `s` and `wordDict[i]` consist of only lowercase English letters.\n* All the strings of `wordDict` are unique.\n\nInput format: The first line contains the string `s`. The second line contains space-separated strings for `wordDict`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Determine if a string can be segmented into a sequence of dictionary words.",
        "test_cases": [
            {
                "input": [
                    "leetcode",
                    "leet code"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_83",
        "title": "Number of Islands",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` 2D binary grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n**Constraints**\n* m == grid.length\n* n == grid[i].length\n* 1 <= m, n <= 300\n* grid[i][j] is '0' or '1'.\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` characters ('0' or '1') representing a row of the `grid`.\n\nOutput format: A single integer representing the number of islands.",
        "starter_code": "# Count the number of islands in a binary grid.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "5",
                    "11110",
                    "11010",
                    "11000",
                    "00000"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_84",
        "title": "Longest Common Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \"ace\" is a subsequence of \"abcde\". A common subsequence of two strings is a subsequence that is common to both strings.\n\n**Constraints**\n* 1 <= text1.length, text2.length <= 1000\n* `text1` and `text2` consist of only lowercase English characters.\n\nInput format: The first line contains the string `text1`. The second line contains the string `text2`.\n\nOutput format: A single integer representing the length.",
        "starter_code": "# Find the length of the longest common subsequence.",
        "test_cases": [
            {
                "input": [
                    "abcde",
                    "ace"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_85",
        "title": "Perfect Squares II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer `n`, return the count of different ways to express `n` as the sum of perfect square numbers. A perfect square is an integer that is the square of an integer. The order of numbers in the sum does not matter. For example, for `n=5`, `1+4` and `4+1` are considered the same way.\n\n**Constraints**\n* 1 <= n <= 1000\n\nInput format: A single integer `n`.\n\nOutput format: A single integer representing the count of different ways.",
        "starter_code": "# Count the number of different ways to express n as the sum of perfect square numbers.",
        "test_cases": [
            {
                "input": [
                    "5"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_86",
        "title": "Word Ladder",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA transformation sequence from `beginWord` to `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk -> endWord` such that:\n* Every adjacent pair of words differs by a single letter.\n* Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n* `endWord` is in `wordList`.\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or 0 if no such sequence exists.\n\n**Constraints**\n* 1 <= beginWord.length <= 10\n* endWord.length == beginWord.length\n* 1 <= wordList.length <= 5000\n* wordList[i].length == beginWord.length\n* `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n* `beginWord != endWord`\n* All the words in `wordList` are unique.\n\nInput format: The first line contains the string `beginWord`. The second line contains the string `endWord`. The third line contains space-separated strings for `wordList`.\n\nOutput format: A single integer representing the length of the shortest transformation sequence.",
        "starter_code": "# Find the length of the shortest word ladder.",
        "test_cases": [
            {
                "input": [
                    "hit",
                    "cog",
                    "hot dot dog lot log cog"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_87",
        "title": "Word Ladder II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA transformation sequence from `beginWord` to `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk -> endWord` such that:\n* Every adjacent pair of words differs by a single letter.\n* Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n* `endWord` is in `wordList`.\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return all the shortest transformation sequences from `beginWord` to `endWord`. If there are no transformation sequences, return an empty list. Return the sequences in any order.\n\n**Constraints**\n* 1 <= beginWord.length <= 10\n* endWord.length == beginWord.length\n* 1 <= wordList.length <= 5000\n* wordList[i].length == beginWord.length\n* `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n* `beginWord != endWord`\n* All the words in `wordList` are unique.\n\nInput format: The first line contains the string `beginWord`. The second line contains the string `endWord`. The third line contains space-separated strings for `wordList`.\n\nOutput format: Each shortest transformation sequence on a new line, with space-separated words, sequences sorted lexicographically.",
        "starter_code": "# Find all shortest word ladder transformation sequences.",
        "test_cases": [
            {
                "input": [
                    "hit",
                    "cog",
                    "hot dot dog lot log cog"
                ],
                "expected_output": "hit hot dot dog cog\nhit hot lot log cog"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_88",
        "title": "Longest Consecutive Sequence in a Binary Tree",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a binary tree, return the length of the longest consecutive sequence path. The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (increasing order).\n\n**Constraints**\n* The number of nodes in the tree is in the range [0, 3 * 10^4].\n* -10^9 <= Node.val <= 10^9\n\nInput format: A space-separated string representing the binary tree in level order, with \"null\" for missing children.\n\nOutput format: A single integer representing the length of the longest consecutive sequence path.",
        "starter_code": "# Find the length of the longest consecutive sequence path in a binary tree (parent to child).",
        "test_cases": [
            {
                "input": [
                    "1 null 3 2 4 null null null 5"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_89",
        "title": "Minimum Window Substring",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return an empty string `\"\"`. The test cases will be generated such that the answer is unique.\n\n**Constraints**\n* m == s.length\n* n == t.length\n* 1 <= m, n <= 10^5\n* `s` and `t` consist of uppercase and lowercase English letters.\n\nInput format: The first line contains the string `s`. The second line contains the string `t`.\n\nOutput format: A string representing the minimum window substring.",
        "starter_code": "# Find the minimum window substring.",
        "test_cases": [
            {
                "input": [
                    "ADOBECODEBANC",
                    "ABC"
                ],
                "expected_output": "BANC"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_90",
        "title": "Burst Balloons",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by `nums[i]`. You are asked to burst all the balloons. If you burst the `i`th balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a '1' painted on it. Return the maximum coins you can collect by bursting the balloons.\n\n**Constraints**\n* n == nums.length\n* 1 <= n <= 500\n* 0 <= nums[i] <= 100\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the maximum coins.",
        "starter_code": "# Calculate the maximum coins collected by bursting balloons.",
        "test_cases": [
            {
                "input": [
                    "3 1 5 8"
                ],
                "expected_output": "167"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_91",
        "title": "Sliding Window Maximum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return the maximum sliding window.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n* 1 <= k <= nums.length\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `k`.\n\nOutput format: A space-separated string of the maximum values in each sliding window.",
        "starter_code": "# Find the maximum value in each sliding window.",
        "test_cases": [
            {
                "input": [
                    "1 3 -1 -3 5 3 6 7",
                    "3"
                ],
                "expected_output": "3 3 5 5 6 7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_92",
        "title": "Minimum Height Trees",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, it is a connected graph without cycles. Given a tree of `n` nodes labeled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, find all `Minimum Height Trees (MHTs)` and return a list of their root labels. You can return the answer in any order. The height of a rooted tree is the number of edges on the longest downward path from the root to a leaf.\n\n**Constraints**\n* 1 <= n <= 2 * 10^4\n* edges.length == n - 1\n* 0 <= ai, bi < n\n* ai != bi\n* The given input is guaranteed to be a tree and has no repeated edges.\n\nInput format: The first line contains the integer `n`. The second line contains an integer `m` representing the number of edges. The next `m` lines each contain two space-separated integers representing an edge.\n\nOutput format: A space-separated string of root labels, sorted numerically.",
        "starter_code": "# Find all Minimum Height Trees.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "3",
                    "1 0",
                    "1 2",
                    "1 3"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_93",
        "title": "Maximum XOR of Two Numbers in an Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return the maximum result of `nums[i] XOR nums[j]`, where `0 <= i <= j < n`.\n\n**Constraints**\n* 1 <= nums.length <= 2 * 10^5\n* 0 <= nums[i] <= 2^31 - 1\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the maximum XOR sum.",
        "starter_code": "# Find the maximum XOR of two numbers in an array.",
        "test_cases": [
            {
                "input": [
                    "3 10 5 25 2 8"
                ],
                "expected_output": "28"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_94",
        "title": "Trapping Rain Water II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\n\n**Constraints**\n* m == heightMap.length\n* n == heightMap[i].length\n* 1 <= m, n <= 200\n* 0 <= heightMap[i][j] <= 2 * 10^4\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing a row of the `heightMap`.\n\nOutput format: A single integer representing the volume of water trapped.",
        "starter_code": "# Compute the volume of water that can be trapped after raining on a 2D elevation map.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "1 4 3",
                    "3 2 4",
                    "2 3 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_95",
        "title": "Longest Palindrome by Concatenating Two Letter Words",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of strings `words`. Each element `words[i]` consists of two lowercase English letters. Concatenate the words in any order to form the longest palindrome. Return the length of the longest palindrome that can be built. If no palindrome can be built, return 0.\n\n**Constraints**\n* 1 <= words.length <= 10^5\n* words[i].length == 2\n* `words[i]` consists of lowercase English letters.\n\nInput format: A single line of space-separated strings representing the `words` array.\n\nOutput format: A single integer representing the length of the longest palindrome.",
        "starter_code": "# Find the length of the longest palindrome by concatenating two-letter words.",
        "test_cases": [
            {
                "input": [
                    "lc cpgg gc cl"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_96",
        "title": "Concatenated Words",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of strings `words` (without duplicates), return all concatenated words in the given list. A concatenated word is defined as a string that is formed by concatenating at least two shorter words in the given array.\n\n**Constraints**\n* 1 <= words.length <= 10^4\n* 1 <= words[i].length <= 30\n* `words[i]` consists of only lowercase English letters.\n* All the strings of `words` are unique.\n* The sum of `words[i].length` is at most 10^5.\n\nInput format: A single line of space-separated strings representing the `words` array.\n\nOutput format: A space-separated string of concatenated words, sorted alphabetically.",
        "starter_code": "# Find all concatenated words in a list of strings.",
        "test_cases": [
            {
                "input": [
                    "cat cats catsdog catdog dog dogs"
                ],
                "expected_output": "catsdog catdog"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_97",
        "title": "Number of Longest Increasing Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return the number of longest increasing subsequences. The test cases are generated so that the answer fits in a 32-bit signed integer.\n\n**Constraints**\n* 1 <= nums.length <= 2000\n* -10^6 <= nums[i] <= 10^6\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the number of longest increasing subsequences.",
        "starter_code": "# Count the number of longest increasing subsequences.",
        "test_cases": [
            {
                "input": [
                    "1 3 5 4 7"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_98",
        "title": "Remove Invalid Parentheses",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. Return all possible results in any order.\n\n**Constraints**\n* 1 <= s.length <= 25\n* `s` consists of lowercase English letters and parentheses '(' and ')'.\n* The number of operations to remove parentheses is at most 20.\n\nInput format: A single line containing the string `s`.\n\nOutput format: Each valid string on a new line, sorted alphabetically.",
        "starter_code": "# Remove the minimum number of invalid parentheses to make the string valid.",
        "test_cases": [
            {
                "input": [
                    "()())()"
                ],
                "expected_output": "()()()\n(())()"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_99",
        "title": "Find K Closest Elements",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are preferred.\n\n**Constraints**\n* 1 <= k <= arr.length\n* 1 <= arr.length <= 10^4\n* Absolute value of elements in the array and `x` will not exceed 10^4.\n\nInput format: The first line contains space-separated integers for `arr`. The second line contains the integer `k`. The third line contains the integer `x`.\n\nOutput format: A space-separated string of the `k` closest integers.",
        "starter_code": "# Find the k closest integers to x in a sorted array.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5",
                    "4",
                    "3"
                ],
                "expected_output": "1 2 3 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_100",
        "title": "Maximum Points You Can Obtain from Cards",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are several cards arranged in a row, and each card has an associated number of points. The points are given as an integer array `cardPoints`. In one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards. Your score is the sum of the points of the cards you have taken. Given the integer array `cardPoints` and the integer `k`, return the maximum score you can obtain.\n\n**Constraints**\n* 1 <= cardPoints.length <= 10^5\n* 1 <= cardPoints[i] <= 10^4\n* 1 <= k <= cardPoints.length\n\nInput format: The first line contains space-separated integers for `cardPoints`. The second line contains the integer `k`.\n\nOutput format: A single integer representing the maximum score.",
        "starter_code": "# Calculate the maximum score obtained by taking k cards from the beginning or end of the row.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5 6 1",
                    "3"
                ],
                "expected_output": "12"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_101",
        "title": "Target Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums` and an integer `target`. You want to build an expression out of `nums` by adding one of the symbols `'+'` or `'-'` before each integer in `nums` and then concatenate all the integers. Return the number of different expressions that you can build, which evaluates to `target`.\n\n**Constraints**\n* 1 <= nums.length <= 20\n* 0 <= nums[i] <= 1000\n* 0 <= sum(nums[i]) <= 1000\n* -1000 <= target <= 1000\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `target`.\n\nOutput format: A single integer representing the number of different expressions.",
        "starter_code": "# Find the number of different expressions that evaluate to target.",
        "test_cases": [
            {
                "input": [
                    "1 1 1 1 1",
                    "3"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_102",
        "title": "Find All Anagrams in a String",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `s` and `p`, return an array of all the start indices of `p`'s anagrams in `s`. You may return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\n* 1 <= s.length, p.length <= 3 * 10^4\n* `s` and `p` consist of lowercase English letters.\n\nInput format: The first line contains the string `s`. The second line contains the string `p`.\n\nOutput format: A space-separated string of start indices, sorted numerically.",
        "starter_code": "# Find all the start indices of p's anagrams in s.",
        "test_cases": [
            {
                "input": [
                    "cbaebabacd",
                    "abc"
                ],
                "expected_output": "0 6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_103",
        "title": "Minimum Number of Arrows to Burst Balloons",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are some spherical balloons spread in a 2D plane. For each balloon, provided are the `x_start` and `x_end` coordinates of the horizontal diameter. Since it's a sphere, imagine the balloons are long vertical cylinders instead. You can shoot arrows vertically. An arrow shot at `x` will burst all balloons whose diameter encompasses `x`. That is, for balloon `i` if `x_start_i <= x <= x_end_i`, then it is burst. Given an array of `points` where each `points[i] = [x_start, x_end]`, return the minimum number of arrows that must be shot to burst all balloons.\n\n**Constraints**\n* 1 <= points.length <= 10^5\n* points[i].length == 2\n* -2^31 <= x_start, x_end <= 2^31 - 1\n* `x_start <= x_end`\n\nInput format: The first line contains an integer `n` representing the number of balloons. The next `n` lines each contain two space-separated integers representing `x_start` and `x_end`.\n\nOutput format: A single integer representing the minimum number of arrows.",
        "starter_code": "# Find the minimum number of arrows needed to burst all balloons.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "10 16",
                    "2 8",
                    "1 6",
                    "7 12"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_104",
        "title": "Partition Equal Subset Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return `true` if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or `false` otherwise.\n\n**Constraints**\n* 1 <= nums.length <= 200\n* 1 <= nums[i] <= 100\n* 1 <= sum(nums[i]) <= 20000\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Determine if an array can be partitioned into two subsets with equal sum.",
        "test_cases": [
            {
                "input": [
                    "1 5 11 5"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_105",
        "title": "Find the Duplicate Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one repeated number in `nums`, return this repeated number. You must solve the problem without modifying the array `nums` and uses only constant extra space.\n\n**Constraints**\n* 1 <= n <= 10^5\n* `nums.length == n + 1`\n* 1 <= nums[i] <= n\n* All the integers in `nums` appear only once except for precisely one integer which appears two or more times.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the repeated number.",
        "starter_code": "# Find the duplicate number in an array without modifying it and using constant extra space.",
        "test_cases": [
            {
                "input": [
                    "1 3 4 2 2"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_106",
        "title": "Task Scheduler",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a character array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task takes one unit of time. There is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is, at least `n` units of time must pass between any two same tasks. Return the minimum number of units of time the CPU will take to finish all the given tasks.\n\n**Constraints**\n* 1 <= tasks.length <= 10^4\n* `tasks[i]` is an uppercase English letter.\n* 0 <= n <= 100\n\nInput format: The first line contains space-separated characters for `tasks`. The second line contains the integer `n`.\n\nOutput format: A single integer representing the minimum number of units of time.",
        "starter_code": "# Calculate the minimum time for the CPU to finish all tasks with a cooldown period.",
        "test_cases": [
            {
                "input": [
                    "A A A B B B",
                    "2"
                ],
                "expected_output": "8"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_107",
        "title": "Minimum Cost to Connect Sticks",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou have some sticks with positive integer lengths. You can connect two sticks of lengths `x` and `y` into one stick of length `x + y` with a cost of `x + y`. You must connect all the sticks until there is only one stick left. Return the minimum cost of connecting all the given sticks.\n\n**Constraints**\n* 1 <= sticks.length <= 10^4\n* 1 <= sticks[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `sticks` array.\n\nOutput format: A single integer representing the minimum cost.",
        "starter_code": "# Find the minimum cost to connect all sticks.",
        "test_cases": [
            {
                "input": [
                    "2 4 3"
                ],
                "expected_output": "14"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_108",
        "title": "Path Sum III",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return the number of paths where the sum of the nodes' values equals `targetSum`. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n\n**Constraints**\n* The number of nodes in the tree is in the range [0, 1000].\n* -10^9 <= Node.val <= 10^9\n* -1000 <= targetSum <= 1000\n* The depth of the tree will not exceed 1000.\n\nInput format: The first line contains a space-separated string representing the binary tree in level order, with \"null\" for missing children. The second line contains the integer `targetSum`.\n\nOutput format: A single integer representing the number of paths.",
        "starter_code": "# Count the number of paths in a binary tree that sum to targetSum.",
        "test_cases": [
            {
                "input": [
                    "10 5 -3 3 2 null 11 3 -2 null 1",
                    "8"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_109",
        "title": "Course Schedule",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. For example, the pair `[0, 1]` indicates that to take course 0 you have to first take course 1.\nReturn `true` if you can finish all courses. Otherwise, return `false`.\n\n**Constraints**\n* 1 <= numCourses <= 2000\n* 0 <= prerequisites.length <= 5000\n* prerequisites[i].length == 2\n* 0 <= ai, bi < numCourses\n* `ai != bi`\n* All the pairs `[ai, bi]` are unique.\n\nInput format: The first line contains the integer `numCourses`. The second line contains an integer `n` representing the number of prerequisites. The next `n` lines each contain two space-separated integers representing a prerequisite `[ai, bi]`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Determine if all courses can be finished given prerequisites.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "1",
                    "1 0"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_110",
        "title": "Course Schedule II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n\n**Constraints**\n* 1 <= numCourses <= 2000\n* 0 <= prerequisites.length <= 5000\n* prerequisites[i].length == 2\n* 0 <= ai, bi < numCourses\n* `ai != bi`\n* All the pairs `[ai, bi]` are unique.\n\nInput format: The first line contains the integer `numCourses`. The second line contains an integer `n` representing the number of prerequisites. The next `n` lines each contain two space-separated integers representing a prerequisite `[ai, bi]`.\n\nOutput format: A space-separated string of the course ordering, or an empty string if impossible.",
        "starter_code": "# Find a valid course ordering to finish all courses.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "1",
                    "1 0"
                ],
                "expected_output": "0 1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_111",
        "title": "Longest Increasing Path in a Matrix",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` integer matrix, return the length of the longest increasing path in the matrix. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., no wrap-around is allowed).\n\n**Constraints**\n* m == matrix.length\n* n == matrix[i].length\n* 1 <= m, n <= 200\n* 0 <= matrix[i][j] <= 10^9\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing a row of the `matrix`.\n\nOutput format: A single integer representing the length of the longest increasing path.",
        "starter_code": "# Find the length of the longest increasing path in a matrix.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "9 9 4",
                    "6 6 8",
                    "2 1 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_112",
        "title": "Count Complete Tree Nodes",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a complete binary tree, return the number of the nodes in the tree. In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes inclusive at the last level `h`.\n\n**Constraints**\n* The number of nodes in the tree is in the range [0, 5 * 10^4].\n* 0 <= Node.val <= 5 * 10^4\n* The tree is guaranteed to be complete.\n\nInput format: A space-separated string representing the complete binary tree in level order, with \"null\" for missing children.\n\nOutput format: A single integer representing the number of nodes.",
        "starter_code": "# Count the number of nodes in a complete binary tree.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5 6"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_113",
        "title": "Find the Celebrity",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSuppose you are in a social gathering, and you have to find the celebrity. A celebrity is someone who is known by everyone else but does not know anyone else. Given `n` people at the party, labeled from 0 to `n - 1`. You are given a helper function `knows(a, b)` which returns `true` if person `a` knows person `b`, and `false` otherwise. Return the label of the celebrity if a celebrity exists, or -1 if there is no celebrity. You must use the `knows` function. The number of calls to `knows` should be minimized.\n\n**Constraints**\n* `n` will be at most 1000.\n\nInput format: The first line contains the integer `n`. The next `n` lines form an `n x n` adjacency matrix where `matrix[i][j]` is 1 if `i` knows `j`, and 0 otherwise. This matrix implicitly defines the `knows` function.\n\nOutput format: A single integer representing the label of the celebrity.",
        "starter_code": "# Find the celebrity using the knows function.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "0 0 1",
                    "1 0 1",
                    "0 0 0"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_114",
        "title": "Decode String",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an encoded string, return its decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated `k` times. `k` is guaranteed to be a positive integer. You may assume that the input string is always valid; no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for repeat numbers, i.e. no letters like 'a1' or '3[a]2[b]'.\n\n**Constraints**\n* 1 <= s.length <= 30\n* `s` consists of lowercase English letters, digits, and square brackets '[]'.\n* `s` is guaranteed to be a valid encoding.\n* All integers in `s` are in the range [1, 300].\n\nInput format: A single line containing the string `s`.\n\nOutput format: A string representing the decoded string.",
        "starter_code": "# Decode an encoded string.",
        "test_cases": [
            {
                "input": [
                    "3[a]2[bc]"
                ],
                "expected_output": "aaabcbc"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_115",
        "title": "Kth Smallest Element in a BST",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), and an integer `k`, return the `k`th smallest value (1-indexed) of all the values in the nodes of the tree.\n\n**Constraints**\n* The number of nodes in the tree is in the range [1, 10^4].\n* 0 <= Node.val <= 10^4\n* 1 <= k <= Number of Nodes\n\nInput format: The first line contains a space-separated string representing the BST in level order, with \"null\" for missing children. The second line contains the integer `k`.\n\nOutput format: A single integer representing the `k`th smallest value.",
        "starter_code": "# Find the kth smallest element in a BST.",
        "test_cases": [
            {
                "input": [
                    "3 1 4 null 2",
                    "1"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_116",
        "title": "Queue Reconstruction by Height",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of people `people`, where `people[i] = [hi, ki]` represents the `i`th person having a height `hi` and exactly `ki` people in front of this person who have a height greater than or equal to `hi`. Reconstruct and return the queue that is represented by this array of people.\n\n**Constraints**\n* 1 <= people.length <= 2000\n* 0 <= hi <= 10^6\n* 0 <= ki < people.length\n\nInput format: The first line contains an integer `n` representing the number of people. The next `n` lines each contain two space-separated integers representing `hi` and `ki`.\n\nOutput format: Each person's `[hi, ki]` on a new line, with space-separated integers, sorted by height and then k-value.",
        "starter_code": "# Reconstruct the queue based on heights and k-values.",
        "test_cases": [
            {
                "input": [
                    "6",
                    "7 0",
                    "4 4",
                    "7 1",
                    "5 0",
                    "6 1",
                    "5 2"
                ],
                "expected_output": "5 0\n7 0\n5 2\n6 1\n4 4\n7 1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_117",
        "title": "Top K Frequent Elements",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n* `k` is in the range `[1, the number of unique elements in the array]`.\n* It is guaranteed that the answer is unique.\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `k`.\n\nOutput format: A space-separated string of the `k` most frequent elements, sorted numerically.",
        "starter_code": "# Find the k most frequent elements in an array.",
        "test_cases": [
            {
                "input": [
                    "1 1 1 2 2 3",
                    "2"
                ],
                "expected_output": "1 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_118",
        "title": "Kth Largest Element in an Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element. You must solve it without using the library's sort function.\n\n**Constraints**\n* 1 <= k <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `k`.\n\nOutput format: A single integer representing the `k`th largest element.",
        "starter_code": "# Find the kth largest element in an array without using library sort.",
        "test_cases": [
            {
                "input": [
                    "3 2 1 5 6 4",
                    "2"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_119",
        "title": "Longest Duplicate Substring",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, consider all duplicate substrings: (contiguous) substrings of `s` that occur 2 or more times. The occurrences may overlap. Return any longest duplicate substring. If no duplicate substring exists, return an empty string `\"\"`.\n\n**Constraints**\n* 2 <= s.length <= 3 * 10^4\n* `s` consists of lowercase English letters.\n\nInput format: A single line containing the string `s`.\n\nOutput format: A string representing the longest duplicate substring.",
        "starter_code": "# Find the longest duplicate substring.",
        "test_cases": [
            {
                "input": [
                    "banana"
                ],
                "expected_output": "ana"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_120",
        "title": "Minimum Absolute Difference in BST",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\n**Constraints**\n* The number of nodes in the tree is in the range [2, 10^4].\n* 0 <= Node.val <= 10^5\n\nInput format: A space-separated string representing the BST in level order, with \"null\" for missing children.\n\nOutput format: A single integer representing the minimum absolute difference.",
        "starter_code": "# Find the minimum absolute difference between any two nodes in a BST.",
        "test_cases": [
            {
                "input": [
                    "1 null 2 3"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_121",
        "title": "Find Largest Value in Each Tree Row",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\n\n**Constraints**\n* The number of nodes in the tree is in the range [0, 10^4].\n* -2^31 <= Node.val <= 2^31 - 1\n\nInput format: A space-separated string representing the binary tree in level order, with \"null\" for missing children.\n\nOutput format: A space-separated string of the largest values in each row.",
        "starter_code": "# Find the largest value in each row of a binary tree.",
        "test_cases": [
            {
                "input": [
                    "1 3 2 5 3 null 9"
                ],
                "expected_output": "1 3 9"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_122",
        "title": "Max Area of Island",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. The area of an island is the number of cells with a value of `1` in the island. Return the maximum area of an island in `grid`. If there is no island, return 0.\n\n**Constraints**\n* m == grid.length\n* n == grid[i].length\n* 1 <= m, n <= 50\n* grid[i][j] is either 0 or 1.\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` characters ('0' or '1') representing a row of the `grid`.\n\nOutput format: A single integer representing the maximum area of an island.",
        "starter_code": "# Find the maximum area of an island in a binary grid.",
        "test_cases": [
            {
                "input": [
                    "8",
                    "13",
                    "0010000000000",
                    "0000000000000",
                    "0000110000000",
                    "0000110000000",
                    "0000000000000",
                    "0000110000000",
                    "0010000000000",
                    "0000000000000"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_123",
        "title": "Cut Off Trees for Golf Event",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:\n* `0` represents an obstacle that you cannot walk through.\n* `1` represents ground that you can walk over.\n* Any number greater than `1` represents a tree that you can walk over and cut off. When you cut off a tree, the value at that point becomes 1 (ground).\nYou are starting at `(0, 0)`. In one step, you can move one unit horizontally or vertically. You must cut off the trees in increasing order of their heights. If you cannot reach a tree, return -1. Return the minimum number of steps to cut off all the trees.\n\n**Constraints**\n* m == forest.length\n* n == forest[i].length\n* 1 <= m, n <= 50\n* 0 <= forest[i][j] <= 10^9\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers representing a row of the `forest`.\n\nOutput format: A single integer representing the minimum number of steps.",
        "starter_code": "# Calculate the minimum steps to cut off all trees in a forest.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "1 2 3",
                    "0 0 4",
                    "7 6 5"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_124",
        "title": "Friend Circles",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are `n` students in a class. Some of them are friends, and some are not. Their friendship is transitive. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. A friend circle is a group of students who are friends (directly or indirectly) with each other. Given an `n x n` matrix `M` representing the friendship status between students. If `M[i][j] = 1`, then the `i`th and `j`th students are direct friends with each other, otherwise `M[i][j] = 0`. Return the total number of friend circles in the class.\n\n**Constraints**\n* n == M.length\n* n == M[i].length\n* 1 <= n <= 200\n* M[i][j] is 1 or 0.\n* `M[i][i] == 1`\n* `M[i][j] == M[j][i]`\n\nInput format: The first line contains an integer `n` representing the number of students. The next `n` lines each contain `n` space-separated integers representing a row of the `M` matrix.\n\nOutput format: A single integer representing the total number of friend circles.",
        "starter_code": "# Count the total number of friend circles.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 1 0",
                    "1 1 0",
                    "0 0 1"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_125",
        "title": "Matrix 01",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` binary matrix `mat`, return the distance of the nearest `0` for each cell. The distance between two adjacent cells is 1.\n\n**Constraints**\n* m == mat.length\n* n == mat[i].length\n* 1 <= m, n <= 10^4\n* 1 <= m * n <= 10^5\n* mat[i][j] is either 0 or 1.\n* There is at least one `0` in `mat`.\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` space-separated integers ('0' or '1') representing a row of the `mat`.\n\nOutput format: The `m` lines of the distance matrix, with space-separated integers in each row.",
        "starter_code": "# Calculate the distance of the nearest 0 for each cell in a binary matrix.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "0 0 0",
                    "0 1 0",
                    "0 0 0"
                ],
                "expected_output": "0 0 0\n0 1 0\n0 0 0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_126",
        "title": "Longest Absolute File Path",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSuppose we have a file system represented as a string. The string `input` is a list of directory entries separated by `\\n`. Each entry represents either a file or a directory. A directory entry may be indented by some number of tabs `\\t` to indicate that it is a subdirectory of the most recently listed directory that is less deeply indented. Files have a `.` in their name.\nFor example, `\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tfile2.ext\"` represents:\n```\ndir\n    subdir1\n        file1.ext\n        subsubdir1\n    subdir2\n        file2.ext\n```\nReturn the length of the longest absolute path to a file in the file system. If there is no file in the system, return 0.\n\n**Constraints**\n* 1 <= input.length <= 10^4\n* `input` may contain lowercase English letters, digits, '.', ' ', and `\\n` and `\\t`.\n\nInput format: A single line containing the string `input` (with `\\n` and `\\t` literal characters escaped if provided in a single line or as multiline input).\n\nOutput format: A single integer representing the length of the longest absolute file path.",
        "starter_code": "# Find the length of the longest absolute file path.",
        "test_cases": [
            {
                "input": [
                    "dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tfile2.ext"
                ],
                "expected_output": "20"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_127",
        "title": "Minimum Genetic Mutation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', 'T'. Suppose we have a `startGene`, an `endGene`, and a `bank` of valid gene mutations. A gene mutation is defined as a one-character change in the gene string. Return the minimum number of mutations needed to mutate from `startGene` to `endGene`. If there is no such mutation, return -1. Note that the `startGene` does not need to be in the `bank`.\n\n**Constraints**\n* `startGene.length == 8`\n* `endGene.length == 8`\n* `0 <= bank.length <= 10`\n* `bank[i].length == 8`\n* `startGene`, `endGene`, and `bank[i]` consist of 'A', 'C', 'G', and 'T'.\n\nInput format: The first line contains the string `startGene`. The second line contains the string `endGene`. The third line contains space-separated strings for `bank`.\n\nOutput format: A single integer representing the minimum number of mutations.",
        "starter_code": "# Find the minimum number of genetic mutations.",
        "test_cases": [
            {
                "input": [
                    "AACCGGTT",
                    "AACCGGTA",
                    "AACCGGTA AACCGGAA AACCGGAT"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_128",
        "title": "Decode Ways II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA message containing letters from `A-Z` can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\nTo decode an encoded message, all the digits must be grouped and then mapped back into letters. The mapping `*` means it can be any digit from '1' to '9'. Given a string `s` containing digits and the '*' character, return the number of ways to decode it. Since the answer may be very large, return it modulo 10^9 + 7.\n\n**Constraints**\n* 1 <= s.length <= 10^5\n* `s` contains only digits and '*'.\n\nInput format: A single line containing the string `s`.\n\nOutput format: A single integer representing the number of ways to decode modulo 10^9 + 7.",
        "starter_code": "# Calculate the number of ways to decode a message with '*' wildcards.",
        "test_cases": [
            {
                "input": [
                    "*"
                ],
                "expected_output": "9"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_129",
        "title": "Koko Eating Bananas",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nKoko loves to eat bananas. There are `n` piles of bananas, the `i`th pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from it. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko likes to eat slowly but still finish all the bananas before the guards return.\nReturn the minimum integer `k` such that she can eat all the bananas within `h` hours.\n\n**Constraints**\n* 1 <= piles.length <= 10^4\n* 1 <= piles[i] <= 10^9\n* piles.length <= h <= 10^9\n\nInput format: The first line contains space-separated integers for `piles`. The second line contains the integer `h`.\n\nOutput format: A single integer representing the minimum `k`.",
        "starter_code": "# Find the minimum eating speed k for Koko to eat all bananas within h hours.",
        "test_cases": [
            {
                "input": [
                    "3 6 7 11",
                    "8"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_130",
        "title": "Split Array Largest Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `nums` which consists of non-negative integers and an integer `k`, you are asked to split the array into `k` non-empty subarrays such that the largest sum among these `k` subarrays is minimized. Return the minimized largest sum.\n\n**Constraints**\n* 1 <= nums.length <= 1000\n* 0 <= nums[i] <= 10^6\n* 1 <= k <= min(50, nums.length)\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `k`.\n\nOutput format: A single integer representing the minimized largest sum.",
        "starter_code": "# Split an array into k subarrays to minimize the largest sum among them.",
        "test_cases": [
            {
                "input": [
                    "7 2 5 10 8",
                    "2"
                ],
                "expected_output": "18"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_131",
        "title": "Minimum Time to Complete All Tasks",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are `n` tasks, labeled from `0` to `n - 1`. You are given a 2D integer array `tasks`, where `tasks[i] = [starti, endi, durationi]` denotes that the `i`th task has a duration of `durationi` and must be run between `starti` and `endi` (inclusive). You have a computer that can run a task for 1 unit of time at any given second. You want to find the minimum total time that the computer must be turned on to complete all tasks.\n\n**Constraints**\n* 1 <= tasks.length <= 2000\n* 0 <= starti <= endi <= 10^9\n* 1 <= durationi <= 1000\n\nInput format: The first line contains an integer `n` representing the number of tasks. The next `n` lines each contain three space-separated integers representing `starti`, `endi`, and `durationi`.\n\nOutput format: A single integer representing the minimum total time.",
        "starter_code": "# Find the minimum total time the computer must be on to complete all tasks.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "1 3 2",
                    "2 5 3"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_132",
        "title": "Smallest Range II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums` and an integer `k`. For each index `i` in `nums`, you can either add `k` to `nums[i]` or subtract `k` from `nums[i]`. Your goal is to minimize the difference between the maximum and minimum values of the modified array `nums`. Return the minimum possible difference.\n\n**Constraints**\n* 1 <= nums.length <= 10^4\n* 0 <= nums[i] <= 10^4\n* 0 <= k <= 10^4\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `k`.\n\nOutput format: A single integer representing the minimum possible difference.",
        "starter_code": "# Minimize the difference between max and min values of modified array by adding/subtracting k.",
        "test_cases": [
            {
                "input": [
                    "1 3 6",
                    "3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_133",
        "title": "Largest Sum of Averages",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums` and an integer `k`. You have to partition `nums` into at most `k` non-empty contiguous subarrays. For each partition, you calculate the average of the elements in that subarray. The total score is the sum of these averages. Return the largest score you can achieve.\n\n**Constraints**\n* 1 <= nums.length <= 100\n* 1 <= nums[i] <= 10^4\n* 1 <= k <= nums.length\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains the integer `k`.\n\nOutput format: A single float representing the largest sum of averages.",
        "starter_code": "# Find the largest sum of averages after partitioning an array into at most k subarrays.",
        "test_cases": [
            {
                "input": [
                    "9 1 2 3 9",
                    "3"
                ],
                "expected_output": "20.0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_134",
        "title": "Largest Time for Given Digits",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `arr` of 4 digits, return the largest 24-hour time that can be formed with these digits. 24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The smallest 24-hour time is 00:00, and the largest is 23:59. Digits can be used in any order, and each digit must be used exactly once. Return an empty string if no valid time can be formed.\n\n**Constraints**\n* arr.length == 4\n* 0 <= arr[i] <= 9\n\nInput format: A single line of space-separated integers representing the `arr` array.\n\nOutput format: A string representing the largest valid time.",
        "starter_code": "# Find the largest 24-hour time that can be formed with 4 given digits.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4"
                ],
                "expected_output": "23:41"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_135",
        "title": "Smallest String With Swaps",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a string `s` and an array of pairs of indices `pairs` where `pairs[i] = [ai, bi]` indicates that two characters at `ai` and `bi` should be swapped. Return the lexicographically smallest string that can be formed by doing swaps any number of times.\n\n**Constraints**\n* 1 <= s.length <= 10^5\n* 0 <= pairs.length <= 10^5\n* 0 <= ai, bi < s.length\n* `ai != bi`\n* `s` consists of lowercase English letters.\n\nInput format: The first line contains the string `s`. The second line contains an integer `n` representing the number of pairs. The next `n` lines each contain two space-separated integers representing a pair `[ai, bi]`.\n\nOutput format: A string representing the lexicographically smallest string.",
        "starter_code": "# Find the lexicographically smallest string formed by swaps.",
        "test_cases": [
            {
                "input": [
                    "dcba",
                    "2",
                    "0 3",
                    "1 2"
                ],
                "expected_output": "abcd"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_136",
        "title": "Minimum Number of Frogs Croaking",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the string `croakOfFrogs`, which represents a concatenation of `n` frog sounds \"croakcroak...\". The sounds are produced by `n` frogs simultaneously. Each frog is making a single sound. We want to find the minimum number of frogs required to produce the given `croakOfFrogs` string. A frog is considered to have finished its croak once it has produced the full \"croak\" sound. A frog can start a new croak immediately after finishing one.\n\n**Constraints**\n* 1 <= croakOfFrogs.length <= 10^5\n* `croakOfFrogs` is a permutation of 'c', 'r', 'o', 'a', 'k'.\n\nInput format: A single line containing the string `croakOfFrogs`.\n\nOutput format: A single integer representing the minimum number of frogs.",
        "starter_code": "# Find the minimum number of frogs required to produce the given croak string.",
        "test_cases": [
            {
                "input": [
                    "croakcroak"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_137",
        "title": "Minimum Swaps to Make Sequences Increasing",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given two integer arrays `nums1` and `nums2` of equal length of `n`. We can swap `nums1[i]` and `nums2[i]` at every index `i`. Return the minimum number of swaps to make both `nums1` and `nums2` strictly increasing. It is guaranteed that the given input always has a solution.\n\n**Constraints**\n* n == nums1.length == nums2.length\n* 1 <= n <= 10^5\n* 0 <= nums1[i], nums2[i] <= 2 * 10^5\n\nInput format: The first line contains space-separated integers for `nums1`. The second line contains space-separated integers for `nums2`.\n\nOutput format: A single integer representing the minimum number of swaps.",
        "starter_code": "# Find the minimum swaps to make both sequences strictly increasing.",
        "test_cases": [
            {
                "input": [
                    "1 3 5 4",
                    "1 2 3 7"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_138",
        "title": "Longest String Chain",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of `words`. A word `word1` is a predecessor of `word2` if and only if we can add exactly one letter anywhere in `word1` to make it equal to `word2`. For example, \"abc\" is a predecessor of \"abac\". A word chain is a sequence of words `word1, word2, ..., wordk` such that `word1` is a predecessor of `word2`, `word2` is a predecessor of `word3`, and so on. A single word is also a word chain with length 1. Return the longest possible word chain with words chosen from the given list of `words`.\n\n**Constraints**\n* 1 <= words.length <= 1000\n* 1 <= words[i].length <= 16\n* `words[i]` consists of lowercase English letters.\n\nInput format: A single line of space-separated strings representing the `words` array.\n\nOutput format: A single integer representing the length of the longest word chain.",
        "starter_code": "# Find the longest possible word chain.",
        "test_cases": [
            {
                "input": [
                    "a b ba bca bda bdca"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_139",
        "title": "Cheapest Flights Within K Stops",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`. You are also given three integers `src`, `dst`, and `k`, return the cheapest price from `src` to `dst` with at most `k` stops. If there is no such route, return -1.\n\n**Constraints**\n* 1 <= n <= 100\n* 0 <= flights.length <= (n * (n - 1) / 2)\n* 0 <= fromi, toi < n\n* 0 <= pricei <= 10^4\n* 0 <= k <= n - 1\n* All the pairs `(fromi, toi)` are unique.\n\nInput format: The first line contains the integer `n`. The second line contains an integer `m` representing the number of flights. The next `m` lines each contain three space-separated integers representing a flight `[fromi, toi, pricei]`. The next line contains the integer `src`. The next line contains the integer `dst`. The last line contains the integer `k`.\n\nOutput format: A single integer representing the cheapest price.",
        "starter_code": "# Find the cheapest price from src to dst with at most k stops.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "0 1 100",
                    "1 2 100",
                    "0 2 500",
                    "0",
                    "2",
                    "1"
                ],
                "expected_output": "200"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_140",
        "title": "Minimum Cost to Cut a Stick",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a wooden stick of length `n` units. The stick is cut into `m` pieces at positions indicated by the `cuts` array. For example, if `n = 10` and `cuts = [3, 7]`, you cut the stick at 3 and 7. The cost of a cut is the length of the stick being cut. Return the minimum total cost to cut the stick as specified.\n\n**Constraints**\n* 2 <= n <= 10^6\n* 1 <= cuts.length <= 100\n* 1 <= cuts[i] <= n - 1\n* All the integers in `cuts` are unique.\n\nInput format: The first line contains the integer `n`. The second line contains space-separated integers for `cuts`.\n\nOutput format: A single integer representing the minimum total cost.",
        "starter_code": "# Find the minimum total cost to cut a stick.",
        "test_cases": [
            {
                "input": [
                    "7",
                    "1 3 4 5"
                ],
                "expected_output": "16"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_141",
        "title": "Count Ways to Build Good Strings",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven `zero`, `one`, `low`, and `high`, count the number of \"good\" strings. A string is good if its length is between `low` and `high` (inclusive), and it can be formed by concatenating '0' for `zero` times or '1' for `one` times. Return the total number of good strings, modulo 10^9 + 7.\n\n**Constraints**\n* 1 <= zero, one <= 10^5\n* 1 <= low <= high <= 10^5\n\nInput format: The first line contains the integer `zero`. The second line contains the integer `one`. The third line contains the integer `low`. The fourth line contains the integer `high`.\n\nOutput format: A single integer representing the total number of good strings modulo 10^9 + 7.",
        "starter_code": "# Count the number of good strings with lengths between low and high.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "3",
                    "2",
                    "3"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_142",
        "title": "Longest Cycle in a Graph",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a directed graph with `n` nodes labeled from `0` to `n - 1`, where each node has at most one outgoing edge. The graph is represented by a 0-indexed array `edges` of length `n`, where `edges[i]` is the node that node `i` connects to, or -1 if node `i` has no outgoing edge. Return the length of the longest cycle in the graph. If no cycle exists, return -1.\n\n**Constraints**\n* n == edges.length\n* 1 <= n <= 10^5\n* -1 <= edges[i] < n\n* `edges[i] == i` will not be present.\n\nInput format: The first line contains an integer `n`. The second line contains space-separated integers for `edges`.\n\nOutput format: A single integer representing the length of the longest cycle.",
        "starter_code": "# Find the length of the longest cycle in a directed graph with at most one outgoing edge per node.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "3 3 4 2 3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_143",
        "title": "Shortest Bridge",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water. An island is a 4-directionally connected group of `1`s. There are exactly two islands in `grid`. You may change 0s to 1s to connect the two islands into one island. Return the minimum number of 0s you need to change.\n\n**Constraints**\n* n == grid.length == grid[i].length\n* 2 <= n <= 100\n* grid[i][j] is either 0 or 1.\n* There are exactly two islands in `grid`.\n\nInput format: The first line contains an integer `n` representing the size of the square matrix. The next `n` lines each contain `n` characters ('0' or '1') representing a row of the `grid`.\n\nOutput format: A single integer representing the minimum number of 0s to change.",
        "starter_code": "# Find the minimum number of 0s to change to connect two islands.",
        "test_cases": [
            {
                "input": [
                    "5",
                    "11000",
                    "11000",
                    "00000",
                    "00000",
                    "00011"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_144",
        "title": "Stone Game II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nAlice and Bob take turns playing a game with piles of stones. There are `n` piles arranged in a row, and the `i`th pile has `piles[i]` stones. The game ends when all stones have been removed. Alice starts first. Initially, `M = 1`. On each player's turn, that player can take `x` piles from the beginning of the remaining row, where `1 <= x <= 2M`. Then, they update `M` to `max(M, x)`. The person who takes the most stones wins. Return the maximum number of stones Alice can get if she plays optimally.\n\n**Constraints**\n* 1 <= piles.length <= 100\n* 1 <= piles[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `piles` array.\n\nOutput format: A single integer representing the maximum stones Alice can get.",
        "starter_code": "# Find the maximum stones Alice can get in Stone Game II.",
        "test_cases": [
            {
                "input": [
                    "2 7 9 4 4"
                ],
                "expected_output": "10"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_145",
        "title": "Minimum Number of Refueling Stops",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA car travels from a starting position to a destination which is `target` miles east of the starting position. Along the way, there are `stations`. Each station `stations[i] = [positioni, fueli]` means that the station `i` is `positioni` miles east of the starting position and has `fueli` liters of fuel. The car starts with `startFuel` liters of fuel. Each liter of fuel allows the car to travel 1 mile. Return the minimum number of refueling stops the car must make to reach its destination. If it cannot reach the destination, return -1. Note that if the car reaches a station with 0 fuel, it can still refuel there.\n\n**Constraints**\n* 1 <= target <= 10^9\n* 0 <= startFuel <= 10^9\n* 0 <= stations.length <= 500\n* 0 <= positioni <= target\n* 1 <= fueli <= 10^9\n* All `positioni` are distinct.\n* `stations` is sorted by `positioni` in a non-decreasing order.\n\nInput format: The first line contains the integer `target`. The second line contains the integer `startFuel`. The third line contains an integer `n` representing the number of stations. The next `n` lines each contain two space-separated integers representing a station `[positioni, fueli]`.\n\nOutput format: A single integer representing the minimum number of refueling stops.",
        "starter_code": "# Find the minimum number of refueling stops to reach the destination.",
        "test_cases": [
            {
                "input": [
                    "100",
                    "10",
                    "2",
                    "10 60",
                    "20 30"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_146",
        "title": "Word Search II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` `board` of characters and a list of strings `words`, return all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in the same word.\n\n**Constraints**\n* m == board.length\n* n == board[i].length\n* 1 <= m, n <= 12\n* 1 <= words.length <= 10^5\n* 1 <= words[i].length <= 10\n* `board[i][j]` and `words[k]` consist of lowercase English letters.\n* All the words in `words` are unique.\n\nInput format: The first line contains an integer `m` representing the number of rows. The second line contains an integer `n` representing the number of columns. The next `m` lines each contain `n` characters representing a row of the `board`. The last line contains space-separated strings for `words`.\n\nOutput format: A space-separated string of words found on the board, sorted alphabetically.",
        "starter_code": "# Find all words from a list that exist on a board.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "4",
                    "o a a n",
                    "e t a e",
                    "i h k r",
                    "i f l v",
                    "oath pea eat rain"
                ],
                "expected_output": "eat oath"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_147",
        "title": "Binary Tree Maximum Path Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. The path does not need to pass through the root. The path sum of a path is the sum of the node's values in the path. Given the `root` of a binary tree, return the maximum path sum of any non-empty path.\n\n**Constraints**\n* The number of nodes in the tree is in the range [1, 3 * 10^4].\n* -1000 <= Node.val <= 1000\n\nInput format: A space-separated string representing the binary tree in level order, with \"null\" for missing children.\n\nOutput format: A single integer representing the maximum path sum.",
        "starter_code": "# Find the maximum path sum in a binary tree.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_148",
        "title": "Minimum Number of K Consecutive Bit Flips",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a binary array `nums` and an integer `k`. A `k`-bit flip is chosen `nums[i]` and flips `nums[i]`, `nums[i+1]`, ..., `nums[i+k-1]`. Return the minimum number of `k`-bit flips required to make all elements of `nums` 1. If it is impossible, return -1.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* 1 <= k <= nums.length\n\nInput format: The first line contains space-separated integers representing the `nums` array. The second line contains the integer `k`.\n\nOutput format: A single integer representing the minimum number of flips.",
        "starter_code": "# Find the minimum number of k-bit flips to make all elements 1.",
        "test_cases": [
            {
                "input": [
                    "0 1 0",
                    "1"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_149",
        "title": "Longest Substring with At Most K Distinct Characters",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.\n\n**Constraints**\n* 1 <= s.length <= 5 * 10^4\n* 0 <= k <= s.length\n* `s` consists of lowercase English letters.\n\nInput format: The first line contains the string `s`. The second line contains the integer `k`.\n\nOutput format: A single integer representing the length.",
        "starter_code": "# Find the length of the longest substring with at most k distinct characters.",
        "test_cases": [
            {
                "input": [
                    "eceba",
                    "2"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_150",
        "title": "Minimum Replacements to Sort the Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a 0-indexed integer array `nums`. In one operation, you can replace any element `nums[i]` with two or more elements that sum to `nums[i]`. For example, if `nums[i] = 7`, you can replace it with `2` and `5`. Your goal is to make the array sorted in non-decreasing order, `nums[0] <= nums[1] <= ... <= nums[n-1]`. Return the minimum number of operations required.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* 1 <= nums[i] <= 10^9\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer representing the minimum number of operations.",
        "starter_code": "# Find the minimum replacements to sort the array.",
        "test_cases": [
            {
                "input": [
                    "3 9 3"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_151",
        "title": "Robot Path Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA robot is placed at the origin (0,0) of a 2D grid. It receives a sequence of commands. Each command is either 'U' (move up), 'D' (move down), 'L' (move left), or 'R' (move right). Each move changes its coordinate by 1 unit in the specified direction. After executing all commands, return the robot's final position (x, y).",
        "starter_code": "# Simulate a robot's movement on a 2D grid.",
        "test_cases": [
            {
                "input": [
                    "UDLR"
                ],
                "expected_output": "0 0"
            },
            {
                "input": [
                    "UUUDL"
                ],
                "expected_output": "-1 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_152",
        "title": "Traffic Flow Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate traffic flow on a single-lane road of length N. Cars are represented by 'C' and empty spots by '.'. Cars move one step forward if the next spot is empty. If a car reaches the end of the road, it disappears. Given the initial state of the road and a number of time steps T, return the state of the road after T steps.",
        "starter_code": "# Simulate traffic flow on a single-lane road.",
        "test_cases": [
            {
                "input": [
                    "C.C.",
                    "1"
                ],
                "expected_output": ".C.C"
            },
            {
                "input": [
                    "C.C.",
                    "2"
                ],
                "expected_output": "C..C"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_153",
        "title": "Cellular Automaton 1D",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nImplement a 1D cellular automaton with a given rule. The rule is represented by an 8-bit binary number, where each bit corresponds to a possible 3-cell neighborhood (e.g., 111, 110, ..., 000). Given an initial 1D array of cells (0 or 1) and a number of generations, return the state of the array after the specified generations.",
        "starter_code": "# Implement a 1D cellular automaton.",
        "test_cases": [
            {
                "input": [
                    "01000",
                    "30",
                    "1"
                ],
                "expected_output": "00000"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_154",
        "title": "Particle Collision in 1D",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate N particles moving on a 1D line. Each particle has an initial position and a constant velocity (positive for right, negative for left). When two particles collide, they pass through each other without changing their velocities. Determine the total number of collisions that occur within a given time interval T.",
        "starter_code": "# Simulate particle collisions in 1D.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "0 1",
                    "10 -1",
                    "5"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_155",
        "title": "Resource Gathering Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a resource gathering process. You have a set of workers, each with a specific gathering rate for a particular resource (e.g., wood, stone). Resources regenerate at a fixed rate in different locations. Given initial worker assignments and resource availability, simulate for a given number of time steps and return the total amount of each resource gathered.",
        "starter_code": "# Simulate resource gathering.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "wood 10",
                    "stone 5",
                    "1",
                    "wood 1",
                    "stone 1",
                    "10"
                ],
                "expected_output": "wood: 100, stone: 50"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_156",
        "title": "Dice Game Probability",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a simple dice game where two players roll a standard six-sided die. The first player to reach a target score wins. Determine the probability that Player 1 wins, assuming fair dice and optimal play (not truly optimal, just sequential turns and first to reach score wins). You can simulate a large number of games to estimate this probability.",
        "starter_code": "# Estimate dice game probability through simulation.",
        "test_cases": [
            {
                "input": [
                    "10",
                    "10000"
                ],
                "expected_output": "0.5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_157",
        "title": "Ants on a Stick",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nN ants are placed on a stick of length L. Each ant moves at a constant speed of 1 unit per second. When two ants collide, they instantly reverse direction. When an ant reaches an end of the stick, it falls off. Determine the minimum and maximum time it takes for all ants to fall off the stick.",
        "starter_code": "# Calculate min/max time for ants to fall off a stick.",
        "test_cases": [
            {
                "input": [
                    "10",
                    "3",
                    "2 5 8"
                ],
                "expected_output": "2 8"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_158",
        "title": "Epidemic Spread Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate the spread of a simple epidemic on a 2D grid. Each cell can be healthy, infected, or immune. An infected cell infects its healthy neighbors with a certain probability. Infected cells recover and become immune after a fixed duration. Simulate the spread for a given number of days and report the number of infected, healthy, and immune cells each day.",
        "starter_code": "# Simulate epidemic spread.",
        "test_cases": [
            {
                "input": [
                    "5 5",
                    "0 0",
                    "0.5",
                    "2",
                    "3"
                ],
                "expected_output": "Day 1: I=3, H=22, R=0\nDay 2: I=5, H=20, R=0\nDay 3: I=0, H=20, R=5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_159",
        "title": "Elevator Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate an elevator system in a building with F floors. The elevator has a maximum capacity C and moves at a certain speed between floors. People arrive at different floors at different times with destination floors. Simulate the elevator's operation for a given duration and report the total time spent by all passengers waiting.",
        "starter_code": "# Simulate an elevator system.",
        "test_cases": [
            {
                "input": [
                    "10",
                    "5",
                    "1",
                    "1",
                    "0 1 5",
                    "0 2 8",
                    "100"
                ],
                "expected_output": "Wait Time: 10"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_160",
        "title": "Bank Queue Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a bank with multiple tellers. Customers arrive at random intervals and require a random amount of service time. Customers join the shortest queue. Simulate the bank's operation for a given period and report the average customer waiting time and the maximum queue length.",
        "starter_code": "# Simulate a bank queue.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "100",
                    "5 15",
                    "2 10"
                ],
                "expected_output": "Avg Wait: 5.0, Max Queue: 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_161",
        "title": "Monty Hall Problem Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate the Monty Hall problem. There are three doors, one with a car and two with goats. The contestant picks a door. The host then opens another door, revealing a goat. The contestant is then given the option to switch their choice to the remaining unopened door or stick with their original choice. Simulate a large number of games (e.g., 10000) for both strategies (switching vs. sticking) and report the win percentage for each strategy.",
        "starter_code": "# Simulate the Monty Hall problem.",
        "test_cases": [
            {
                "input": [
                    "10000"
                ],
                "expected_output": "Switch Win %: ~0.66, Stick Win %: ~0.33"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_162",
        "title": "Random Walk in 2D",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a random walk in a 2D grid. A particle starts at (0,0) and at each step moves one unit in a random direction (up, down, left, right). After N steps, calculate the Manhattan distance from the origin (0,0) to the final position. Perform this simulation many times (e.g., 10000) and report the average Manhattan distance.",
        "starter_code": "# Simulate random walk in 2D.",
        "test_cases": [
            {
                "input": [
                    "10",
                    "10000"
                ],
                "expected_output": "Average Manhattan Distance: ~7.07"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_163",
        "title": "Billiards Ball Simulation (Simplified)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a single billiards ball moving inside a rectangular table. The ball starts at a given position and velocity. When it hits a wall, its corresponding velocity component reverses (perfect elastic collision). Simulate the ball's movement for a given time T and return its final position.",
        "starter_code": "# Simulate billiards ball movement.",
        "test_cases": [
            {
                "input": [
                    "10 5",
                    "1 1",
                    "1 1",
                    "2"
                ],
                "expected_output": "3 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_164",
        "title": "Coin Flipping Streak",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a sequence of coin flips. Given the number of flips N, determine the longest streak of consecutive heads (H) or tails (T). Perform the simulation multiple times (e.g., 10000) and report the average longest streak length.",
        "starter_code": "# Simulate coin flips and find longest streak.",
        "test_cases": [
            {
                "input": [
                    "100",
                    "10000"
                ],
                "expected_output": "Average longest streak: ~6-7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_165",
        "title": "Circular Queue Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate the operations of a circular queue of fixed size N. Support 'enqueue' (add element to rear) and 'dequeue' (remove element from front) operations. If the queue is full, enqueue fails. If empty, dequeue fails. Return the final state of the queue after a sequence of operations.",
        "starter_code": "# Simulate a circular queue.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "enqueue 1",
                    "enqueue 2",
                    "enqueue 3",
                    "dequeue",
                    "enqueue 4"
                ],
                "expected_output": "2 3 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_166",
        "title": "Flocking Behavior (Simplified)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a very simplified flocking behavior of birds in 2D. Each bird tries to move towards the average position of its neighbors within a certain radius, and also tries to align its velocity with its neighbors. Given initial positions and velocities of N birds, simulate for T time steps and return their final positions.",
        "starter_code": "# Simulate simplified flocking behavior.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "0 0 1 0",
                    "1 1 0 1",
                    "2 0 -1 0",
                    "1"
                ],
                "expected_output": "0.33 0.33"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_167",
        "title": "Game of Life (Partial)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nImplement a single step of Conway's Game of Life on a 2D grid. Given an initial grid of living (1) and dead (0) cells, apply the rules for one generation and return the new state of the grid.",
        "starter_code": "# Implement one step of Conway's Game of Life.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "0 1 0",
                    "0 1 0",
                    "0 1 0"
                ],
                "expected_output": "0 0 0\n1 1 1\n0 0 0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_168",
        "title": "Market Trading Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a simplified stock market with a single stock. Agents buy or sell based on simple rules (e.g., buy if price drops, sell if price rises). The price changes based on supply and demand. Simulate for T time steps and report the final stock price and the total number of trades.",
        "starter_code": "# Simulate a simplified stock market.",
        "test_cases": [
            {
                "input": [
                    "100",
                    "100",
                    "10"
                ],
                "expected_output": "Final Price: 105, Trades: 20"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_169",
        "title": "Packet Routing Simulation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate packet routing in a simplified network. Given a network topology (nodes and links with capacities) and a set of packets, each with a source and destination, simulate their journey. Packets take one unit of time per link. Links have limited capacity. Report the time taken for each packet to reach its destination and any packets that failed to be delivered due to congestion.",
        "starter_code": "# Simulate packet routing in a network.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "0 1 1",
                    "1 2 1",
                    "0 2 2",
                    "2",
                    "0 2",
                    "0 2"
                ],
                "expected_output": "Packet 1: 2, Packet 2: 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_170",
        "title": "Robot Cleaner Path",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA robotic cleaner moves on a grid. It starts at (0,0) facing East. It follows a sequence of commands: 'F' (move forward one cell), 'R' (turn right 90 degrees), 'L' (turn left 90 degrees). The cleaner marks each visited cell. Determine the number of unique cells visited by the cleaner.",
        "starter_code": "# Calculate unique cells visited by a robot cleaner.",
        "test_cases": [
            {
                "input": [
                    "FFRLF"
                ],
                "expected_output": "3"
            },
            {
                "input": [
                    "FFFF"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_171",
        "title": "Longest Path in Directed Acyclic Graph (DAG)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a Directed Acyclic Graph (DAG), find the length of the longest path in the graph. The length of a path is the number of edges in it.",
        "starter_code": "# Find the longest path in a DAG.",
        "test_cases": [
            {
                "input": [
                    "4 3",
                    "0 1",
                    "0 2",
                    "1 3"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_172",
        "title": "Minimum Spanning Tree (Prim's or Kruskal's)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a weighted, undirected graph, find the total weight of its Minimum Spanning Tree (MST).",
        "starter_code": "# Find the Minimum Spanning Tree of a graph.",
        "test_cases": [
            {
                "input": [
                    "4 5",
                    "0 1 10",
                    "0 2 6",
                    "0 3 5",
                    "1 3 15",
                    "2 3 4"
                ],
                "expected_output": "19"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_173",
        "title": "Shortest Path in Weighted Graph (Dijkstra's)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a weighted, directed graph and a source node, find the shortest path from the source to all other nodes.",
        "starter_code": "# Find shortest paths using Dijkstra's algorithm.",
        "test_cases": [
            {
                "input": [
                    "5 7",
                    "0 1 10",
                    "0 2 3",
                    "1 2 1",
                    "1 3 2",
                    "2 1 4",
                    "2 3 8",
                    "2 4 2",
                    "0"
                ],
                "expected_output": "0:0 1:7 2:3 3:9 4:5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_174",
        "title": "Network Flow (Max Flow Min Cut)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a flow network with capacities on edges, find the maximum possible flow from a source node to a sink node.",
        "starter_code": "# Calculate max flow in a network.",
        "test_cases": [
            {
                "input": [
                    "4 5",
                    "0 1 20",
                    "0 2 10",
                    "1 2 5",
                    "1 3 10",
                    "2 3 20",
                    "0 3"
                ],
                "expected_output": "30"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_175",
        "title": "Topological Sort",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a Directed Acyclic Graph (DAG), return a topological sorting of its vertices. If multiple valid sorts exist, return any one.",
        "starter_code": "# Perform a topological sort.",
        "test_cases": [
            {
                "input": [
                    "6 6",
                    "5 2",
                    "5 0",
                    "4 0",
                    "4 1",
                    "2 3",
                    "3 1"
                ],
                "expected_output": "5 4 2 3 1 0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_176",
        "title": "Knight's Tour on Chessboard",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an N x N chessboard and a starting position of a knight, determine the minimum number of moves required for the knight to reach a target position. If the target is unreachable, return -1.",
        "starter_code": "# Calculate knight's minimum moves.",
        "test_cases": [
            {
                "input": [
                    "8",
                    "0 0",
                    "7 7"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_177",
        "title": "Job Scheduling with Deadlines",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a list of jobs, where each job has a start time, end time, and a profit. Find the maximum profit you can achieve by scheduling a subset of jobs such that no two jobs overlap.",
        "starter_code": "# Find maximum profit from job scheduling.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "1 2 50",
                    "3 5 20",
                    "6 19 100",
                    "2 100 200"
                ],
                "expected_output": "250"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_178",
        "title": "Cache Simulation (LRU)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nSimulate a Least Recently Used (LRU) cache. Given a cache capacity and a sequence of page requests, calculate the number of cache hits and misses.",
        "starter_code": "# Simulate an LRU cache.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 2 3 4 1 2 5 1 2 3 4 5"
                ],
                "expected_output": "Hits: 2, Misses: 10"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_179",
        "title": "Sudoku Solver",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a partially filled 9x9 Sudoku grid, solve it by filling in the empty cells. Assume there is only one unique solution. Return the solved grid.",
        "starter_code": "# Solve a Sudoku puzzle.",
        "test_cases": [
            {
                "input": [
                    "53..7....",
                    "6..195...",
                    ".98....6.",
                    "8...6...3",
                    "4..8.3..1",
                    "7...2...6",
                    ".6....28.",
                    "...419..5",
                    "....8..79"
                ],
                "expected_output": "531678942\n672195384\n198342567\n859761423\n426853791\n713924856\n967530281\n284719635\n305286179"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_180",
        "title": "N-Queens Problem",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer n, return all distinct solutions to the n-queens puzzle. Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.",
        "starter_code": "# Solve the N-Queens problem.",
        "test_cases": [
            {
                "input": [
                    "4"
                ],
                "expected_output": ".Q..\n...Q\nQ...\n..Q.\n\n..Q.\nQ...\n...Q\n.Q.."
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_181",
        "title": "Traveling Salesperson Problem (TSP - Brute Force or DP for small N)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a set of cities and the distances between every pair of cities, find the shortest possible route that visits each city exactly once and returns to the origin city.",
        "starter_code": "# Solve the Traveling Salesperson Problem.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "0 10 15 20",
                    "10 0 35 25",
                    "15 35 0 30",
                    "20 25 30 0"
                ],
                "expected_output": "80"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_182",
        "title": "Knapsack Problem (0/1)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a set of items, each with a weight and a value, and a knapsack with a maximum weight capacity, determine the items to include in the knapsack so that the total value is as large as possible while not exceeding the capacity.",
        "starter_code": "# Solve the 0/1 Knapsack problem.",
        "test_cases": [
            {
                "input": [
                    "3 50",
                    "60 10",
                    "100 20",
                    "120 30"
                ],
                "expected_output": "220"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_183",
        "title": "Rod Cutting Problem",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a rod of length n and a table of prices for rods of length i (i from 1 to n), determine the maximum revenue obtainable by cutting up the rod and selling the pieces.",
        "starter_code": "# Solve the Rod Cutting problem.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "1 5 8 9"
                ],
                "expected_output": "10"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_184",
        "title": "Longest Common Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two sequences, find the length of the longest subsequence present in both of them.",
        "starter_code": "# Find the Longest Common Subsequence.",
        "test_cases": [
            {
                "input": [
                    "AGGTAB",
                    "GXTXAYB"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_185",
        "title": "Edit Distance (Levenshtein Distance)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two words, find the minimum number of operations (insertions, deletions, substitutions) required to transform one word into the other.",
        "starter_code": "# Calculate Edit Distance.",
        "test_cases": [
            {
                "input": [
                    "kitten",
                    "sitting"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_186",
        "title": "Matrix Chain Multiplication",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a sequence of matrices, find the most efficient way to multiply these matrices together. The problem is not to actually multiply them, but to decide the order in which to multiply them. Return the minimum number of scalar multiplications needed.",
        "starter_code": "# Optimize matrix chain multiplication.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "10 30 5 60"
                ],
                "expected_output": "4500"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_187",
        "title": "Subset Sum Problem",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a set of non-negative integers and a value sum, determine if there is a subset of the given set with sum equal to the given sum.",
        "starter_code": "# Solve the Subset Sum Problem.",
        "test_cases": [
            {
                "input": [
                    "5",
                    "3 34 4 12 5 2",
                    "9"
                ],
                "expected_output": "True"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_188",
        "title": "Coin Change Problem (Minimum Coins)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a set of coin denominations and a target amount, find the minimum number of coins needed to make up that amount. Assume an infinite supply of each coin denomination.",
        "starter_code": "# Solve the Coin Change problem (minimum coins).",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 2 5",
                    "11"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_189",
        "title": "Longest Increasing Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an unsorted array of integers, find the length of the longest increasing subsequence.",
        "starter_code": "# Find the Longest Increasing Subsequence.",
        "test_cases": [
            {
                "input": [
                    "10 9 2 5 3 7 101 18"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_190",
        "title": "Word Break Problem",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `wordDict`, return true if `s` can be segmented into a space-separated sequence of one or more dictionary words. The same word in the dictionary may be reused multiple times in the segmentation.",
        "starter_code": "# Solve the Word Break problem.",
        "test_cases": [
            {
                "input": [
                    "leetcode",
                    "leet code"
                ],
                "expected_output": "True"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_191",
        "title": "Stock Buy Sell (One Transaction)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit. If you cannot achieve any profit, return 0.",
        "starter_code": "# Calculate maximum profit from one stock transaction.",
        "test_cases": [
            {
                "input": [
                    "7 1 5 3 6 4"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_192",
        "title": "Minimum Path Sum in Grid",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a `m x n` grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.",
        "starter_code": "# Find minimum path sum in a grid.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "1 3 1",
                    "1 5 1",
                    "4 2 1"
                ],
                "expected_output": "7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_193",
        "title": "Unique Paths (Robot on Grid)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below). How many possible unique paths are there?",
        "starter_code": "# Count unique paths on a grid.",
        "test_cases": [
            {
                "input": [
                    "3 7"
                ],
                "expected_output": "28"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_194",
        "title": "Longest Palindromic Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, find the longest palindromic subsequence's length in `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no characters without changing the order of the remaining elements.",
        "starter_code": "# Find the Longest Palindromic Subsequence.",
        "test_cases": [
            {
                "input": [
                    "bbbab"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_195",
        "title": "Target Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums` and an integer `target`. You want to build an expression out of `nums` by adding one of the symbols '+' or '-' before each integer in `nums` and then concatenate all the integers. Return the number of different expressions that you can build, which evaluates to `target`.",
        "starter_code": "# Find number of expressions for target sum.",
        "test_cases": [
            {
                "input": [
                    "1 1 1 1 1",
                    "3"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_196",
        "title": "Minimum Cost Climbing Stairs",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `cost` where `cost[i]` is the cost of `i`th step on a staircase. Once you pay the cost, you can either climb one or two steps. You can either start from the step with index 0, or the step with index 1. Return the minimum cost to reach the top of the floor.",
        "starter_code": "# Calculate minimum cost to climb stairs.",
        "test_cases": [
            {
                "input": [
                    "10 15 20"
                ],
                "expected_output": "15"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_197",
        "title": "House Robber",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
        "starter_code": "# Calculate maximum money from robbing houses.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_198",
        "title": "Maximum Subarray",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, find the subarray with the largest sum, and return its sum.",
        "starter_code": "# Find the maximum subarray sum.",
        "test_cases": [
            {
                "input": [
                    "-2 1 -3 4 -1 2 1 -5 4"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_199",
        "title": "Decode Ways",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA message containing letters from A-Z is being encoded to numbers using the following mapping:\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\nGiven a string `s` containing only digits, return the number of ways to decode it.",
        "starter_code": "# Count decode ways for a message.",
        "test_cases": [
            {
                "input": [
                    "12"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_200",
        "title": "Longest Valid Parentheses",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
        "starter_code": "# Find the length of the longest valid parentheses substring.",
        "test_cases": [
            {
                "input": [
                    "(()"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_201",
        "title": "Word Search",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` grid of characters and a string `word`, return true if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "starter_code": "# Search for a word in a 2D grid.",
        "test_cases": [
            {
                "input": [
                    "3 4",
                    "A B C E",
                    "S F C S",
                    "A D E E",
                    "ABCCED"
                ],
                "expected_output": "True"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_202",
        "title": "Combination Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times.",
        "starter_code": "# Find combinations that sum to target.",
        "test_cases": [
            {
                "input": [
                    "2 3 6 7",
                    "7"
                ],
                "expected_output": "[[2,2,3],[7]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_203",
        "title": "Permutations",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.",
        "starter_code": "# Generate all permutations of an array.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_204",
        "title": "Subsets",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.",
        "starter_code": "# Generate all subsets of an array.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_205",
        "title": "Parentheses Generation",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
        "starter_code": "# Generate well-formed parentheses combinations.",
        "test_cases": [
            {
                "input": [
                    "3"
                ],
                "expected_output": "((()))\n(()())\n(())()\n()(())\n()()()"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_206",
        "title": "Course Schedule (Detect Cycle in DAG)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from 0 to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return `true` if you can finish all courses, otherwise return `false`.",
        "starter_code": "# Check if course schedule is possible.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "1 0"
                ],
                "expected_output": "True"
            },
            {
                "input": [
                    "2",
                    "1 0",
                    "0 1"
                ],
                "expected_output": "False"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_207",
        "title": "Number of Islands",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` 2D binary grid `grid` which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
        "starter_code": "# Count number of islands in a grid.",
        "test_cases": [
            {
                "input": [
                    "4 5",
                    "1 1 1 1 0",
                    "1 1 0 1 0",
                    "1 1 0 0 0",
                    "0 0 0 0 0"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_208",
        "title": "Pacific Atlantic Water Flow",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` matrix `heights` representing the height of each unit cell in a continent, find a list of grid coordinates `(row, col)` where water can flow to both the Pacific and Atlantic oceans. Water can flow from any cell to an adjacent one if the adjacent cell has a height less than or equal to the current cell's height. Water can flow to the Pacific ocean from any cell in the first row or first column. Water can flow to the Atlantic ocean from any cell in the last row or last column.",
        "starter_code": "# Find cells where water flows to both oceans.",
        "test_cases": [
            {
                "input": [
                    "5 5",
                    "1 2 2 3 5",
                    "3 2 3 4 4",
                    "2 4 5 3 1",
                    "6 7 1 4 5",
                    "5 1 1 2 4"
                ],
                "expected_output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_209",
        "title": "Rotting Oranges",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` grid where each cell can have one of three values:\n0 representing an empty cell,\n1 representing a fresh orange,\n2 representing a rotten orange.\nEvery minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no fresh oranges are present. If this is impossible, return -1.",
        "starter_code": "# Calculate time for all oranges to rot.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "2 1 1",
                    "1 1 0",
                    "0 1 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_210",
        "title": "Walls and Gates",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` grid `rooms` initialized with three possible values:\n-1 a wall or an obstacle.\n0 a gate.\nINF (2147483647) empty room.\nFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, leave `INF`.",
        "starter_code": "# Calculate distances to nearest gates.",
        "test_cases": [
            {
                "input": [
                    "4 4",
                    "INF -1 0 INF",
                    "INF INF INF -1",
                    "INF -1 INF -1",
                    "0 -1 INF INF"
                ],
                "expected_output": "3 -1 0 1\n2 2 1 -1\n1 -1 2 -1\n0 -1 3 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_211",
        "title": "Count Square Submatrices with All Ones",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a `m * n` matrix of ones and zeros, return how many square submatrices have all ones.",
        "starter_code": "# Count square submatrices with all ones.",
        "test_cases": [
            {
                "input": [
                    "3 4",
                    "0 1 1 1",
                    "1 1 1 1",
                    "0 1 1 1"
                ],
                "expected_output": "15"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_212",
        "title": "Bomb Enemy",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a 2D grid, where each cell is either a 'W' (wall), 'E' (enemy), or '0' (empty cell), return the maximum enemies you can kill if you place a single bomb at an empty cell. The bomb kills all enemies in the same row and column from the planted cell until it hits a wall.",
        "starter_code": "# Calculate max enemies killed by one bomb.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "0 E 0",
                    "E 0 E",
                    "0 E 0"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_213",
        "title": "Unique Paths II (with Obstacles)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA robot is located at the top-left corner of an `m x n` grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and space is marked as `1` and `0` respectively in the grid.",
        "starter_code": "# Count unique paths with obstacles.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "0 0 0",
                    "0 1 0",
                    "0 0 0"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_214",
        "title": "Minimum Falling Path Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `n x n` integer array `matrix`, return the minimum sum of any falling path through `matrix`. A falling path starts at any element in the first row and chooses one element from each row. The next element in a chosen path can be any element in the next row that is directly below, or diagonally left/right.",
        "starter_code": "# Find minimum falling path sum.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "2 1 3",
                    "6 5 4",
                    "7 8 9"
                ],
                "expected_output": "13"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_215",
        "title": "Delete and Earn",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums`. You want to form a new array that contains elements from `nums` but you must follow these rules: If you choose an element `nums[i]`, you must also delete all elements equal to `nums[i] - 1` and `nums[i] + 1` from `nums`. After that, you earn `nums[i]` points. Return the maximum number of points you can earn.",
        "starter_code": "# Calculate maximum points from deleting and earning.",
        "test_cases": [
            {
                "input": [
                    "3 4 2"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_216",
        "title": "Partition Equal Subset Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.",
        "starter_code": "# Check if array can be partitioned into equal sum subsets.",
        "test_cases": [
            {
                "input": [
                    "1 5 11 5"
                ],
                "expected_output": "True"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_217",
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: After you sell your stock, you cannot buy stock on the next day (i.e., cooldown 1 day).",
        "starter_code": "# Calculate max profit with cooldown.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 0 2"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_218",
        "title": "Longest Palindromic Substring II (Manacher's Algorithm)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, return the longest palindromic substring in `s`. Consider an efficient solution for longer strings.",
        "starter_code": "# Find the longest palindromic substring efficiently.",
        "test_cases": [
            {
                "input": [
                    "babad"
                ],
                "expected_output": "bab"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_219",
        "title": "Interleaving String",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven three strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an interleaving of `s1` and `s2`. An interleaving means that `s3` is formed by combining characters from `s1` and `s2` such that the relative order of characters in `s1` and `s2` is preserved.",
        "starter_code": "# Check if string is an interleaving of two others.",
        "test_cases": [
            {
                "input": [
                    "aabcc",
                    "dbca",
                    "aabcde"
                ],
                "expected_output": "False"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_220",
        "title": "Scramble String",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nWe can scramble a string `s` to get a string `t` using the following algorithm:\n1. If the length of the string is 1, stop.\n2. If the length of the string is > 1, we can split it into two non-empty substrings at a random index, say `i`, such that `s = x + y` where `x` is the first `i` characters and `y` is the remaining characters.\n3. We can optionally swap the two substrings, so that `s` becomes `y + x`.\n4. We then recursively scramble each of the two substrings `x` and `y`.\nGiven two strings `s1` and `s2` of the same length, return `true` if `s2` is a scrambled string of `s1`, otherwise return `false`.",
        "starter_code": "# Check if one string is a scramble of another.",
        "test_cases": [
            {
                "input": [
                    "great",
                    "rgeat"
                ],
                "expected_output": "True"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_221",
        "title": "Wildcard Matching",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for '?' and '*'.\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).",
        "starter_code": "# Implement wildcard pattern matching.",
        "test_cases": [
            {
                "input": [
                    "aa",
                    "a"
                ],
                "expected_output": "False"
            },
            {
                "input": [
                    "aa",
                    "*"
                ],
                "expected_output": "True"
            },
            {
                "input": [
                    "cb",
                    "?a"
                ],
                "expected_output": "False"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_222",
        "title": "Regular Expression Matching",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an input string (`s`) and a pattern (`p`), implement regular expression matching with support for '.' and '*'.\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).",
        "starter_code": "# Implement regular expression matching.",
        "test_cases": [
            {
                "input": [
                    "aa",
                    "a"
                ],
                "expected_output": "False"
            },
            {
                "input": [
                    "aa",
                    "a*"
                ],
                "expected_output": "True"
            },
            {
                "input": [
                    "ab",
                    ".*"
                ],
                "expected_output": "True"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_223",
        "title": "Minimum Window Substring",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return an empty string. The test cases will be generated such that the answer is unique.",
        "starter_code": "# Find the minimum window substring.",
        "test_cases": [
            {
                "input": [
                    "ADOBECODEBANC",
                    "ABC"
                ],
                "expected_output": "BANC"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_224",
        "title": "Sliding Window Maximum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return the maximum sliding window.",
        "starter_code": "# Find the maximum in each sliding window.",
        "test_cases": [
            {
                "input": [
                    "1 3 -1 -3 5 3 6 7",
                    "3"
                ],
                "expected_output": "3 3 5 5 6 7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_225",
        "title": "Longest Substring with At Most K Distinct Characters",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.",
        "starter_code": "# Find the length of the longest substring with at most k distinct characters.",
        "test_cases": [
            {
                "input": [
                    "eceba",
                    "2"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_226",
        "title": "Meeting Rooms II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of conference rooms required.",
        "starter_code": "# Calculate minimum meeting rooms required.",
        "test_cases": [
            {
                "input": [
                    "[[0,30],[5,10],[15,20]]"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_227",
        "title": "Course Schedule II (Topological Sort with Output)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from 0 to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.",
        "starter_code": "# Find a valid course order.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "1 0"
                ],
                "expected_output": "[0,1]"
            },
            {
                "input": [
                    "4",
                    "1 0",
                    "2 0",
                    "3 1",
                    "3 2"
                ],
                "expected_output": "[0,1,2,3]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_228",
        "title": "Alien Dictionary",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you. You are given a list of `words` from the alien dictionary, where the words are sorted lexicographically by the rules of this new language. This means that if word `a` comes before word `b` in the sorted list, then the first differing character in `a` and `b` determines the order in the alien language. Return a string of the unique letters in the new alien language sorted in lexicographically increasing order. If there is no such order (i.e., a contradiction), return an empty string. If there are multiple valid orders, return any of them.",
        "starter_code": "# Find the alien dictionary order.",
        "test_cases": [
            {
                "input": [
                    "wrt",
                    "wrf",
                    "er",
                    "ett",
                    "rftt"
                ],
                "expected_output": "wertf"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_229",
        "title": "Longest Consecutive Sequence (Unsorted Array - O(N))",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. Your algorithm should run in `O(n)` time.",
        "starter_code": "# Find the longest consecutive sequence in O(n) time.",
        "test_cases": [
            {
                "input": [
                    "100 4 200 1 3 2"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_230",
        "title": "Count of Smaller Numbers After Self",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums`. You need to create a new array `counts` such that `counts[i]` is the number of elements that are smaller than `nums[i]` and to the right of `nums[i]`.",
        "starter_code": "# Count smaller numbers after self.",
        "test_cases": [
            {
                "input": [
                    "5 2 6 1"
                ],
                "expected_output": "2 1 1 0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_231",
        "title": "Skyline Problem",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline. The buildings are given as `[left, right, height]`. The output is a list of `[x, height]` pairs.",
        "starter_code": "# Generate the skyline from buildings.",
        "test_cases": [
            {
                "input": [
                    "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]"
                ],
                "expected_output": "[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_232",
        "title": "The Super Ugly Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA super ugly number is a positive integer whose prime factors are in a given integer array `primes`. Given an integer `n` and an array of integers `primes`, return the `n`th super ugly number. The `n`th super ugly number is guaranteed to fit in a 32-bit signed integer.",
        "starter_code": "# Find the nth super ugly number.",
        "test_cases": [
            {
                "input": [
                    "12",
                    "2 7 13 19"
                ],
                "expected_output": "32"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_233",
        "title": "Trapping Rain Water II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.",
        "starter_code": "# Calculate trapped rain water in 2D.",
        "test_cases": [
            {
                "input": [
                    "3 6",
                    "1 4 3 1 3 2",
                    "3 2 1 3 2 4",
                    "2 3 3 2 3 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_234",
        "title": "Data Stream Median",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nMedian is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the average of the two middle values. Implement the `MedianFinder` class:\n`MedianFinder()` initializes the `MedianFinder` object.\n`void addNum(int num)` adds an integer `num` from the data stream to the data structure.\n`double findMedian()` returns the median of all elements so far.",
        "starter_code": "# Implement a MedianFinder for data stream.",
        "test_cases": [
            {
                "input": [
                    "addNum 1",
                    "addNum 2",
                    "findMedian",
                    "addNum 3",
                    "findMedian"
                ],
                "expected_output": "1.5\n2.0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_235",
        "title": "Kth Largest Element in an Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element.",
        "starter_code": "# Find the kth largest element.",
        "test_cases": [
            {
                "input": [
                    "3 2 1 5 6 4",
                    "2"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_236",
        "title": "Find the Duplicate Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one duplicate number in `nums`, return this duplicate number. You must solve the problem without modifying the array `nums` and uses only constant extra space.",
        "starter_code": "# Find the duplicate number.",
        "test_cases": [
            {
                "input": [
                    "1 3 4 2 2"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_237",
        "title": "Task Scheduler",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a character array `tasks` representing the tasks a CPU needs to do, where each letter represents a different task. Tasks can be done in any order. Each task takes one unit of time. For each unit of time, the CPU can either finish one task or be idle. However, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is, at least `n` units of time must elapse between two consecutive executions of the same task. Return the minimum number of units of time the CPU will take to finish all the given tasks.",
        "starter_code": "# Calculate minimum time for task scheduling with cooldown.",
        "test_cases": [
            {
                "input": [
                    "A A A B B B",
                    "2"
                ],
                "expected_output": "8"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_238",
        "title": "Perfect Squares",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer `n`, return the least number of perfect square numbers that sum to `n`. A perfect square is an integer that is the square of an integer; for example, 1, 4, 9, and 16 are perfect squares.",
        "starter_code": "# Find the least number of perfect squares to sum to n.",
        "test_cases": [
            {
                "input": [
                    "12"
                ],
                "expected_output": "3"
            },
            {
                "input": [
                    "13"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_239",
        "title": "Coin Change 2 (Number of Ways)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0. You may assume that you have an infinite number of each kind of coin.",
        "starter_code": "# Count combinations for coin change.",
        "test_cases": [
            {
                "input": [
                    "1 2 5",
                    "5"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_240",
        "title": "Longest Increasing Path in a Matrix",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` integers `matrix`, return the length of the longest increasing path in `matrix`.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., no wrap-around).",
        "starter_code": "# Find the longest increasing path in a matrix.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "9 9 4",
                    "6 6 8",
                    "2 1 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_241",
        "title": "Find K Closest Elements",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are preferred.",
        "starter_code": "# Find k closest elements to x.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5",
                    "4",
                    "3"
                ],
                "expected_output": "1 2 3 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_242",
        "title": "Minimum Absolute Difference in BST",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.",
        "starter_code": "# Find minimum absolute difference in BST.",
        "test_cases": [
            {
                "input": [
                    "4 2 6 1 3"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_243",
        "title": "Path Sum III",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return the number of paths where the sum of the nodes' values equals `targetSum`. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).",
        "starter_code": "# Count paths with target sum in a binary tree.",
        "test_cases": [
            {
                "input": [
                    "10 5 -3 3 2 null 11 3 -2 null 1",
                    "8"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_244",
        "title": "Convert BST to Greater Tree",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every node's value is changed to the original value plus the sum of all greater values in the BST.",
        "starter_code": "# Convert BST to Greater Tree.",
        "test_cases": [
            {
                "input": [
                    "4 1 6 0 2 5 7 null null null 3 null null 8"
                ],
                "expected_output": "30 36 21 36 35 26 15 null null null 33 null null 8"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_245",
        "title": "Longest Substring Without Repeating Characters",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, find the length of the longest substring without repeating characters.",
        "starter_code": "# Find the length of the longest substring without repeating characters.",
        "test_cases": [
            {
                "input": [
                    "abcabcbb"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_246",
        "title": "Generate Parentheses (Backtracking)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
        "starter_code": "# Generate well-formed parentheses combinations using backtracking.",
        "test_cases": [
            {
                "input": [
                    "3"
                ],
                "expected_output": "((()))\n(()())\n(())()\n()(())\n()()()"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_247",
        "title": "Word Ladder",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA transformation sequence from `word1` to `word2` using a dictionary `wordList` is a sequence of words `word1 -> s1 -> s2 -> ... -> sk -> word2` such that:\nEvery adjacent pair of words differs by a single letter.\nEvery `si` for `1 <= i <= k` is in `wordList`. Note that `word1` does not need to be in `wordList`.\n`word2` is in `wordList`.\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or 0 if no such sequence exists.",
        "starter_code": "# Find the shortest word ladder.",
        "test_cases": [
            {
                "input": [
                    "hit",
                    "cog",
                    "hot dot dog lot log cog"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_248",
        "title": "Cheapest Flights Within K Stops",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`. You are also given three integers `src`, `dst`, and `k`, return the cheapest price from `src` to `dst` with at most `k` stops. If there is no such route, return -1.",
        "starter_code": "# Find cheapest flights within k stops.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "0 1 100",
                    "1 2 100",
                    "0 2 500",
                    "0 2 1"
                ],
                "expected_output": "200"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_249",
        "title": "Number of Connected Components in an Undirected Graph",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven `n` nodes labeled from `0` to `n - 1` and a list of undirected `edges` (each edge is a pair of nodes), write a function to find the number of connected components in the graph.",
        "starter_code": "# Count connected components in an undirected graph.",
        "test_cases": [
            {
                "input": [
                    "5",
                    "0 1",
                    "1 2",
                    "3 4"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_250",
        "title": "Longest Substring with At Most Two Distinct Characters",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, return the length of the longest substring that contains at most two distinct characters.",
        "starter_code": "# Find the longest substring with at most two distinct characters.",
        "test_cases": [
            {
                "input": [
                    "eceba"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_251",
        "title": "Longest Common Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return 0.\n\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n**Constraints**\n* 1 <= text1.length, text2.length <= 1000\n* text1 and text2 consist of only lowercase English characters.\n\nInput format: Two lines, each containing a string.\n\nOutput format: A single integer.",
        "starter_code": "# Find the length of the longest common subsequence.",
        "test_cases": [
            {
                "input": [
                    "abcde",
                    "ace"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_252",
        "title": "Knapsack Problem (0/1)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given `n` items, where each item has a weight `weights[i]` and a value `values[i]`. You are also given a knapsack capacity `W`. Return the maximum total value that can be put into the knapsack.\n\n**Constraints**\n* 1 <= n <= 100\n* 1 <= W <= 1000\n* 1 <= weights[i], values[i] <= 100\n\nInput format: The first line contains two integers `n` and `W`. The next `n` lines each contain two integers, `weight` and `value` for an item.\n\nOutput format: A single integer.",
        "starter_code": "# Solve the 0/1 Knapsack Problem.",
        "test_cases": [
            {
                "input": [
                    "3 50",
                    "10 60",
                    "20 100",
                    "30 120"
                ],
                "expected_output": "220"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_253",
        "title": "Dijkstra's Shortest Path",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a weighted, directed graph and a starting node `src`, find the shortest path from `src` to all other nodes in the graph. Return a list of shortest distances, where `distances[i]` is the shortest distance to node `i`.\n\n**Constraints**\n* Number of nodes `V` <= 100\n* Number of edges `E` <= V * (V - 1)\n* Edge weights are non-negative and <= 1000.\n\nInput format: The first line contains two integers `V` and `E`, followed by `E` lines each with three integers `u, v, weight` representing an edge from `u` to `v` with `weight`. The last line contains the source node `src`.\n\nOutput format: A space-separated list of integers representing the shortest distances.",
        "starter_code": "# Implement Dijkstra's algorithm.",
        "test_cases": [
            {
                "input": [
                    "5 6",
                    "0 1 10",
                    "0 2 3",
                    "1 3 2",
                    "2 1 4",
                    "2 3 8",
                    "2 4 2",
                    "0"
                ],
                "expected_output": "0 7 3 9 5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_254",
        "title": "Bellman-Ford Shortest Path",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a weighted, directed graph (which may contain negative edge weights) and a starting node `src`, find the shortest path from `src` to all other nodes. Detect if there is a negative cycle reachable from `src`.\n\n**Constraints**\n* Number of nodes `V` <= 100\n* Number of edges `E` <= V * (V - 1)\n* Edge weights are between -1000 and 1000.\n\nInput format: The first line contains two integers `V` and `E`, followed by `E` lines each with three integers `u, v, weight` representing an edge from `u` to `v` with `weight`. The last line contains the source node `src`.\n\nOutput format: A space-separated list of integers representing the shortest distances. If a negative cycle is detected, output \"Negative cycle detected\".",
        "starter_code": "# Implement Bellman-Ford algorithm.",
        "test_cases": [
            {
                "input": [
                    "4 4",
                    "0 1 1",
                    "1 2 -1",
                    "2 3 -1",
                    "3 0 -1",
                    "0"
                ],
                "expected_output": "Negative cycle detected"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_255",
        "title": "Maximum Flow (Ford-Fulkerson)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a flow network with a source `s` and a sink `t`, find the maximum possible flow from `s` to `t`.\n\n**Constraints**\n* Number of vertices `V` <= 50\n* Number of edges `E` <= V * (V - 1)\n* Capacities are non-negative and <= 1000.\n\nInput format: The first line contains two integers `V` and `E`. The next `E` lines each contain three integers `u, v, capacity` representing an edge from `u` to `v` with `capacity`. The last line contains `s` and `t`.\n\nOutput format: A single integer representing the maximum flow.",
        "starter_code": "# Implement Ford-Fulkerson algorithm for max flow.",
        "test_cases": [
            {
                "input": [
                    "6 7",
                    "0 1 10",
                    "0 2 10",
                    "1 3 4",
                    "1 4 8",
                    "2 4 9",
                    "3 5 10",
                    "4 5 10",
                    "0 5"
                ],
                "expected_output": "19"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_256",
        "title": "Minimum Spanning Tree (Kruskal's Algorithm)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a connected, undirected graph with weighted edges, find the total weight of a minimum spanning tree (MST) using Kruskal's algorithm.\n\n**Constraints**\n* Number of vertices `V` <= 100\n* Number of edges `E` <= V * (V - 1) / 2\n* Edge weights are non-negative and <= 1000.\n\nInput format: The first line contains two integers `V` and `E`. The next `E` lines each contain three integers `u, v, weight` representing an edge between `u` and `v` with `weight`.\n\nOutput format: A single integer representing the total weight of the MST.",
        "starter_code": "# Implement Kruskal's algorithm for MST.",
        "test_cases": [
            {
                "input": [
                    "4 5",
                    "0 1 10",
                    "0 2 6",
                    "0 3 5",
                    "1 3 15",
                    "2 3 4"
                ],
                "expected_output": "19"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_257",
        "title": "Traveling Salesperson Problem (Dynamic Programming)",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a set of cities and the distances between every pair of cities, find the shortest possible route that visits each city exactly once and returns to the origin city.\n\n**Constraints**\n* Number of cities `N` <= 15\n* Distances are non-negative and <= 1000.\n\nInput format: The first line contains an integer `N`. The next `N` lines represent the adjacency matrix where `matrix[i][j]` is the distance from city `i` to city `j`.\n\nOutput format: A single integer representing the minimum total distance.",
        "starter_code": "# Solve the Traveling Salesperson Problem using dynamic programming.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "0 10 15 20",
                    "10 0 35 25",
                    "15 35 0 30",
                    "20 25 30 0"
                ],
                "expected_output": "80"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_258",
        "title": "Sudoku Solver",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nWrite a program to solve a Sudoku puzzle by filling the empty cells. A Sudoku solution must satisfy all of the following rules:\n1. Each of the digits 1-9 must occur exactly once in each row.\n2. Each of the digits 1-9 must occur exactly once in each column.\n3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe input board contains only digits 1-9 and '.'. Empty cells are indicated by '.'.\n\n**Constraints**\n* `board.length == 9`\n* `board[i].length == 9`\n* `board[i][j]` is a digit or '.'.\n* It is guaranteed that the input board has only one solution.\n\nInput format: 9 lines, each a string of 9 characters (digits or '.').\n\nOutput format: 9 lines, each a string of 9 digits representing the solved Sudoku board.",
        "starter_code": "# Implement a Sudoku solver.",
        "test_cases": [
            {
                "input": [
                    "53..7....",
                    "6..195...",
                    ".98....6.",
                    "8...6...3",
                    "4..8.3..1",
                    "7...2...6",
                    ".6....28.",
                    "...419..5",
                    "....8..79"
                ],
                "expected_output": "534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_259",
        "title": "N-Queens Problem",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThe N-queens puzzle is the problem of placing N queens on an N\u00d7N chessboard such that no two queens attack each other. Return all distinct solutions to the N-queens puzzle.\n\nEach solution contains a distinct board configuration of the N-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n\n**Constraints**\n* 1 <= n <= 9\n\nInput format: A single integer `n`.\n\nOutput format: A list of lists of strings, where each inner list represents a board solution. Each string in the inner list represents a row of the board.",
        "starter_code": "# Solve the N-Queens problem.",
        "test_cases": [
            {
                "input": [
                    "4"
                ],
                "expected_output": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_260",
        "title": "Conway's Game of Life",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a 2D `board` representing the current state of the game. For each cell, apply the following rules:\n1. Any live cell with fewer than two live neighbors dies as if by underpopulation.\n2. Any live cell with two or three live neighbors lives on to the next generation.\n3. Any live cell with more than three live neighbors dies as if by overpopulation.\n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nReturn the board after one generation.\n\n**Constraints**\n* `m == board.length`\n* `n == board[i].length`\n* `1 <= m, n <= 25`\n* `board[i][j]` is 0 or 1 (0: dead, 1: live).\n\nInput format: The first line contains two integers `m` and `n`. The next `m` lines contain `n` space-separated integers (0 or 1).\n\nOutput format: `m` lines, each containing `n` space-separated integers representing the board after one generation.",
        "starter_code": "# Simulate Conway's Game of Life.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "0 1 0",
                    "0 0 1",
                    "1 1 1"
                ],
                "expected_output": "0 0 0\n1 0 1\n0 1 1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_261",
        "title": "Best Time to Buy and Sell Stock III",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. Design an algorithm to find the maximum profit. You may complete at most two transactions. You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n**Constraints**\n* 1 <= prices.length <= 10^5\n* 0 <= prices[i] <= 10^5\n\nInput format: A single line of space-separated integers representing the `prices` array.\n\nOutput format: A single integer representing the maximum profit.",
        "starter_code": "# Find the maximum profit from at most two stock transactions.",
        "test_cases": [
            {
                "input": [
                    "3 3 5 0 0 3 1 4"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_262",
        "title": "Robot in a Grid",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nImagine a robot sitting on the upper left corner of grid with `R` rows and `C` columns. The robot can only move either right or down. Some cells are \"off limits\", such that the robot cannot step on them. Design an algorithm to find a path for the robot from the top left to the bottom right.\n\n**Constraints**\n* 1 <= R, C <= 100\n* Grid cells are 0 (open) or 1 (off-limits).\n\nInput format: The first line contains two integers `R` and `C`. The next `R` lines contain `C` space-separated integers (0 or 1) representing the grid.\n\nOutput format: A string representing the path (e.g., \"RDRD\") or \"No Path\" if none exists.",
        "starter_code": "# Find a path for the robot in the grid.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "0 0 0",
                    "0 1 0",
                    "0 0 0"
                ],
                "expected_output": "RRDD"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_263",
        "title": "Word Ladder",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, such that:\n1. Only one letter can be changed at a time.\n2. Each transformed word must exist in the `wordList`.\n\nReturn 0 if no such sequence exists.\n\n**Constraints**\n* 1 <= beginWord.length <= 10\n* `wordList` contains only lowercase English letters.\n* All words in `wordList` are unique.\n\nInput format: The first line contains `beginWord`. The second line contains `endWord`. The third line contains a space-separated list of words for `wordList`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the length of the shortest word ladder.",
        "test_cases": [
            {
                "input": [
                    "hit",
                    "cog",
                    "hot dot dog lot log cog"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_264",
        "title": "Sliding Window Maximum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* 1 <= k <= nums.length\n* -10^4 <= nums[i] <= 10^4\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains an integer `k`.\n\nOutput format: A space-separated list of integers.",
        "starter_code": "# Find the maximum in each sliding window.",
        "test_cases": [
            {
                "input": [
                    "1 3 -1 -3 5 3 6 7",
                    "3"
                ],
                "expected_output": "3 3 5 5 6 7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_265",
        "title": "Median of Two Sorted Arrays",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\n**Constraints**\n* 0 <= m <= 1000\n* 0 <= n <= 1000\n* 1 <= m + n <= 2000\n* -10^6 <= nums1[i], nums2[i] <= 10^6\n\nInput format: Two lines, each with space-separated integers for `nums1` and `nums2`.\n\nOutput format: A single floating-point number.",
        "starter_code": "# Find the median of two sorted arrays.",
        "test_cases": [
            {
                "input": [
                    "1 2",
                    "3 4"
                ],
                "expected_output": "2.5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_266",
        "title": "Regular Expression Matching",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an input string `s` and a pattern `p`, implement regular expression matching with support for '.' and '*' where:\n* `.` Matches any single character.\n* `*` Matches zero or more of the preceding element.\n\nReturn true if the entire string `s` can be matched by the pattern `p`.\n\n**Constraints**\n* 1 <= s.length <= 20\n* 1 <= p.length <= 30\n* `s` contains only lowercase English letters.\n* `p` contains only lowercase English letters, '.', and '*'.\n\nInput format: The first line contains string `s`. The second line contains string `p`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Implement regular expression matching.",
        "test_cases": [
            {
                "input": [
                    "aa",
                    "a*"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_267",
        "title": "Wildcard Matching",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an input string `s` and a pattern `p`, implement wildcard pattern matching with support for '?' and '*' where:\n* `?` Matches any single character.\n* `*` Matches any sequence of characters (including the empty sequence).\n\nReturn true if the entire string `s` can be matched by the pattern `p`.\n\n**Constraints**\n* 0 <= s.length, p.length <= 2000\n* `s` contains only lowercase English letters.\n* `p` contains only lowercase English letters, '?', or '*'.\n\nInput format: The first line contains string `s`. The second line contains string `p`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Implement wildcard matching.",
        "test_cases": [
            {
                "input": [
                    "adceb",
                    "a*b"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_268",
        "title": "Text Justification",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of words and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully justified. You should pack your words in a greedy approach. That is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly `maxWidth` characters.\n\n**Constraints**\n* 1 <= words.length <= 100\n* 1 <= words[i].length <= 20\n* words[i] consists of only lowercase English letters.\n* 1 <= maxWidth <= 100\n\nInput format: The first line contains space-separated words. The second line contains an integer `maxWidth`.\n\nOutput format: A list of strings, each representing a justified line.",
        "starter_code": "# Implement text justification.",
        "test_cases": [
            {
                "input": [
                    "This is an example of text justification.",
                    "16"
                ],
                "expected_output": "[\"This    is    an\",\"example  of text\",\"justification.  \"]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_269",
        "title": "Minimum Window Substring",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return an empty string.\n\n**Constraints**\n* 1 <= s.length, t.length <= 10^5\n* `s` and `t` consist of uppercase and lowercase English letters.\n\nInput format: The first line contains string `s`. The second line contains string `t`.\n\nOutput format: A single string.",
        "starter_code": "# Find the minimum window substring.",
        "test_cases": [
            {
                "input": [
                    "ADOBECODEBANC",
                    "ABC"
                ],
                "expected_output": "BANC"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_270",
        "title": "Largest Rectangle in Histogram",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of integers `heights` representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n\n**Constraints**\n* 1 <= heights.length <= 10^5\n* 0 <= heights[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `heights` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the largest rectangle in a histogram.",
        "test_cases": [
            {
                "input": [
                    "2 1 5 6 2 3"
                ],
                "expected_output": "10"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_271",
        "title": "Trapping Rain Water",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\n**Constraints**\n* 0 <= n <= 2 * 10^4\n* 0 <= height[i] <= 10^5\n\nInput format: A single line of space-separated integers representing the `height` array.\n\nOutput format: A single integer.",
        "starter_code": "# Calculate trapped rain water.",
        "test_cases": [
            {
                "input": [
                    "0 1 0 2 1 0 1 3 2 1 2 1"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_272",
        "title": "Serialize and Deserialize Binary Tree",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\n**Constraints**\n* The number of nodes in the tree is in the range [0, 10^4].\n* -1000 <= Node.val <= 1000\n\nInput format: A space-separated string representing the binary tree in level order, with \"null\" for missing children. For example, \"1 2 3 null null 4 5\" would represent a tree where 1 is the root, 2 and 3 are its children, 4 and 5 are children of 3.\n\nOutput format: A space-separated string representing the deserialized tree in the same format.",
        "starter_code": "# Implement serialization and deserialization of a binary tree.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 null null 4 5"
                ],
                "expected_output": "1 2 3 null null 4 5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_273",
        "title": "Word Break",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `wordDict`, return true if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\n**Constraints**\n* 1 <= s.length <= 20\n* 1 <= wordDict.length <= 1000\n* 1 <= wordDict[i].length <= 20\n* `s` and `wordDict[i]` consist of only lowercase English letters.\n\nInput format: The first line contains string `s`. The second line contains a space-separated list of words for `wordDict`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Check if string can be segmented into dictionary words.",
        "test_cases": [
            {
                "input": [
                    "leetcode",
                    "leet code"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_274",
        "title": "Maximum Product Subarray",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, find a subarray that has the largest product, and return the product.\n\n**Constraints**\n* 1 <= nums.length <= 2 * 10^4\n* -10 <= nums[i] <= 10\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum product subarray.",
        "test_cases": [
            {
                "input": [
                    "2 3 -2 4"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_275",
        "title": "Decode Ways",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA message containing letters from A-Z is being encoded to numbers using the following mapping:\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n\nGiven a string `s` containing only digits, return the number of ways to decode it.\n\n**Constraints**\n* 1 <= s.length <= 100\n* `s` contains only digits and may contain leading zero(s).\n\nInput format: A single string `s`.\n\nOutput format: A single integer.",
        "starter_code": "# Calculate the number of ways to decode a message.",
        "test_cases": [
            {
                "input": [
                    "12"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_276",
        "title": "Longest Increasing Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return the length of the longest strictly increasing subsequence.\n\n**Constraints**\n* 1 <= nums.length <= 2500\n* -10^4 <= nums[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the length of the longest increasing subsequence.",
        "test_cases": [
            {
                "input": [
                    "10 9 2 5 3 7 101 18"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_277",
        "title": "Coin Change",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that `amount`. If that `amount` cannot be made up by any combination of the coins, return -1.\n\n**Constraints**\n* 1 <= coins.length <= 12\n* 1 <= coins[i] <= 2^31 - 1\n* 0 <= amount <= 10^4\n\nInput format: The first line contains space-separated integers for `coins`. The second line contains an integer `amount`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the fewest number of coins for a given amount.",
        "test_cases": [
            {
                "input": [
                    "1 2 5",
                    "11"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_278",
        "title": "Longest Valid Parentheses",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\n**Constraints**\n* 0 <= s.length <= 3 * 10^4\n* `s` consists of '(' or ')'.\n\nInput format: A single string `s`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the length of the longest valid parentheses substring.",
        "test_cases": [
            {
                "input": [
                    "(()"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_279",
        "title": "Edit Distance",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. You have the following three operations permitted on a word:\n1. Insert a character\n2. Delete a character\n3. Replace a character\n\n**Constraints**\n* 0 <= word1.length, word2.length <= 500\n* `word1` and `word2` consist of lowercase English letters.\n\nInput format: The first line contains string `word1`. The second line contains string `word2`.\n\nOutput format: A single integer.",
        "starter_code": "# Calculate the edit distance between two words.",
        "test_cases": [
            {
                "input": [
                    "horse",
                    "ros"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_280",
        "title": "Subsets II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.\n\n**Constraints**\n* 1 <= nums.length <= 10\n* -10 <= nums[i] <= 10\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A list of lists of integers, representing all unique subsets.",
        "starter_code": "# Find all unique subsets.",
        "test_cases": [
            {
                "input": [
                    "1 2 2"
                ],
                "expected_output": "[[],[1],[1,2],[1,2,2],[2],[2,2]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_281",
        "title": "Largest Divisible Subset",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a set of distinct positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` in this subset satisfies `answer[i] % answer[j] == 0` or `answer[j] % answer[i] == 0`. If there are multiple solutions, return any of them.\n\n**Constraints**\n* 1 <= nums.length <= 1000\n* 1 <= nums[i] <= 2 * 10^9\n* All the integers in `nums` are unique.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A space-separated list of integers representing the largest divisible subset.",
        "starter_code": "# Find the largest divisible subset.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "1 2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_282",
        "title": "Perfect Squares",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer `n`, return the least number of perfect square numbers that sum to `n`.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of an integer with itself. For example, 1, 4, 9, and 16 are perfect squares.\n\n**Constraints**\n* 1 <= n <= 10^4\n\nInput format: A single integer `n`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the least number of perfect square numbers that sum to n.",
        "test_cases": [
            {
                "input": [
                    "12"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_283",
        "title": "Longest Consecutive Sequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in `O(n)` time.\n\n**Constraints**\n* 0 <= nums.length <= 10^5\n* -10^9 <= nums[i] <= 10^9\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the length of the longest consecutive elements sequence.",
        "test_cases": [
            {
                "input": [
                    "100 4 200 1 3 2"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_284",
        "title": "Minimum Height Trees",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\n\nGiven a tree of `n` nodes labeled from 0 to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree.\n\nReturn a list of all MHTs' root labels. You can return the answer in any order.\n\n**Constraints**\n* 1 <= n <= 2 * 10^4\n* edges.length == n - 1\n* 0 <= ai, bi < n\n* ai != bi\n\nInput format: The first line contains an integer `n`. The next `n - 1` lines each contain two integers `u, v` representing an edge.\n\nOutput format: A space-separated list of integers representing the root labels.",
        "starter_code": "# Find the roots of all minimum height trees.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "1 0",
                    "1 2",
                    "1 3"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_285",
        "title": "Count Complete Tree Nodes",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a complete binary tree, return the number of nodes in the tree.\n\n**Constraints**\n* The number of nodes in the tree is in the range [0, 5 * 10^4].\n* 0 <= Node.val <= 5 * 10^4\n* The tree is guaranteed to be complete.\n\nInput format: A space-separated string representing the binary tree in level order, with \"null\" for missing children.\n\nOutput format: A single integer.",
        "starter_code": "# Count the number of nodes in a complete binary tree.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5 6"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_286",
        "title": "Maximal Square",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\n**Constraints**\n* `m == matrix.length`\n* `n == matrix[i].length`\n* 1 <= m, n <= 300\n* `matrix[i][j]` is '0' or '1'.\n\nInput format: The first line contains two integers `m` and `n`. The next `m` lines contain `n` space-separated characters ('0' or '1').\n\nOutput format: A single integer.",
        "starter_code": "# Find the area of the largest square containing only 1's.",
        "test_cases": [
            {
                "input": [
                    "4 5",
                    "1 0 1 0 0",
                    "1 0 1 1 1",
                    "1 1 1 1 1",
                    "1 0 0 1 0"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_287",
        "title": "Course Schedule II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from 0 to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n\n**Constraints**\n* 1 <= numCourses <= 2000\n* 0 <= prerequisites.length <= numCourses * (numCourses - 1)\n* prerequisites[i].length == 2\n* 0 <= ai, bi < numCourses\n* ai != bi\n* All the pairs `[ai, bi]` are unique.\n\nInput format: The first line contains an integer `numCourses`. The second line contains space-separated pairs of integers representing prerequisites, e.g., \"0 1 1 2\" means [0,1] and [1,2].\n\nOutput format: A space-separated list of integers representing the course order, or an empty line if impossible.",
        "starter_code": "# Find a valid course order.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "1 0 2 0 3 1 3 2"
                ],
                "expected_output": "0 1 2 3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_288",
        "title": "Kth Largest Element in an Array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element.\n\n**Constraints**\n* 1 <= k <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains an integer `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the kth largest element.",
        "test_cases": [
            {
                "input": [
                    "3 2 1 5 6 4",
                    "2"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_289",
        "title": "Count of Smaller Numbers After Self",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return an integer array `counts` where `counts[i]` is the number of elements to the right of `nums[i]` that are smaller than `nums[i]`.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A space-separated list of integers.",
        "starter_code": "# Count smaller numbers after self.",
        "test_cases": [
            {
                "input": [
                    "5 2 6 1"
                ],
                "expected_output": "2 1 1 0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_290",
        "title": "Reverse Pairs",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return the number of *reverse pairs* in the array. A reverse pair `(i, j)` is defined as follows: `0 <= i < j < nums.length` and `nums[i] > 2 * nums[j]`.\n\n**Constraints**\n* 1 <= nums.length <= 5 * 10^4\n* -2^31 <= nums[i] <= 2^31 - 1\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Count reverse pairs.",
        "test_cases": [
            {
                "input": [
                    "1 3 2 3 1"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_291",
        "title": "Scramble String",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `s1` and `s2` of the same length, return true if `s2` is a scrambled string of `s1`. If `s1` can be transformed into `s2` by recursively scrambling its substrings, then `s2` is a scrambled string of `s1`.\n\n**Constraints**\n* 1 <= s1.length <= 30\n* s2.length == s1.length\n* `s1` and `s2` consist of lowercase English letters.\n\nInput format: The first line contains string `s1`. The second line contains string `s2`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Check if s2 is a scrambled string of s1.",
        "test_cases": [
            {
                "input": [
                    "great",
                    "rgeat"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_292",
        "title": "Distinct Subsequences",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`.\n\n**Constraints**\n* 0 <= s.length, t.length <= 1000\n* `s` and `t` consist of lowercase English letters.\n\nInput format: The first line contains string `s`. The second line contains string `t`.\n\nOutput format: A single integer.",
        "starter_code": "# Count distinct subsequences.",
        "test_cases": [
            {
                "input": [
                    "rabbbit",
                    "rabbit"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_293",
        "title": "Minimum Window Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven strings `s` and `t`, find the minimum window in `s` which has `t` as a subsequence. If there are multiple such minimum windows, return the one with the smallest starting index.\n\n**Constraints**\n* 1 <= s.length, t.length <= 2000\n* `s` and `t` consist of lowercase English letters.\n\nInput format: The first line contains string `s`. The second line contains string `t`.\n\nOutput format: A single string, or an empty string if no such window exists.",
        "starter_code": "# Find the minimum window subsequence.",
        "test_cases": [
            {
                "input": [
                    "abcdebdde",
                    "bde"
                ],
                "expected_output": "bcde"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_294",
        "title": "Largest Sum of Averages",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums` and an integer `k`. You have to divide `nums` into at most `k` non-empty adjacent subarrays. The score of a division is the sum of the average of each subarray. Return the maximum score you can achieve.\n\n**Constraints**\n* 1 <= nums.length <= 100\n* 1 <= nums[i] <= 10^4\n* 1 <= k <= nums.length\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains an integer `k`.\n\nOutput format: A single floating-point number.",
        "starter_code": "# Find the largest sum of averages.",
        "test_cases": [
            {
                "input": [
                    "9 1 2 3 9",
                    "3"
                ],
                "expected_output": "20.0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_295",
        "title": "Number of Islands",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` 2D binary grid which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n**Constraints**\n* `m == grid.length`\n* `n == grid[i].length`\n* 1 <= m, n <= 300\n* `grid[i][j]` is '0' or '1'.\n\nInput format: The first line contains two integers `m` and `n`. The next `m` lines contain `n` space-separated characters ('0' or '1').\n\nOutput format: A single integer.",
        "starter_code": "# Count the number of islands.",
        "test_cases": [
            {
                "input": [
                    "4 5",
                    "1 1 0 0 0",
                    "1 1 0 0 0",
                    "0 0 1 0 0",
                    "0 0 0 1 1"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_296",
        "title": "Longest Increasing Path in a Matrix",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` integers `matrix`, return the length of the longest increasing path in `matrix`. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n\n**Constraints**\n* `m == matrix.length`\n* `n == matrix[i].length`\n* 1 <= m, n <= 200\n* 0 <= matrix[i][j] <= 10^5\n\nInput format: The first line contains two integers `m` and `n`. The next `m` lines contain `n` space-separated integers.\n\nOutput format: A single integer.",
        "starter_code": "# Find the longest increasing path in a matrix.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "9 9 4",
                    "6 6 8",
                    "2 1 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_297",
        "title": "Critical Connections in a Network",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are `n` servers numbered from `0` to `n - 1` connected by undirected `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between servers `ai` and `bi`. A bridge (or cut edge) is an edge whose removal increases the number of connected components. Return all critical connections in the network. You can return the answer in any order.\n\n**Constraints**\n* 1 <= n <= 10^5\n* 1 <= connections.length <= 10^5\n* connections[i].length == 2\n* 0 <= ai, bi <= n - 1\n* ai != bi\n* There are no repeated connections.\n\nInput format: The first line contains an integer `n`. The second line contains space-separated pairs of integers representing connections, e.g., \"0 1 1 2 2 0 1 3\".\n\nOutput format: A list of lists of integers, where each inner list represents a critical connection (e.g., \"[[1,3],[2,0]]\").",
        "starter_code": "# Find critical connections in a network.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "0 1 1 2 2 3 1 3"
                ],
                "expected_output": "[[1,3]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_298",
        "title": "Minimum Cost to Connect All Points",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`. The cost of connecting two points `[xi, yi]` and `[xj, yj]` is the Manhattan distance between them: `|xi - xj| + |yi - yj|`. Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.\n\n**Constraints**\n* 1 <= points.length <= 1000\n* -10^7 <= xi, yi <= 10^7\n* All pairs `(xi, yi)` are distinct.\n\nInput format: The first line contains an integer `n` (number of points). The next `n` lines each contain two integers `x y` representing a point.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum cost to connect all points.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "0 0",
                    "2 2",
                    "3 10"
                ],
                "expected_output": "12"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_299",
        "title": "Network Delay Time",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a network of `n` nodes, labeled from 1 to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from `ui` to `vi`. We will send a signal from a given node `k`. Return the minimum time it takes for all `n` nodes to receive the signal. If it is impossible for all `n` nodes to receive the signal, return -1.\n\n**Constraints**\n* 1 <= k <= n <= 100\n* 1 <= times.length <= 6000\n* 1 <= ui, vi <= n\n* ui != vi\n* 0 <= wi <= 100\n\nInput format: The first line contains two integers `n` and `k`. The second line contains space-separated triplets of integers representing times, e.g., \"2 1 1 2 3 1\" means [2,1,1] and [2,3,1].\n\nOutput format: A single integer.",
        "starter_code": "# Calculate network delay time.",
        "test_cases": [
            {
                "input": [
                    "4 2",
                    "2 1 1 2 3 1 3 4 1"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_300",
        "title": "Swim in Rising Water",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `n x n` integer matrix `grid` where `grid[i][j]` represents the elevation at that point `(i, j)`. The rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square `(x, y)` to the adjacent squares `(x+1, y)`, `(x-1, y)`, `(x, y+1)`, or `(x, y-1)` if and only if the elevation of both squares is less than or equal to `t`. You start at `(0, 0)`. You are asked to find the least time `t` until you can reach `(n - 1, n - 1)`.\n\n**Constraints**\n* `n == grid.length`\n* `n == grid[i].length`\n* 1 <= n <= 50\n* 0 <= grid[i][j] < n^2\n\nInput format: The first line contains an integer `n`. The next `n` lines contain `n` space-separated integers representing the grid.\n\nOutput format: A single integer.",
        "starter_code": "# Find the least time to swim in rising water.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "0 2",
                    "1 3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_301",
        "title": "Swim in Rising Water",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `n x n` integer matrix `grid` where `grid[i][j]` represents the elevation at that point `(i, j)`. The rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square `(x, y)` to the adjacent squares `(x+1, y)`, `(x-1, y)`, `(x, y+1)`, or `(x, y-1)` if and only if the elevation of both squares is less than or equal to `t`. You start at `(0, 0)`. You are asked to find the least time `t` until you can reach `(n - 1, n - 1)`.\n\n**Constraints**\n* `n == grid.length`\n* `n == grid[i].length`\n* 1 <= n <= 50\n* 0 <= grid[i][j] < n * n\n\nInput format: The first line contains an integer `n`. The next `n` lines contain `n` space-separated integers representing the grid.\n\nOutput format: A single integer.",
        "starter_code": "# Find the least time to swim from (0,0) to (n-1, n-1) in rising water.",
        "test_cases": [
            {
                "input": [
                    "2",
                    "0 2",
                    "1 3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_302",
        "title": "Sliding Puzzle",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nOn an `2 x 3` `board`, there are five tiles labeled `1` through `5`, and an empty square represented by `0`. A move consists of swapping the `0` (empty square) with any adjacent (4-direction) number tile. Given the `board` state, return the least number of moves required to solve the puzzle, where the solved state is `[[1,2,3],[4,5,0]]`. If the puzzle is impossible to solve, return -1.\n\n**Constraints**\n* `board.length == 2`\n* `board[i].length == 3`\n* `0 <= board[i][j] <= 5`\n* Each value `0` to `5` appears exactly once on the board.\n\nInput format: Two lines, each with three space-separated integers representing the 2x3 board.\n\nOutput format: A single integer.",
        "starter_code": "# Solve the sliding puzzle.",
        "test_cases": [
            {
                "input": [
                    "1 2 3",
                    "4 0 5"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_303",
        "title": "Minimum Cost to Connect Sticks",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou have some sticks with positive integer lengths. You can connect two sticks of lengths `x` and `y` into one stick of length `x + y` with cost `x + y`. You must repeat this process until there is only one stick in the end. Return the minimum cost of connecting all the sticks.\n\n**Constraints**\n* 1 <= sticks.length <= 10^4\n* 1 <= sticks[i] <= 10^4\n\nInput format: A single line of space-separated integers representing the `sticks` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum cost to connect sticks.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4"
                ],
                "expected_output": "18"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_304",
        "title": "Task Scheduler",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task takes one unit of time. There is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is, at least `n` units of time must pass between two identical tasks. Return the minimum number of units of time the CPU will take to finish all the given tasks.\n\n**Constraints**\n* 1 <= tasks.length <= 10^4\n* `tasks[i]` is an uppercase English letter.\n* 0 <= n <= 100\n\nInput format: The first line contains a string of uppercase English letters representing `tasks`. The second line contains an integer `n`.\n\nOutput format: A single integer.",
        "starter_code": "# Calculate the minimum time for task scheduling.",
        "test_cases": [
            {
                "input": [
                    "AAABBC",
                    "2"
                ],
                "expected_output": "8"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_305",
        "title": "Cheapest Flights Within K Stops",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`. You are also given three integers `src`, `dst`, and `k`, return the cheapest price from `src` to `dst` with at most `k` stops. If there is no such route, return -1.\n\n**Constraints**\n* 1 <= n <= 100\n* 0 <= flights.length <= (n * (n - 1) / 2)\n* 0 <= pricei <= 10^4\n* 0 <= src, dst, k < n\n* src != dst\n\nInput format: The first line contains an integer `n`. The second line contains space-separated triplets of integers representing flights, e.g., \"0 1 100 1 2 100 0 2 500\" means [0,1,100], [1,2,100], [0,2,500]. The third line contains `src`, `dst`, and `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the cheapest flights within k stops.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "0 1 100 1 2 100 0 2 500",
                    "0 2 1"
                ],
                "expected_output": "200"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_306",
        "title": "Design Search Autocomplete System",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nDesign a search autocomplete system for a search engine. Users will input a sentence (words separated by spaces) character by character. The system should return up to 3 hot sentences (the most frequently typed sentences that have the given prefix) in a sorted list (alphabetically, then by frequency descending). If a sentence is typed, its frequency increases. When '#' is typed, the current input sentence is finished.\n\n**Constraints**\n* 1 <= sentences.length <= 100\n* 1 <= sentences[i].length <= 100\n* 1 <= times[i] <= 100\n* `sentences[i]` consists of lowercase English letters and spaces.\n* `times.length == sentences.length`\n* 1 <= input.length <= 100\n* `input` consists of lowercase English letters, ' ', and '#'.\n\nInput format: The first line contains `N` (number of sentences). The next `N` lines contain a sentence and its frequency, space-separated. The last line contains the user's input string, character by character (no spaces, each char on new line, ending with #).\n\nOutput format: For each character input, print a list of suggested sentences, or an empty list if none.",
        "starter_code": "# Design an autocomplete system.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "i love you 5",
                    "i am an actor 4",
                    "i want to sleep 5",
                    "i",
                    " ",
                    "l",
                    "o",
                    "v",
                    "e",
                    "#",
                    "i",
                    " ",
                    "a",
                    "#"
                ],
                "expected_output": "[[\"i love you\",\"i want to sleep\",\"i am an actor\"],[\"i love you\",\"i am an actor\",\"i want to sleep\"],[\"i love you\",\"i want to sleep\"],[\"i love you\"],[\"i love you\"],[\"i love you\"],[],[\"i love you\",\"i am an actor\",\"i want to sleep\"],[\"i am an actor\",\"i love you\",\"i want to sleep\"],[\"i am an actor\",\"i love you\"],[]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_307",
        "title": "Word Search II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` `board` of characters and a list of strings `words`, return all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where \"adjacent\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in the same word.\n\n**Constraints**\n* `m == board.length`\n* `n == board[i].length`\n* 1 <= m, n <= 12\n* `board[i][j]` is a lowercase English letter.\n* 1 <= words.length <= 3 * 10^4\n* 1 <= words[i].length <= 10\n* `words[i]` consists of lowercase English letters.\n* All the words in `words` are unique.\n\nInput format: The first line contains `m` and `n`. The next `m` lines contain `n` characters (no spaces). The last line contains a space-separated list of words.\n\nOutput format: A space-separated list of words found on the board.",
        "starter_code": "# Find all words on the board.",
        "test_cases": [
            {
                "input": [
                    "4 4",
                    "oaan",
                    "etah",
                    "niat",
                    "xbyr",
                    "oath pea eat rain"
                ],
                "expected_output": "eat oath"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_308",
        "title": "Shortest Distance from All Buildings",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` grid of `0`s, `1`s, and `2`s, where:\n* `0` represents an empty land cell.\n* `1` represents a building.\n* `2` represents an obstacle.\n\nYou want to build a house on an empty land cell that is reachable from all buildings. You can move up, down, left, and right. Return the shortest total travel distance to all buildings. If it is not possible to reach all buildings, return -1.\n\n**Constraints**\n* `m == grid.length`\n* `n == grid[i].length`\n* 1 <= m, n <= 100\n* `grid[i][j]` is `0`, `1`, or `2`.\n* There is at least one building in the grid.\n\nInput format: The first line contains `m` and `n`. The next `m` lines contain `n` space-separated integers.\n\nOutput format: A single integer.",
        "starter_code": "# Find the shortest distance from all buildings.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "1 0 2",
                    "0 0 0",
                    "0 0 1"
                ],
                "expected_output": "7"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_309",
        "title": "Data Stream Median",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThe median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values. Implement the `MedianFinder` class:\n* `MedianFinder()` initializes the `MedianFinder` object.\n* `addNum(int num)` adds an integer `num` from the data stream to the data structure.\n* `findMedian()` returns the median of all elements so far.\n\n**Constraints**\n* -10^5 <= num <= 10^5\n* There will be at least one element in the data structure before calling `findMedian`.\n* At most 5 * 10^4 calls will be made to `addNum` and `findMedian`.\n\nInput format: A single line of space-separated integers representing numbers added to the stream. End with `.` to signify calls to `findMedian()` after each number. E.g., \"1 2 . 3 .\" means add 1, add 2, find median, add 3, find median.\n\nOutput format: A space-separated list of floating-point numbers representing the medians.",
        "starter_code": "# Implement a data stream median finder.",
        "test_cases": [
            {
                "input": [
                    "1 2 . 3 ."
                ],
                "expected_output": "1.5 2.0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_310",
        "title": "Longest Substring with At Most K Distinct Characters",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.\n\n**Constraints**\n* 1 <= s.length <= 5 * 10^4\n* 0 <= k <= s.length\n* `s` consists of lowercase English letters.\n\nInput format: The first line contains the string `s`. The second line contains the integer `k`.\n\nOutput format: A single integer representing the length.",
        "starter_code": "# Find the length of the longest substring with at most k distinct characters.",
        "test_cases": [
            {
                "input": [
                    "eceba",
                    "2"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_311",
        "title": "Shortest Palindrome",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it. Return the shortest palindrome you can find by performing this transformation.\n\n**Constraints**\n* 0 <= s.length <= 5 * 10^4\n* `s` consists of lowercase English letters.\n\nInput format: A single string `s`.\n\nOutput format: A single string.",
        "starter_code": "# Find the shortest palindrome.",
        "test_cases": [
            {
                "input": [
                    "aacecaaa"
                ],
                "expected_output": "aaacecaaa"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_312",
        "title": "Find the Duplicate Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one duplicate number in `nums`, return this duplicate number. You must solve the problem without modifying the array `nums` and uses only constant extra space.\n\n**Constraints**\n* 1 <= n <= 10^5\n* `nums.length == n + 1`\n* 1 <= nums[i] <= n\n* All the integers in `nums` appear only once except for precisely one integer which appears two or more times.\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the duplicate number.",
        "test_cases": [
            {
                "input": [
                    "1 3 4 2 2"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_313",
        "title": "Find K Closest Elements",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. If there are ties, the smaller elements are preferred.\n\n**Constraints**\n* 1 <= k <= arr.length\n* 1 <= arr.length <= 10^4\n* `arr` is sorted in ascending order.\n* -10^4 <= arr[i], x <= 10^4\n\nInput format: The first line contains space-separated integers for `arr`. The second line contains integers `k` and `x`.\n\nOutput format: A space-separated list of integers.",
        "starter_code": "# Find the k closest elements to x.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 4 5",
                    "4 3"
                ],
                "expected_output": "1 2 3 4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_314",
        "title": "Minimum Number of Arrows to Burst Balloons",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are some spherical balloons spread in the `xy`-plane. For each balloon, you are given two integers `x_start` and `x_end` representing the horizontal diameter of the balloon. You are also given an integer `y` that represents the vertical position of the balloon. You are to find the minimum number of arrows that must be shot to burst all balloons. An arrow shot vertically from `(x, y)` will burst all balloons whose horizontal diameter contains `x`.\n\n**Constraints**\n* 1 <= points.length <= 10^5\n* `points[i].length == 2`\n* -2^31 <= x_start < x_end <= 2^31 - 1\n\nInput format: The first line contains `N` (number of balloons). The next `N` lines each contain two integers `x_start` and `x_end`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum number of arrows to burst balloons.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "10 16",
                    "2 8",
                    "1 6",
                    "7 12"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_315",
        "title": "Queue Reconstruction by Height",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of people `people`, where `people[i] = [hi, ki]` represents a person of height `hi` and `ki` people in front of this person who have a height greater than or equal to `hi`. Reconstruct the queue.\n\n**Constraints**\n* 1 <= people.length <= 2000\n* 0 <= hi <= 10^6\n* 0 <= ki < people.length\n\nInput format: The first line contains `N` (number of people). The next `N` lines each contain two integers `h` and `k`.\n\nOutput format: A list of lists of integers, representing the reconstructed queue.",
        "starter_code": "# Reconstruct the queue by height.",
        "test_cases": [
            {
                "input": [
                    "6",
                    "7 0",
                    "4 4",
                    "7 1",
                    "5 0",
                    "6 1",
                    "5 2"
                ],
                "expected_output": "[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_316",
        "title": "Super Ugly Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA super ugly number is a positive integer whose prime factors are only in the given integer array `primes`. Given an integer `n` and an array of integers `primes`, return the `n`th super ugly number. The `n`th super ugly number is guaranteed to fit in a 32-bit signed integer.\n\n**Constraints**\n* 1 <= n <= 10^5\n* 1 <= primes.length <= 100\n* 2 <= primes[i] <= 1000\n* `primes[i]` is unique and sorted in ascending order.\n\nInput format: The first line contains an integer `n`. The second line contains space-separated integers for `primes`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the nth super ugly number.",
        "test_cases": [
            {
                "input": [
                    "12",
                    "2 7 13 19"
                ],
                "expected_output": "32"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_317",
        "title": "Russian Doll Envelopes",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and height of an envelope. One envelope can fit into another if and only if both its width and height are strictly greater than the other envelope's width and height. Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\n\n**Constraints**\n* 1 <= envelopes.length <= 10^5\n* `envelopes[i].length == 2`\n* 1 <= wi, hi <= 10^5\n\nInput format: The first line contains `N` (number of envelopes). The next `N` lines each contain two integers `width` and `height`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum number of Russian doll envelopes.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "5 4",
                    "6 4",
                    "6 7",
                    "2 3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_318",
        "title": "Path Sum III",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return the number of paths where the sum of the values along the path equals `targetSum`. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n\n**Constraints**\n* The number of nodes in the tree is in the range [0, 1000].\n* -10^9 <= Node.val <= 10^9\n* -1000 <= targetSum <= 1000\n\nInput format: The first line contains a space-separated string representing the binary tree in level order, with \"null\" for missing children. The second line contains an integer `targetSum`.\n\nOutput format: A single integer.",
        "starter_code": "# Count paths in a binary tree that sum to target.",
        "test_cases": [
            {
                "input": [
                    "10 5 -3 3 2 null 11 3 -2 null 1",
                    "8"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_319",
        "title": "Burst Balloons",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by `nums[i]`. You are asked to burst all the balloons. If you burst the `i`th balloon, you will get `nums[left] * nums[i] * nums[right]` coins. `left` and `right` are adjacent indices of `i` after the `i`th balloon is burst. Consider `nums[-1] = nums[n] = 1`. Return the maximum coins you can collect by bursting the balloons wisely.\n\n**Constraints**\n* n == nums.length\n* 1 <= n <= 500\n* 0 <= nums[i] <= 100\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum coins from bursting balloons.",
        "test_cases": [
            {
                "input": [
                    "3 1 5 8"
                ],
                "expected_output": "167"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_320",
        "title": "Perfect Number",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA perfect number is a positive integer that is equal to the sum of its proper positive divisors. Given an integer `num`, return `true` if it is a perfect number, otherwise return `false`.\n\n**Constraints**\n* 1 <= num <= 10^8\n\nInput format: A single integer `num`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Check if a number is a perfect number.",
        "test_cases": [
            {
                "input": [
                    "28"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_321",
        "title": "Find K Pairs with Smallest Sums",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given two integer arrays `nums1` and `nums2` sorted in non-decreasing order and an integer `k`. Define a pair `(u, v)` as one element from `nums1` and one element from `nums2`. Return the `k` pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sums.\n\n**Constraints**\n* 1 <= nums1.length, nums2.length <= 10^5\n* -10^9 <= nums1[i], nums2[i] <= 10^9\n* 1 <= k <= 1000\n\nInput format: The first line contains space-separated integers for `nums1`. The second line contains space-separated integers for `nums2`. The third line contains an integer `k`.\n\nOutput format: A list of lists of integers, representing the pairs.",
        "starter_code": "# Find k pairs with smallest sums.",
        "test_cases": [
            {
                "input": [
                    "1 7 11",
                    "2 4 6",
                    "3"
                ],
                "expected_output": "[[1,2],[1,4],[1,6]]"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_322",
        "title": "Split Array Largest Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `nums` which consists of non-negative integers and an integer `k`, you are asked to split the array into `k` non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these `k` subarrays.\n\n**Constraints**\n* 1 <= nums.length <= 1000\n* 0 <= nums[i] <= 10^6\n* 1 <= k <= min(50, nums.length)\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains an integer `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Split array to minimize the largest sum.",
        "test_cases": [
            {
                "input": [
                    "7 2 5 10 8",
                    "2"
                ],
                "expected_output": "18"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_323",
        "title": "Longest Palindromic Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a string `s`, find the longest palindromic subsequence's length in `s`.\n\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\n* 1 <= s.length <= 1000\n* `s` consists only of lowercase English letters.\n\nInput format: A single string `s`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the length of the longest palindromic subsequence.",
        "test_cases": [
            {
                "input": [
                    "bbbab"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_324",
        "title": "Target Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums` and an integer `target`. You want to build an expression out of `nums` by adding one of the symbols `'+'` or `'-'` before each integer in `nums` and then concatenate all the integers. Return the number of different expressions that you can build, which evaluates to `target`.\n\n**Constraints**\n* 1 <= nums.length <= 20\n* 0 <= nums[i] <= 1000\n* 0 <= sum(nums[i]) <= 1000\n* -1000 <= target <= 1000\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains an integer `target`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the number of expressions that sum to target.",
        "test_cases": [
            {
                "input": [
                    "1 1 1 1 1",
                    "3"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_325",
        "title": "Decode String",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an encoded string, return its decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated `k` times. `k` is guaranteed to be a positive integer.\n\n**Constraints**\n* 1 <= s.length <= 30\n* `s` consists of lowercase English letters, digits, and square brackets `[]`.\n* `s` is guaranteed to be a valid encoding.\n* `k` is a positive integer in the range `[1, 300]`.\n\nInput format: A single string `s`.\n\nOutput format: A single string.",
        "starter_code": "# Decode an encoded string.",
        "test_cases": [
            {
                "input": [
                    "3[a]2[bc]"
                ],
                "expected_output": "aaabcbc"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_326",
        "title": "Open the Lock",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou have a lock with 4 wheels, each wheel has 10 slots '0' through '9'. The wheels can rotate freely and cyclically. For example, '9' goes to '0', and '0' goes to '9'. The lock starts at '0000'. You are given a list of `deadends` which are combinations that will cause the lock to get stuck and cannot be opened. You are also given a `target` combination. Return the minimum number of turns required to open the lock. If it is impossible, return -1.\n\n**Constraints**\n* 1 <= deadends.length <= 500\n* `deadends[i].length == 4`\n* `target.length == 4`\n* `deadends[i]` and `target` consist of digits from '0' to '9'.\n* `deadends` does not contain `target`.\n\nInput format: The first line contains space-separated strings for `deadends`. The second line contains the `target` string.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum turns to open the lock.",
        "test_cases": [
            {
                "input": [
                    "0201 0101 0102 1212 2002",
                    "0202"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_327",
        "title": "Partition Equal Subset Sum",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an integer array `nums`, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal.\n\n**Constraints**\n* 1 <= nums.length <= 200\n* 1 <= nums[i] <= 100\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Check if array can be partitioned into two equal sum subsets.",
        "test_cases": [
            {
                "input": [
                    "1 5 11 5"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_328",
        "title": "Delete Operation for Two Strings",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same. In one step, you can delete exactly one character from either string.\n\n**Constraints**\n* 1 <= word1.length, word2.length <= 500\n* `word1` and `word2` consist of lowercase English letters.\n\nInput format: The first line contains string `word1`. The second line contains string `word2`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum delete operations to make two strings same.",
        "test_cases": [
            {
                "input": [
                    "sea",
                    "eat"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_329",
        "title": "Longest String Chain",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of `words` where each `words[i]` is a string. A word `word1` is a predecessor of `word2` if and only if `word2` is `word1` with one letter added anywhere in `word1`.\nA word chain is a sequence of words `word1, word2, ..., wordk` such that `word1` is a predecessor of `word2`, `word2` is a predecessor of `word3`, and so on. A single word is also a word chain with length 1. Return the longest possible length of a word chain with words taken from the given list of words.\n\n**Constraints**\n* 1 <= words.length <= 1000\n* 1 <= words[i].length <= 16\n* `words[i]` consists of lowercase English letters.\n\nInput format: A single line of space-separated strings representing the `words` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the longest string chain.",
        "test_cases": [
            {
                "input": [
                    "a b ba bca bda bdca"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_330",
        "title": "Cherry Pickup",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `n x n` `grid` representing a field of cherries, each cell contains the number of cherries that you can collect. You have two robots. Initially, a robot is at `(0, 0)`, and the other robot is at `(0, 0)`. Each robot can only move right or down in the grid. When a robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell `0`. Return the maximum number of cherries that you can collect.\n\n**Constraints**\n* n == grid.length\n* n == grid[i].length\n* 1 <= n <= 50\n* 0 <= grid[i][j] <= 100\n\nInput format: The first line contains an integer `n`. The next `n` lines contain `n` space-separated integers representing the grid.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum number of cherries collected by two robots.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "0 1 -1",
                    "1 0 -1",
                    "1 1 1"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_331",
        "title": "Cutting Ribbons",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `ribbons`, where `ribbons[i]` represents the length of the `i`th ribbon, and an integer `k`. You are also given an integer `maxLen` as the maximum possible length of a ribbon. You want to cut each ribbon into pieces of the same positive integer length. Return the maximum possible positive integer length `L` that you can cut all ribbons into such that you have at least `k` pieces.\n\n**Constraints**\n* 1 <= ribbons.length <= 10^5\n* 1 <= ribbons[i] <= 10^9\n* 1 <= k <= 10^9\n\nInput format: The first line contains space-separated integers for `ribbons`. The second line contains an integer `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum length to cut ribbons into.",
        "test_cases": [
            {
                "input": [
                    "9 7 5",
                    "3"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_332",
        "title": "Find All Possible Recipes from a given supplies list",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou have `n` `recipes`, `recipes[i]` is the name of the `i`th recipe, and `ingredients[i]` is a list of the ingredients needed to follow the `i`th recipe. You are also given a list of `supplies` available to you. Return a list of all `recipes` that you can create.\n\n**Constraints**\n* n == recipes.length == ingredients.length\n* 1 <= n <= 100\n* 1 <= ingredients[i].length <= 100\n* 1 <= supplies.length <= 100\n* All strings consist of lowercase English letters.\n\nInput format: The first line contains a space-separated list of `recipes`. The next `N` lines contain space-separated ingredients for each recipe. The last line contains a space-separated list of `supplies`.\n\nOutput format: A space-separated list of recipes.",
        "starter_code": "# Find all possible recipes from given supplies.",
        "test_cases": [
            {
                "input": [
                    "bread sandwich burger",
                    "flour sugar water",
                    "bread meat",
                    "bread sandwich meat",
                    "flour sugar meat"
                ],
                "expected_output": "bread sandwich"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_333",
        "title": "Minimum Number of Operations to Make Array Continuous",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums`. In one operation, you can replace any element in `nums` with any integer. `nums` is considered *continuous* if:\n\n1. All elements in `nums` are unique.\n2. The difference between the maximum element and the minimum element in `nums` equals `nums.length - 1`.\n\nReturn the minimum number of operations to make `nums` *continuous*.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* 1 <= nums[i] <= 10^9\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find minimum operations to make array continuous.",
        "test_cases": [
            {
                "input": [
                    "4 2 5 3"
                ],
                "expected_output": "0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_334",
        "title": "Maximum Score Words Formed by Letters",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a list of `words`, a list of single `letters` (might be repeated), and the `score` of each character from 'a' through 'z', return the maximum score you can get by using the given `letters` to form words.\n\n**Constraints**\n* 1 <= words.length <= 14\n* 1 <= words[i].length <= 15\n* `words[i]` consists of lowercase English letters.\n* 0 <= letters.length <= 100\n* `letters[j]` is a lowercase English letter.\n* `score.length == 26`\n* 0 <= score[i] <= 10\n\nInput format: The first line contains space-separated words. The second line contains a string of letters (no spaces). The third line contains 26 space-separated integers representing scores for 'a' to 'z'.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum score from words formed by letters.",
        "test_cases": [
            {
                "input": [
                    "dog cat dad good",
                    "a a c d d d g o o",
                    "1 0 9 5 0 0 3 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0"
                ],
                "expected_output": "23"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_335",
        "title": "Minimum Cost to Cut a Stick",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven a wooden stick of length `n` units. The stick is labeled from `0` to `n`. You are given an integer array `cuts` where `cuts[i]` is the position you should cut the stick. You must perform the cuts in any order. The cost of one cut is the length of the stick being cut. Return the minimum total cost of the cuts.\n\n**Constraints**\n* 2 <= n <= 10^6\n* 1 <= cuts.length <= min(n - 1, 100)\n* 1 <= cuts[i] <= n - 1\n* All the integers in `cuts` are unique.\n\nInput format: The first line contains an integer `n`. The second line contains space-separated integers for `cuts`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum cost to cut a stick.",
        "test_cases": [
            {
                "input": [
                    "7",
                    "1 3 4 5"
                ],
                "expected_output": "16"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_336",
        "title": "Shortest Common Supersequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven two strings `str1` and `str2`, return the shortest string that has both `str1` and `str2` as subsequences. If there are multiple valid answers, return any of them.\n\n**Constraints**\n* 1 <= str1.length, str2.length <= 1000\n* `str1` and `str2` consist of lowercase English letters.\n\nInput format: The first line contains string `str1`. The second line contains string `str2`.\n\nOutput format: A single string.",
        "starter_code": "# Find the shortest common supersequence.",
        "test_cases": [
            {
                "input": [
                    "abac",
                    "rab"
                ],
                "expected_output": "rabac"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_337",
        "title": "Maximum Score From Removing Stones",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are playing a game with three piles of stones. The `i`th pile has `piles[i]` stones. Each turn, you choose two different non-empty piles, take one stone from each pile, and add one point to your score. You stop when you cannot make a move. Return the maximum score you can get.\n\n**Constraints**\n* `piles.length == 3`\n* 1 <= piles[i] <= 10^9\n\nInput format: A single line of three space-separated integers representing the `piles` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum score from removing stones.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_338",
        "title": "Longest Happy String",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nA string is `happy` if no three consecutive characters are the same (e.g., \"aaabbc\" is not happy, but \"aabbcc\" is happy). Given three integers `a`, `b`, and `c`, return the longest possible happy string that contains at most `a` occurrences of 'a', `b` occurrences of 'b', and `c` occurrences of 'c'. If there is no such string, return an empty string.\n\n**Constraints**\n* 0 <= a, b, c <= 100\n\nInput format: Three space-separated integers `a`, `b`, `c`.\n\nOutput format: A single string.",
        "starter_code": "# Find the longest happy string.",
        "test_cases": [
            {
                "input": [
                    "1 1 7"
                ],
                "expected_output": "ccbccacc"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_339",
        "title": "Jump Game VII",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a 0-indexed binary string `s` and two integers `minJump` and `maxJump`. You are initially at index `0`. You can jump from index `i` to index `j` if `i + minJump <= j <= min(i + maxJump, s.length - 1)` and `s[j] == '0'`. Return `true` if you can reach the last index of `s`, or `false` otherwise.\n\n**Constraints**\n* 2 <= s.length <= 10^5\n* `s[i]` is either '0' or '1'.\n* `s[0] == '0'`\n* 1 <= minJump <= maxJump < s.length\n\nInput format: The first line contains string `s`. The second line contains integers `minJump` and `maxJump`.\n\nOutput format: \"true\" or \"false\".",
        "starter_code": "# Check if the last index can be reached with given jump constraints.",
        "test_cases": [
            {
                "input": [
                    "011010",
                    "2 3"
                ],
                "expected_output": "true"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_340",
        "title": "Longest Increasing Path in a Matrix",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `m x n` integer matrix, return the length of the longest increasing path in the matrix. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., no wrap-around is allowed).\n\n**Constraints**\n* `m == matrix.length`\n* `n == matrix[i].length`\n* 1 <= m, n <= 200\n* 0 <= matrix[i][j] <= 10^9\n\nInput format: The first line contains `m` and `n`. The next `m` lines contain `n` space-separated integers representing the matrix.\n\nOutput format: A single integer.",
        "starter_code": "# Find the length of the longest increasing path in a matrix.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "9 9 4",
                    "6 6 8",
                    "2 1 1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_341",
        "title": "Freedom Trail",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nIn the game \"Freedom Trail\", you are given a `ring` representing a circular string, and a `key` representing the string you want to type. Initially, you are at the \"12 o'clock\" position (first character) of the `ring`. To type a character of the `key`: move the `ring` to align the desired character at the \"12 o'clock\" position, then press the \"dial\" button. The number of steps to move the `ring` is the minimum number of rotations clockwise or anti-clockwise. Each press costs 1 step. Return the minimum number of steps to spell all characters in the `key`.\n\n**Constraints**\n* 1 <= ring.length, key.length <= 100\n* `ring` and `key` consist of only lowercase English letters.\n* It is guaranteed that `key[i]` is in `ring`.\n\nInput format: The first line contains string `ring`. The second line contains string `key`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum steps to spell the key using the freedom trail.",
        "test_cases": [
            {
                "input": [
                    "godding",
                    "ding"
                ],
                "expected_output": "13"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_342",
        "title": "K-th Smallest Prime Fraction",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a sorted integer array `arr` containing 1 and prime numbers, where all the integers of `arr` are unique. You are also given an integer `k`. For every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`. Return the `k`th smallest fraction. Return your answer as an array of two integers `[numerator, denominator]`.\n\n**Constraints**\n* 2 <= arr.length <= 1000\n* 1 <= arr[i] <= 10^7\n* `arr[0] == 1`\n* `arr[i]` is a prime number for `i > 0`.\n* All the numbers in `arr` are unique and sorted in strictly increasing order.\n* 1 <= k <= arr.length * (arr.length - 1) / 2\n\nInput format: The first line contains space-separated integers for `arr`. The second line contains an integer `k`.\n\nOutput format: A space-separated list of two integers.",
        "starter_code": "# Find the k-th smallest prime fraction.",
        "test_cases": [
            {
                "input": [
                    "1 2 3 5",
                    "3"
                ],
                "expected_output": "2 5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_343",
        "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nAlice and Bob are engineers trying to build a new network. There are `n` nodes labeled from 1 to `n`. You are given an array `edges` where `edges[i] = [typei, ui, vi]` denotes a bidirectional edge of `typei` between nodes `ui` and `vi`. `typei` is 1 for Alice, 2 for Bob, and 3 for both. Alice and Bob can traverse the graph independently. They start at node 1. Return the maximum number of edges you can remove so that Alice and Bob can still traverse the entire graph.\n\n**Constraints**\n* 1 <= n <= 10^5\n* 1 <= edges.length <= min(10^5, 3 * n * (n - 1) / 2)\n* `edges[i][0]` is 1, 2, or 3.\n* 1 <= ui < vi <= n\n* All tuples `(typei, ui, vi)` are distinct.\n\nInput format: The first line contains an integer `n`. The next `M` lines (where `M` is the number of edges) contain three space-separated integers `type u v` for each edge.\n\nOutput format: A single integer, or -1 if the graph is not fully traversable.",
        "starter_code": "# Find the maximum number of edges to remove to keep the graph fully traversable.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "3 1 2",
                    "3 2 3",
                    "3 3 4",
                    "3 1 4",
                    "1 1 2",
                    "2 3 4"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_344",
        "title": "Maximum Candies You Can Get from Boxes",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou have `n` boxes. You are given a list of `status` of boxes (0: closed, 1: open), a list of `candies` in each box, a list of `keys` in each box (which boxes can be opened), and a list of `containedBoxes` in each box (which boxes are inside). You are also given `initialBoxes`, the indices of the boxes you initially have. Return the maximum number of candies you can collect.\n\n**Constraints**\n* 1 <= n <= 1000\n* 0 <= status[i] <= 1\n* 0 <= candies[i] <= 1000\n* `keys.length == n`, `containedBoxes.length == n`\n* `keys[i]`, `containedBoxes[i]` contain unique values in `[0, n-1]`\n* 0 <= initialBoxes.length <= n\n\nInput format: The first line contains `n`. The next `n` lines contain `status[i]`, `candies[i]`, and then space-separated lists of `keys[i]` and `containedBoxes[i]`. The last line contains space-separated `initialBoxes`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum candies from boxes.",
        "test_cases": [
            {
                "input": [
                    "4",
                    "1 100",
                    "",
                    "",
                    "0 20",
                    "0",
                    "",
                    "0 30",
                    "3",
                    "",
                    "0 40",
                    "1",
                    "",
                    "0"
                ],
                "expected_output": "100"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_345",
        "title": "Minimum Number of Frogs Croaking",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven the string `croakOfFrogs`, which represents a concatenation of `n` frog sounds in the form of \"croakcroak...croak\". Return the minimum number of frogs required to emit all the given `croak` sounds. Each 'c', 'r', 'o', 'a', 'k' must be a part of the same `croak` sound. A frog can only start croaking once it finishes the previous one.\n\n**Constraints**\n* 1 <= croakOfFrogs.length <= 10^5\n* `croakOfFrogs` consists of characters 'c', 'r', 'o', 'a', 'k'.\n\nInput format: A single string `croakOfFrogs`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum number of frogs croaking.",
        "test_cases": [
            {
                "input": [
                    "croakcroak"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_346",
        "title": "Largest Sum of Averages",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums` and an integer `k`. You can partition `nums` into at most `k` non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray. Return the largest score you can achieve.\n\n**Constraints**\n* 1 <= nums.length <= 100\n* 1 <= nums[i] <= 10^4\n* 1 <= k <= nums.length\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains an integer `k`.\n\nOutput format: A single floating-point number.",
        "starter_code": "# Find the largest sum of averages after partitioning the array.",
        "test_cases": [
            {
                "input": [
                    "9 1 2 3 9",
                    "3"
                ],
                "expected_output": "20.0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_347",
        "title": "Max Points on a Line",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array of `points` where `points[i] = [xi, yi]` represents a point on an X-Y plane, return the maximum number of points that lie on the same straight line.\n\n**Constraints**\n* 1 <= points.length <= 300\n* `points[i].length == 2`\n* -10^4 <= xi, yi <= 10^4\n* All the `points` are unique.\n\nInput format: The first line contains `N` (number of points). The next `N` lines each contain two integers `x` and `y`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum number of points on a line.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 1",
                    "2 2",
                    "3 3"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_348",
        "title": "Maximum Vacation Days",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nLeetcoding is a company that has `n` cities and `m` flights. You are given a `flights` matrix and a `days` matrix. `flights[i][j] = 1` means there is a flight from city `i` to city `j`, otherwise it is `0`. `days[i][j]` means the number of vacation days you could take in city `i` in week `j`. You are given `k` weeks, and you start in city `0` in week `0`. Return the maximum number of vacation days you can take.\n\n**Constraints**\n* n, m <= 100\n* `flights[i][j]` is 0 or 1.\n* `days[i][j]` is non-negative and <= 100.\n* 1 <= k <= 100\n\nInput format: The first line contains `n` and `k`. The next `n` lines contain `n` space-separated integers for `flights`. The next `n` lines contain `k` space-separated integers for `days`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum vacation days.",
        "test_cases": [
            {
                "input": [
                    "3 2",
                    "0 1 1",
                    "1 0 1",
                    "1 1 0",
                    "10 10",
                    "10 10",
                    "10 10"
                ],
                "expected_output": "30"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_349",
        "title": "Find Kth Smallest Sum of a Matrix With Sorted Rows",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` `matrix` where each row is sorted in non-decreasing order. You are also given an integer `k`. A subset sum is formed by choosing exactly one element from each row and summing them up. Return the `k`th smallest subset sum.\n\n**Constraints**\n* 1 <= m, n <= 40\n* 1 <= k <= min(200, n^m)\n* 1 <= matrix[i][j] <= 5000\n\nInput format: The first line contains `m` and `n`. The next `m` lines contain `n` space-separated integers for the matrix. The last line contains an integer `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the k-th smallest sum of a matrix with sorted rows.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "1 3 11",
                    "2 4 6",
                    "3 5 7",
                    "5"
                ],
                "expected_output": "12"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_350",
        "title": "Minimum Absolute Sum Difference",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given two arrays `nums1` and `nums2` of equal length. You are allowed to change at most one element in `nums1` to any value `x`. Your goal is to minimize the absolute sum difference between `nums1` and `nums2` after this modification. The absolute sum difference is defined as `sum(|nums1[i] - nums2[i]|) for all i`. Return the minimum absolute sum difference.\n\n**Constraints**\n* 1 <= nums1.length == nums2.length <= 10^5\n* 1 <= nums1[i], nums2[i] <= 10^9\n\nInput format: The first line contains space-separated integers for `nums1`. The second line contains space-separated integers for `nums2`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum absolute sum difference.",
        "test_cases": [
            {
                "input": [
                    "1 7 5",
                    "2 3 5"
                ],
                "expected_output": "3"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_351",
        "title": "Minimum number of operations to make a continuous array",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer array `nums`. In one operation, you can replace any element in `nums` with any integer. `nums` is considered *continuous* if:\n\n1. All elements in `nums` are unique.\n2. The difference between the maximum element and the minimum element in `nums` equals `nums.length - 1`.\n\nReturn the minimum number of operations to make `nums` *continuous*.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* 1 <= nums[i] <= 10^9\n\nInput format: A single line of space-separated integers representing the `nums` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum number of operations to make an array continuous.",
        "test_cases": [
            {
                "input": [
                    "4 2 5 3"
                ],
                "expected_output": "0"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_352",
        "title": "Shortest Path in a Grid with Obstacles Elimination",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` integer matrix `grid` where each cell is either `0` (empty) or `1` (obstacle). You can move up, down, left, or right. You are also given an integer `k`. Return the minimum number of steps to walk from `(0, 0)` to `(m - 1, n - 1)` (inclusive) by eliminating at most `k` obstacles. If it is impossible to find such a path, return -1.\n\n**Constraints**\n* `m == grid.length`\n* `n == grid[i].length`\n* 1 <= m, n <= 40\n* 1 <= k <= m * n\n* `grid[i][j]` is `0` or `1`.\n* `grid[0][0] == 0`\n* `grid[m - 1][n - 1] == 0`\n\nInput format: The first line contains `m` and `n`. The next `m` lines contain `n` space-separated integers for the grid. The last line contains an integer `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the shortest path in a grid with obstacles elimination.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "0 0 0",
                    "0 0 1",
                    "0 0 0",
                    "1"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_353",
        "title": "Find Kth Largest XOR Coordinate Value",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a 2D integer matrix `matrix` and an integer `k`. The `XOR sum` of a (0-indexed) submatrix `(r1, c1)` to `(r2, c2)` is the XOR of all `matrix[i][j]` for `r1 <= i <= r2` and `c1 <= j <= c2`. We define `value(r, c)` as the XOR sum of the submatrix `(0, 0)` to `(r, c)` (inclusive). Return the `k`th largest `value(r, c)`.\n\n**Constraints**\n* 1 <= m, n <= 1000\n* 0 <= matrix[i][j] <= 10^6\n* 1 <= k <= m * n\n\nInput format: The first line contains `m` and `n`. The next `m` lines contain `n` space-separated integers for the matrix. The last line contains an integer `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the k-th largest XOR coordinate value.",
        "test_cases": [
            {
                "input": [
                    "2 2",
                    "5 2",
                    "1 6",
                    "3"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_354",
        "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an array `nums` and an integer `target`, return the maximum number of non-overlapping subarrays such that their sum equals `target`.\n\n**Constraints**\n* 1 <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n* -10^9 <= target <= 10^9\n\nInput format: The first line contains space-separated integers for `nums`. The second line contains an integer `target`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum number of non-overlapping subarrays with sum equals target.",
        "test_cases": [
            {
                "input": [
                    "1 1 1 1 1",
                    "2"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_355",
        "title": "Minimum Operations to Make a Subsequence",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given arrays `target` and `arr`. You can perform the following operation on `arr` any number of times: insert any integer at any position of `arr`. Return the minimum number of operations needed to make `target` a subsequence of `arr`.\n\n**Constraints**\n* 1 <= target.length, arr.length <= 10^5\n* 1 <= target[i], arr[i] <= 10^9\n* `target` contains unique elements.\n\nInput format: The first line contains space-separated integers for `target`. The second line contains space-separated integers for `arr`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum operations to make target a subsequence of arr.",
        "test_cases": [
            {
                "input": [
                    "6 4 8 2 10",
                    "4 2 10 6 8"
                ],
                "expected_output": "2"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_356",
        "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given three integers `n`, `m`, and `k`. You are tasked to build an array `nums` that has the following properties:\n\n* `nums` has `n` integers.\n* Each `nums[i]` is between `1` and `m` (inclusive).\n* You can find the maximum element of `nums` exactly `k` comparisons. That is, if you iterate through `nums` from left to right, you maintain a running maximum, and you increment a counter every time a new maximum is found, this counter must be equal to `k` at the end.\n\nReturn the number of ways to build such an array. Since the answer may be too large, return it modulo 10^9 + 7.\n\n**Constraints**\n* 1 <= n, m <= 50\n* 0 <= k <= n\n\nInput format: Three space-separated integers `n`, `m`, `k`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the number of ways to build an array with exactly k comparisons for maximum.",
        "test_cases": [
            {
                "input": [
                    "2 3 1"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_357",
        "title": "Number of Ways to Reconstruct a Tree",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array of pairs `pairs` representing a graph. Each `pairs[i] = [ui, vi]` indicates that there is a bidirectional edge between `ui` and `vi` in the graph. The graph is guaranteed to be a tree. Return the number of ways to reconstruct the tree from the given pairs. There can be 0, 1, or 2 ways. Return 0 if it's impossible to reconstruct a tree, 1 if there's a unique tree, and 2 if there are multiple ways.\n\n**Constraints**\n* 1 <= n <= 500 (number of nodes implicitly determined by pairs)\n* 1 <= pairs.length <= n * (n - 1) / 2\n* `pairs[i].length == 2`\n* 1 <= ui, vi <= n\n* ui != vi\n* No duplicate pairs.\n\nInput format: The first line contains `M` (number of pairs). The next `M` lines each contain two integers `u` and `v`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the number of ways to reconstruct a tree.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 2",
                    "1 3",
                    "2 3"
                ],
                "expected_output": "1"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_358",
        "title": "Minimum Falling Path Sum II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven an `n x n` integer `grid`, return the minimum sum of a `falling path` with non-zero shifts. A falling path with non-zero shifts is a path that starts at any element in the first row and chooses exactly one element from each row. The chosen elements in two consecutive rows must not be in the same column.\n\n**Constraints**\n* n == grid.length\n* n == grid[i].length\n* 1 <= n <= 200\n* -99 <= grid[i][j] <= 99\n\nInput format: The first line contains an integer `n`. The next `n` lines contain `n` space-separated integers representing the grid.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum falling path sum with non-zero shifts.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "1 2 3",
                    "4 5 6",
                    "7 8 9"
                ],
                "expected_output": "13"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_359",
        "title": "Parallel Courses III",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an integer `n` which indicates that there are `n` courses labeled from `1` to `n`. You are also given a 2D integer array `relations` where `relations[j] = [prevCoursej, nextCoursej]` denotes that `prevCoursej` must be taken before `nextCoursej`. Furthermore, you are given a 0-indexed integer array `time` where `time[i]` denotes how many months it takes to complete the `(i+1)`th course. You can take any number of courses at the same time, as long as the prerequisite courses have been completed. Return the minimum number of months needed to complete all the courses.\n\n**Constraints**\n* 1 <= n <= 5 * 10^4\n* 0 <= relations.length <= min(n * (n - 1) / 2, 5 * 10^4)\n* relations[j].length == 2\n* 1 <= prevCoursej, nextCoursej <= n\n* prevCoursej != nextCoursej\n* All the pairs `[prevCoursej, nextCoursej]` are unique.\n* `time.length == n`\n* 1 <= time[i] <= 10^4\n\nInput format: The first line contains `n`. The second line contains `M` (number of relations). The next `M` lines each contain two integers `prev next`. The last line contains `n` space-separated integers for `time`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum months needed to complete all parallel courses.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "3",
                    "1 3",
                    "2 3",
                    "0 1",
                    "3 2 5",
                    "1 2 3"
                ],
                "expected_output": "8"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_360",
        "title": "Count Ways to Build Good Strings",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nGiven integers `low`, `high`, `zero`, and `one`, return the number of \"good\" strings. A good string is a string that can be formed by concatenating `zero` '0's together or `one` '1's together, and its length is between `low` and `high` (inclusive).\n\n**Constraints**\n* 1 <= low <= high <= 10^5\n* 1 <= zero, one <= high\n\nInput format: Four space-separated integers `low`, `high`, `zero`, `one`.\n\nOutput format: A single integer.",
        "starter_code": "# Count ways to build good strings.",
        "test_cases": [
            {
                "input": [
                    "2 3 1 2"
                ],
                "expected_output": "5"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_361",
        "title": "Reachable Nodes In Subdivided Graph",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given a an undirected graph with `n` nodes labeled from `0` to `n - 1`. You are also given an array of `edges`, where `edges[i] = [ui, vi, cnti]` represents an undirected edge between `ui` and `vi` that has `cnti` new nodes in between. You are given an integer `maxMoves`. Return the number of reachable nodes in the new graph.\n\n**Constraints**\n* 0 <= edges.length <= min(n * (n - 1) / 2, 1000)\n* 0 <= ui, vi < n\n* ui != vi\n* 1 <= cnti <= 10^9\n* 1 <= maxMoves <= 10^9\n* 0 <= n <= 10^9\n\nInput format: The first line contains `n`. The second line contains `M` (number of edges). The next `M` lines each contain three integers `u v cnt`. The last line contains an integer `maxMoves`.\n\nOutput format: A single integer.",
        "starter_code": "# Count reachable nodes in a subdivided graph.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "2",
                    "0 1 10",
                    "0 2 1",
                    "7"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_362",
        "title": "Minimum Cost to Connect All Points",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`. The cost of connecting two points `[x1, y1]` and `[x2, y2]` is the Manhattan distance between them: `|x1 - x2| + |y1 - y2|`. Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.\n\n**Constraints**\n* 1 <= points.length <= 1000\n* -10^6 <= xi, yi <= 10^6\n* All pairs `(xi, yi)` are distinct.\n\nInput format: The first line contains `N` (number of points). The next `N` lines each contain two integers `x` and `y`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum cost to connect all points.",
        "test_cases": [
            {
                "input": [
                    "3",
                    "0 0",
                    "2 2",
                    "3 10"
                ],
                "expected_output": "20"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_363",
        "title": "Minimum Number of Days to Eat N Oranges",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nThere are `n` oranges in the kitchen and you decided to eat some of them every day. You can only eat one orange in one day. If the number of oranges remaining `n` is divisible by 2, you can eat `n / 2` oranges. If the number of oranges remaining `n` is divisible by 3, you can eat `2 * (n / 3)` oranges. You can apply these operations any number of times. Return the minimum number of days to eat all `n` oranges.\n\n**Constraints**\n* 1 <= n <= 2 * 10^9\n\nInput format: A single integer `n`.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum number of days to eat n oranges.",
        "test_cases": [
            {
                "input": [
                    "10"
                ],
                "expected_output": "4"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_364",
        "title": "Cherry Pickup II",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou are given an `m x n` integer `grid` representing a field of cherries. You have two robots. Initially, a robot is at `(0, 0)`, and the other robot is at `(0, n - 1)`. Each robot can move down and to the left, right, or straight. When a robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell `0`. If both robots are in the same cell, only one picks up cherries. Return the maximum number of cherries that you can collect.\n\n**Constraints**\n* m == grid.length\n* n == grid[i].length\n* 1 <= m, n <= 70\n* 0 <= grid[i][j] <= 100\n\nInput format: The first line contains `m` and `n`. The next `m` lines contain `n` space-separated integers representing the grid.\n\nOutput format: A single integer.",
        "starter_code": "# Find the maximum cherries collected by two robots moving simultaneously.",
        "test_cases": [
            {
                "input": [
                    "3 3",
                    "3 1 1",
                    "2 5 1",
                    "1 5 5"
                ],
                "expected_output": "24"
            }
        ],
        "from": "AI"
    },
    {
        "id": "mas_365",
        "title": "Minimum Score Triangulation of Polygon",
        "category": "Modelling and Simulation",
        "input_type": "stdin",
        "description_md": "**Task**\nYou have a convex `n`-sided polygon where its vertices are labeled A[0], A[1], ..., A[n-1] in clockwise order. You are given `A`, where `A[i]` is the value of the `i`-th vertex (from 0-indexed). You want to triangulate the polygon into `n-2` triangles. For each triangle, the value is the product of the labels of its vertices. The score of a triangulation is the sum of these values. Return the minimum score of a triangulation.\n\n**Constraints**\n* 3 <= A.length <= 50\n* 1 <= A[i] <= 100\n\nInput format: A single line of space-separated integers representing the `A` array.\n\nOutput format: A single integer.",
        "starter_code": "# Find the minimum score triangulation of a polygon.",
        "test_cases": [
            {
                "input": [
                    "1 2 3"
                ],
                "expected_output": "6"
            }
        ],
        "from": "AI"
    }
]