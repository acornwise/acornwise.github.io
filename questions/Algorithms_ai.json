[
  {
    "id": "def97ef7-5521-41cb-bc51-f80104b9bb2a",
    "title": "Countdown",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes as input an integer and outputs a rocket countdown sequence.\n\n**Constraints**\nInput format:\nAn integer greater than 0 and less than 100.\n\nOutput format:\nA series of integers on separate rows with a final string, \"lift off\".",
    "starter_code": "# Write a program that takes as input an integer and outputs a rocket countdown sequence.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "3\n2\n1\nlift off"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "f8bf6bbe-4b67-4c50-a15f-c171424e78b1",
    "title": "Pig Latin",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nPig Latin is a language game made by modifying English words:\n\nIf the letter starts with a consonant:\nStep 1: Remove the first letter of the word.\nStep 2: Add a \u201c-\u201d to the end of the word.\nStep 3: Add the removed letter.\nStep 4: Add \u201day\u201d.\n\nIf the letter starts with a vowel just add \u201c-yay\u201c to the end of the word.\n\nWrite a program that will translate a word into Pig Latin.\n\n**Constraints**\nThe provided input word will only consist of uppercase and lowercase letters.\n\nInput format:\nA string consisting of a single English word.\n\nOutput format:\nA string consisting of the translated input.",
    "starter_code": "# Pig Latin is a language game made by modifying English words:\n# \n# If the letter starts with a consonant:\n# Step 1: Remove the first letter of the word.\n# Step 2: Add a \u201c-\u201d to the end of the word.\n# Step 3: Add the removed letter.\n# Step 4: Add \u201day\u201d.\n# \n# If the letter starts with a vowel just add \u201c-yay\u201c to the end of the word.\n# \n# Write a program that will translate a word into Pig Latin.",
    "test_cases": [
      {
        "input": [
          "Hello"
        ],
        "expected_output": "ello-Hay"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "91a6ca65-5da6-4598-b23a-35260871ed05",
    "title": "Cost of Petrol",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nAlesis is concerned about the CO2 emissions from his petrol car. According to his car manual, burning 1 litre of petrol produces 0.0024 tonnes of CO2.\n\nWrite a program to calculate the total tonnes of CO2 produced by a car in a year, rounded down to the nearest whole number. The program should take as input a list of 12 numbers, each representing the liters of petrol used per month.\n\nSample calculation:\n2136 litres used over a year\nAnnual CO2 = 2136 * 0.0024 = 5.1264\nAnnual CO2 = 5 tonnes (rounded down to nearest whole number)\n\n\n**Constraints**\nInput format:\nA list of 12 numbers (positive integers) separated by spaces. The values will be in the range 0 to 200 inclusive. \n\nOutput format:\nA number (positive integer) representing the tonnes of CO2 produced, rounded down to the nearest whole tonne.",
    "starter_code": "# Alesis is concerned about the CO2 emissions from his petrol car. According to his car manual, burning 1 litre of petrol produces 0.0024 tonnes of CO2.\n# \n# Write a program to calculate the total tonnes of CO2 produced by a car in a year, rounded down to the nearest whole number. The program should take as input a list of 12 numbers, each representing the liters of petrol used per month.\n# \n# Sample calculation:\n# 2136 litres used over a year\n# Annual CO2 = 2136 * 0.0024 = 5.1264\n# Annual CO2 = 5 tonnes (rounded down to nearest whole number)\n# ",
    "test_cases": [
      {
        "input": [
          "142 150 120 182 202 205 231 258 214 162 148 122"
        ],
        "expected_output": "5"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "0ec0d3d7-bc4a-408a-a01b-1e0b2ad27f31",
    "title": "How Long?",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are babysitting your young nephew. You are finding it difficult to keep her amused. She doesn\u2019t like computer games, but does like doing sums. So you devise the following game for her.\n\n* I give you a number. Write it down.\n* Multiply this number by 3 and add 1. Write your number down unless it is more than 99. If the number is 100 or more, just write down the last two digits.\n* You keep going, using the last number you have written down, until you reach the number I gave you.\n* Then you tell me how long your list is.\n\nExample\n 17 -> 52 -> 57 -> 72 -> 17\n\nYou want to keep your nephew amused for a while, so you don\u2019t want a list that is too short or too long.\n\nWrite a program that calculates the length of the list of numbers produced, using the rules above, when supplied with an integer from 1 to 100 inclusive.\n\n\n**Constraints**\nThe input will be no more than 100.\n\nInput format: An integer.\n\nOutput format: An integer.",
    "starter_code": "# You are babysitting your young nephew. You are finding it difficult to keep her amused. She doesn\u2019t like computer games, but does like doing sums. So you devise the following game for her.\n# \n# * I give you a number. Write it down.\n# * Multiply this number by 3 and add 1. Write your number down unless it is more than 99. If the number is 100 or more, just write down the last two digits.\n# * You keep going, using the last number you have written down, until you reach the number I gave you.\n# * Then you tell me how long your list is.\n# \n# Example\n#  17 -> 52 -> 57 -> 72 -> 17\n# \n# You want to keep your nephew amused for a while, so you don\u2019t want a list that is too short or too long.\n# \n# Write a program that calculates the length of the list of numbers produced, using the rules above, when supplied with an integer from 1 to 100 inclusive.\n# ",
    "test_cases": [
      {
        "input": [
          "17"
        ],
        "expected_output": "5"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "1bda8af5-6381-458d-bd02-743e2ac7dbaa",
    "title": "How Many Inputs?",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nSome times when data is being collected, from users, it is not possible to know how many data points there will be. In these circumstances the user is asked to indicate when the last valid input was provided by entering a unique value.\n\nIn this task users enter a series of positive integers as valid input and indicate when the data has all been entered by entering -1 (an invalid input).\n\nWrite a program that takes an unknown number of integers, as input, and then outputs how many valid inputs there were on one line, and the sum of the valid integers on a second line.",
    "starter_code": "# Some times when data is being collected, from users, it is not possible to know how many data points there will be. In these circumstances the user is asked to indicate when the last valid input was provided by entering a unique value.\n# \n# In this task users enter a series of positive integers as valid input and indicate when the data has all been entered by entering -1 (an invalid input).\n# \n# Write a program that takes an unknown number of integers, as input, and then outputs how many valid inputs there were on one line, and the sum of the valid integers on a second line.\n# ",
    "test_cases": [
      {
        "input": [
          "5",
          "7",
          "4",
          "-1"
        ],
        "expected_output": "3\n16"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "815b3229-9bd8-4813-8eb0-d43802a37b0b",
    "title": "Fibonacci",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nIn a Fibonacci sequence of numbers, the first two numbers are given and the next number in the sequence is the sum of the preceding two numbers.\n\nThe original Fibonacci sequence starts with 0, 1 and the Lucas sequence starts with 2, 1. But the same rule \u201cthe next number in the sequence is the sum of the preceding two numbers\u201d can be used to generate sequences with any two starting numbers.\n\nExample Fibonacci Series\n0, 1, 1, 2, 3, 5, 8, ...\n2, 1, 3, 4, 7, 11, 18, ...\n7, 12, 19, 31, 50, 81, ...\n\nYou and your friend are fascinated with Fibonacci sequences. Your friend has made the extraordinary claim that any given positive starting pair of numbers will generate a sequence that contains, within the first 25 numbers, a number that is the reverse of the previous number. For instance 36, 81 \u2192 117, 198, 315, 513.\n\nYou are sceptical about this claim, and decide to write a program to test it out.\n\nWrite a program that tests out your friend's claim.\n\n\n**Constraints**\nAll input integers will be between 0 and 5000 inclusive.\n\nInput format: The first two integers of the sequence are provided on two rows of input data.\n\nOutput format: The first number that is the reverse of the preceeding number OR -1 if no such number is found in the first 25 numbers of the sequence.",
    "starter_code": "# In a Fibonacci sequence of numbers, the first two numbers are given and the next number in the sequence is the sum of the preceding two numbers.\n# \n# The original Fibonacci sequence starts with 0, 1 and the Lucas sequence starts with 2, 1. But the same rule \u201cthe next number in the sequence is the sum of the preceding two numbers\u201d can be used to generate sequences with any two starting numbers.\n# \n# Example Fibonacci Series\n# 0, 1, 1, 2, 3, 5, 8, ...\n# 2, 1, 3, 4, 7, 11, 18, ...\n# 7, 12, 19, 31, 50, 81, ...\n# \n# You and your friend are fascinated with Fibonacci sequences. Your friend has made the extraordinary claim that any given positive starting pair of numbers will generate a sequence that contains, within the first 25 numbers, a number that is the reverse of the previous number. For instance 36, 81 \u2192 117, 198, 315, 513.\n# \n# You are sceptical about this claim, and decide to write a program to test it out.\n# \n# Write a program that tests out your friend's claim.\n# ",
    "test_cases": [
      {
        "input": [
          "36",
          "81"
        ],
        "expected_output": "513"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "26510f2f-e651-4247-8026-c3b9f46f634b",
    "title": "Stop at Zero",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA program is required to output a simple horizontal graph. Data is sent to the program as a stream of integers. Each new integer is less than the previous one. The graphical output is only required for the positive data.\n\nThe formatting of the graph consists of a number of dashes on each horizontal line corresponding to the integer being represented on that line of the graph.\n\nWrite a program that takes, as input, an unspecified number of integer inputs and outputs a horizontal line graph of the data received that is greater than 0.\n\n\n**Constraints**\nAll integers in the input will be no more than 100.\nThe data supplied will always have at least one integer that is greater than 0.\nThe data supplied will always have at least one integer that is less than 1.\n\nInput format:\nAn unspecified number of rows with a single integer in each row.\n\nOutput format:\nA horizontal line graph.",
    "starter_code": "# A program is required to output a simple horizontal graph. Data is sent to the program as a stream of integers. Each new integer is less than the previous one. The graphical output is only required for the positive data.\n# \n# The formatting of the graph consists of a number of dashes on each horizontal line corresponding to the integer being represented on that line of the graph.\n# \n# Write a program that takes, as input, an unspecified number of integer inputs and outputs a horizontal line graph of the data received that is greater than 0.\n# ",
    "test_cases": [
      {
        "input": [
          "7",
          "5",
          "2",
          "1",
          "0",
          "-2",
          "-12"
        ],
        "expected_output": "-------\n-----\n--\n-"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "964d28f3-2a32-40f8-b330-0d58be12c51e",
    "title": "Saving Up",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nKaleisha, a student, works at a coffee shop and is trying to save her earnings to buy an e-bike. She spends \u00a320 a day on food and bus fares. She wants to find out if she will be able to buy the e-bike after 10 days of working. The bike Kaleisha wants to buy is \u00a31000. She looks back at her pay for the last 20 days working at the coffee shop.\n\nWrite a program that totals daily earnings and outputs how many days it will take to save \u00a31000. Your program must also remove the student's \u00a320 daily expenses.\n\n\n**Constraints**\nAll integers in the input will be less than or equal to 200.\nThe data provided will always be enough to save \u00a31000 by the 20th day.\n\nInput format:\nA single row of 20 integers separated by spaces.\n\nOutput format:\nAn integer.",
    "starter_code": "# Kaleisha, a student, works at a coffee shop and is trying to save her earnings to buy an e-bike. She spends \u00a320 a day on food and bus fares. She wants to find out if she will be able to buy the e-bike after 10 days of working. The bike Kaleisha wants to buy is \u00a31000. She looks back at her pay for the last 20 days working at the coffee shop.\n# \n# Write a program that totals daily earnings and outputs how many days it will take to save \u00a31000. Your program must also remove the student's \u00a320 daily expenses.\n# ",
    "test_cases": [
      {
        "input": [
          "80 150 200 90 110 150 150 77 59 200 100 190 205 190 115 150 160 97 102 100"
        ],
        "expected_output": "10"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "a0fe7568-8447-4106-a713-2817f7deec6e",
    "title": "Maximal Sum Path",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA binary tree is a data structure that is made of connected nodes. The tree is accessed through a root node. In the diagram below, the root node contains 3 and appears at the top of the tree. Each node, including the root, has 2 or fewer paths to the next node. They allow for quick navigation of data by binary choices.\n\nHere is an example of a simple binary tree:\n\nexample binary tree\n\nAs well as being quick to navigate the data for a binary tree can be compactly stored as a simple list or array. The example shown can be stored as:\n\n[3, -2, 5, 9, 'None', 2, 2, 'None', 'None', 'None', 'None', 1, 'None', 3, -3]\n\nNotice how the data is simply read from left to right starting at the root node and going down in horizontal bands until the end of the tree is reached.\n\nThe maximal sum path, starting from the root node and descending this tree, is 3 5 2 3 and the sum of the node values in the path is 13.\n\nWrite a program that takes, as input, a binary tree in the format shown below. Your program should then output the maximal sum path of the binary tree from the root node descending as far as is necessary.\n\n**Constraints**\n* The input provided will always be in the form shown below and the node values will always be integers.\n* The absence of a child node will be represented by the value \u201cNone\u201d.\n* There will only be one maximal sum route in each binary tree provided.\n* The maximal sum path will always include, as a minimum, the value of the root node.\n* The maximal sum path must always start at the root node and must only descend the tree.\n* The path can end at any node in the tree.\n\nInput format:\nA line of input consisting of a string of integers (and possibly None) separated by spaces.\n\nOutput format:\nThe first line of output will be a string of space separated integers representing the maximal sum route.\nThe second line will be an integer representing the sum of the maximal sum route.",
    "starter_code": "# A binary tree is a data structure that is made of connected nodes. The tree is accessed through a root node. In the diagram below, the root node contains 3 and appears at the top of the tree. Each node, including the root, has 2 or fewer paths to the next node. They allow for quick navigation of data by binary choices.\n# \n# Here is an example of a simple binary tree:\n# \n# example binary tree\n# \n# As well as being quick to navigate the data for a binary tree can be compactly stored as a simple list or array. The example shown can be stored as:\n# \n# [3, -2, 5, 9, 'None', 2, 2, 'None', 'None', 'None', 'None', 1, 'None', 3, -3]\n# \n# Notice how the data is simply read from left to right starting at the root node and going down in horizontal bands until the end of the tree is reached.\n# \n# The maximal sum path, starting from the root node and descending this tree, is 3 5 2 3 and the sum of the node values in the path is 13.\n# \n# Write a program that takes, as input, a binary tree in the format shown below. Your program should then output the maximal sum path of the binary tree from the root node descending as far as is necessary.",
    "test_cases": [
      {
        "input": [
          "3 -2 5 9 None 2 2 None None None None 1 None 3 -3"
        ],
        "expected_output": "3 5 2 3\n13"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "940c36dd-7ae7-46a3-9963-340a55f1d39d",
    "title": "Cost of Petrol",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nAlesis is worrying about the CO2 emissions produced by his petrol car.\n\nWrite a program that takes, as input, the litres of petrol he uses each month of a year and outputs the tonnes of CO2 produced.\n\n\n**Constraints**\nThe monthly figures are given in whole litres.\nMonthly litres supplied are between 0 and 200 (inclusive).\n1 litre of petrol produces 0.0024 tonnes of CO2 when burnt. (We are ignoring extraction, refining, etc.)\n\nInput format:\nA row of 12 integers separated by spaces.\n\nOutput format:\nAn integer representing the tonnes of CO2 produced, rounded down to the nearest tonne.\n\n\nCalculation using example input data:\nAnnual C02 = 0.0024 x total litres = 5.1264 = 5 tonnes",
    "starter_code": "# Alesis is worrying about the CO2 emissions produced by his petrol car.\n# \n# Write a program that takes, as input, the litres of petrol he uses each month of a year and outputs the tonnes of CO2 produced.\n# ",
    "test_cases": [
      {
        "input": [
          "142 150 120 182 202 205 231 258 214 162 148 122"
        ],
        "expected_output": "5"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "bc0d6b35-0b32-4163-9011-8b16dc78607c",
    "title": "Run Length Encoding",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nRun Length Encoding is a compression technique where runs or sequences of the same letter are stored as the letter plus the number of occurrences.\n\nExamples\n* aaaa is encoded to a4.\n* x is encoded to x1.\n* ppppqqqqqqqqstt is encoded to p4q8s1t2.\n\nWrite a program that encodes a string of letters using run length encoding.\n\n\n**Constraints**\nInput format: A string of letters.\n\nOutput format: A string of letters and numbers that encode the input.",
    "starter_code": "# Run Length Encoding is a compression technique where runs or sequences of the same letter are stored as the letter plus the number of occurrences.\n# \n# Examples\n# * aaaa is encoded to a4.\n# * x is encoded to x1.\n# * ppppqqqqqqqqstt is encoded to p4q8s1t2.\n# \n# Write a program that encodes a string of letters using run length encoding.\n# ",
    "test_cases": [
      {
        "input": [
          "aaaa"
        ],
        "expected_output": "a4"
      },
      {
        "input": [
          "x"
        ],
        "expected_output": "x1"
      },
      {
        "input": [
          "ppppqqqqqqqqstt"
        ],
        "expected_output": "p4q8s1t2"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "9c62b855-85a1-4f3f-b9fd-a9fc101c4252",
    "title": "Integer Division",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers as input, divides the larger integer by the smaller one, and outputs the result with the decimal part removed and the remainder from this process.\n\n**Constraints**\nThe two input integers will be positive and can be from 1 to 1,000,000.\n\nInput format: Two integers separated by a space.\n\nOutput format: Two integers separated by a space.",
    "starter_code": "# Write a program that takes two integers as input, divides the larger integer by the smaller one, and outputs the result with the decimal part removed and the remainder from this process.",
    "test_cases": [
      {
        "input": [
          "9 4"
        ],
        "expected_output": "2 1"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "2941eadf-a353-40ed-8fed-3186df1565ef",
    "title": "A Mountain Hike",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are going on a hiking trip in the mountains. Your friend has walked these routes before you and has charted the altitudes of the path at 100m intervals.\n\nWrite a program that takes as input a series of altitudes and outputs how much of the route is uphill.\n\n**Constraints**\n* Altitudes are recorded every 100m and variations within these measurements are ignored.\n* All altitudes will be greater than 0.\n* Paths start at the first altitude and end at the last altitude.\n\nInput format: The input will start with a single line with a single integer m that tells you how many measurements there are. The following m lines each contain a single integer indicating the measured altitude.\n\nOutput format: An integer that indicates how many metres of the path involve going up hill.",
    "starter_code": "# You are going on a hiking trip in the mountains. Your friend has walked these routes before you and has charted the altitudes of the path at 100m intervals.\n# \n# Write a program that takes as input a series of altitudes and outputs how much of the route is uphill.",
    "test_cases": [
      {
        "input": [
          "10",
          "100",
          "120",
          "115",
          "120",
          "125",
          "140",
          "130",
          "110",
          "130",
          "120"
        ],
        "expected_output": "500"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "982b711a-7d73-4ecd-af96-ad7c7eb37ba3",
    "title": "Marathon",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA marathon runner wants to ensure she stays hydrated after her runs. She wants to drink 30ml of water for every mile. For every completed 3 miles she wants to drink an additional 10ml of water.\n\nWrite a program that takes as input the number of miles run and outputs how much water she would need to drink.\n\n\n**Constraints**\nInput format: An integer from 0 to 100 representing the number of miles run.\n\nOutput format: An integer representing the amount of water, in ml, she should drink.",
    "starter_code": "# A marathon runner wants to ensure she stays hydrated after her runs. She wants to drink 30ml of water for every mile. For every completed 3 miles she wants to drink an additional 10ml of water.\n# \n# Write a program that takes as input the number of miles run and outputs how much water she would need to drink.\n# ",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "530"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "4b996b11-68e5-443c-b078-b907c4b133e0",
    "title": "Boxes in Boxes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nJem likes to hide the size of her gifts by putting a present inside several boxes.\n\nEach box is denoted by its dimensions: Length (L), Height (H), Width (W).\nGiven n boxes and their dimensions, how many boxes can be used to wrap a gift?\n\n\n**Constraints**\nAll dimensions are given as integers.\nBox A fits into box B, if and only if A\u2019s dimensions (L, W, H) are strictly smaller than B\u2019s. For example, box (1, 2, 3) can fit into box (4, 3, 2). However, box (1, 2, 3) cannot fit into box (2, 2, 4).\nBoxes can be rotated through 90 degrees in any direction so that their dimensions can be switched but they cannot be put into another box at an angle.\n\nInput format:\nFirst line consists of the number of boxes available, 1 <= n <= 100.\nEach of the subsequent n input lines consists of three positive integers between 1 and 100, representing the size of a particular box along the Length (L), Width (W) and Height (H) dimensions.\n\nOutput format:\nA positive integer: the maximum number of boxes that can be used.",
    "starter_code": "# Jem likes to hide the size of her gifts by putting a present inside several boxes.\n# \n# Each box is denoted by its dimensions: Length (L), Height (H), Width (W).\n# Given n boxes and their dimensions, how many boxes can be used to wrap a gift?\n# ",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2 1",
          "2 3 4",
          "5 4 3",
          "2 5 2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "f3691cde-c9c0-4adc-b7c7-4fcebedcb71b",
    "title": "Chocolates",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou and a friend are given an even number of packets of chocolates and decide to share them using the following rules:\n\nYou pick two of the packets.\nYour friend chooses which packet she wants, and you get the other one.\nRepeat this process until all packages have been distributed.\nNote that you are always the one who picks the two packets and your friend always chooses one of them!\n\nEach packet contains several chocolates but not always the same amount. You would like to get as many pieces of chocolate as you can. Unfortunately, your friend does too, and will always choose the packet with the most chocolates.\n\nWrite a program that takes as input a list of space separated integers, which represent the packets and how many chocolates they each contain, and outputs the maximum number of chocolates you will get if you choose the pairs wisely.\n\n**Constraints**\nThe provided input will always consist of an even number of integers.",
    "starter_code": "# You and a friend are given an even number of packets of chocolates and decide to share them using the following rules:\n# \n# You pick two of the packets.\n# Your friend chooses which packet she wants, and you get the other one.\n# Repeat this process until all packages have been distributed.\n# Note that you are always the one who picks the two packets and your friend always chooses one of them!\n# \n# Each packet contains several chocolates but not always the same amount. You would like to get as many pieces of chocolate as you can. Unfortunately, your friend does too, and will always choose the packet with the most chocolates.\n# \n# Write a program that takes as input a list of space separated integers, which represent the packets and how many chocolates they each contain, and outputs the maximum number of chocolates you will get if you choose the pairs wisely.",
    "test_cases": [
      {
        "input": [
          "8 4 7 9 2 5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "0cffabe6-7999-4306-b0e8-1212af8218e8",
    "title": "Crossnum Puzzle",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\n![](https://www.bebras.uk/question_files/3/5/d/crossnumexample.png)\n\n\nShown on the right, is an example of an uncompleted crossnum puzzle. This grid is constructed in an online puzzle game and clues are provided, just like in a crossword, but the answers are all numbers.\n\nThe blank crossword shown is created from a text file that stores not only the grid but all the answers:\n\nX2911X341X\n5X3X178XX1\n2X144X1300\n120X7XX6X7\nX6XX6X8064\n1634X1XX1X\n2X7XX1X801\n2871X802X2\n4XX641X0X0\nX341X7080X\n\nThere is no need for the question numbers to be stored as these can be calculated by the controlling program. This is because, just like in crosswords, a question number is needed for every square that starts a number of at least two digits, either horizontally or vertically.\n\nWrite a program that, given data similar to that provided above, outputs the largest question number that will be needed. In the example provided, this will be 25.\n\n\n**Constraints**\nAll answers in the crossnum puzzles must consist of 2 digits or more.\n\nInput format:\n* The first line of input provided will consist of two integers representing the width and height of a crossnum puzzle.\n* The rest of the lines of input will be strings, one line for each row of the crossnum puzzle.\n\nOutput format: An integer that represents the largest question number required for that particular crossnum puzzle.",
    "starter_code": "# ![](https://www.bebras.uk/question_files/3/5/d/crossnumexample.png)\n# \n# \n# Shown on the right, is an example of an uncompleted crossnum puzzle. This grid is constructed in an online puzzle game and clues are provided, just like in a crossword, but the answers are all numbers.\n# \n# The blank crossword shown is created from a text file that stores not only the grid but all the answers:\n# \n# X2911X341X\n# 5X3X178XX1\n# 2X144X1300\n# 120X7XX6X7\n# X6XX6X8064\n# 1634X1XX1X\n# 2X7XX1X801\n# 2871X802X2\n# 4XX641X0X0\n# X341X7080X\n# \n# There is no need for the question numbers to be stored as these can be calculated by the controlling program. This is because, just like in crosswords, a question number is needed for every square that starts a number of at least two digits, either horizontally or vertically.\n# \n# Write a program that, given data similar to that provided above, outputs the largest question number that will be needed. In the example provided, this will be 25.\n# ",
    "test_cases": [
      {
        "input": [
          "10 10",
          "X2911X341X",
          "5X3X178XX1",
          "2X144X1300",
          "120X7XX6X7",
          "X6XX6X8064",
          "1634X1XX1X",
          "2X7XX1X801",
          "2871X802X2",
          "4XX641X0X0",
          "X341X7080X"
        ],
        "expected_output": "25"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "a14d10d9-2fe9-42b0-a53b-89f5d58883a7",
    "title": "IPv4 Validation",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nAn IPv4 network address consists of four integers in the range 0 to 255 separated by a dot(.), for example 192.168.0.1. This notation is referred to as dotted decimal notation.\n\nWrite a program to check if the IPv4 network address is valid or not. If the address is valid, display a \"Valid IP address\" message. Otherwise, display an \"Invalid IP address\" message.\n\n**Constraints**\nInput format: IP4 Validation\nA string with between 2 and 100 characters.\n\nOutput format:\nA string.",
    "starter_code": "# An IPv4 network address consists of four integers in the range 0 to 255 separated by a dot(.), for example 192.168.0.1. This notation is referred to as dotted decimal notation.\n# \n# Write a program to check if the IPv4 network address is valid or not. If the address is valid, display a \"Valid IP address\" message. Otherwise, display an \"Invalid IP address\" message.",
    "test_cases": [
      {
        "input": [
          "192.168.0.256"
        ],
        "expected_output": "Invalid IP address"
      },
      {
        "input": [
          "10.24.251.129"
        ],
        "expected_output": "Valid IP address"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "cbc43d93-6cc8-47fc-9f74-fb02611aa2fc",
    "title": "Heat Pumps",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nSusan runs a company that supplies ground source heat pumps to people looking to replace their gas boilers. There are two ways of installing ground source heat pumps:\n\n* Horizontally: This needs a large garden as shallow trenches are dug and lengths of pipes that extract heat out of the ground are layed in the trenches.\n* Vertically: This can be done in a much smaller space as 100m holes are drilled vertically and 100m lengths of pipe are inserted to extract the heat from the ground. \n\nThe horizontal system is cheaper to install than the vertical system but requires that the garden area is at least 2.5 times as large as the floor area in the house. The vertical system needs a new 100m bore hole and pipe to be installed for every 100m2 of house floor space. (e.g. 100m2 floor space requires 1 vertical pipe and 101m2 requires 2 pipes.)\n\nWrite a program that inputs a house's floor area, and its garden area. The program should then output \"Horizontal\" if this system is viable or \"Vertical\" and the number of 100m bores that will need to be drilled for this particular house.\n\n**Constraints**\n* The house floor area will not exceed 300m2.\n* The garden area will not exceed 2000m2.\n\nInput format:\n* Row 1: A house floor area in m2 as an integer.\n* Row 2: The garden area in m2 as an integer.\n\nOutput format:\n* Row 1: Either the string \"Horizontal\" or \"Vertical\".\n* Row 2: If \"Vertical\" the number of vertical pipes required as an integer.",
    "starter_code": "# Susan runs a company that supplies ground source heat pumps to people looking to replace their gas boilers. There are two ways of installing ground source heat pumps:\n# \n# * Horizontally: This needs a large garden as shallow trenches are dug and lengths of pipes that extract heat out of the ground are layed in the trenches.\n# * Vertically: This can be done in a much smaller space as 100m holes are drilled vertically and 100m lengths of pipe are inserted to extract the heat from the ground. \n# \n# The horizontal system is cheaper to install than the vertical system but requires that the garden area is at least 2.5 times as large as the floor area in the house. The vertical system needs a new 100m bore hole and pipe to be installed for every 100m2 of house floor space. (e.g. 100m2 floor space requires 1 vertical pipe and 101m2 requires 2 pipes.)\n# \n# Write a program that inputs a house's floor area, and its garden area. The program should then output \"Horizontal\" if this system is viable or \"Vertical\" and the number of 100m bores that will need to be drilled for this particular house.",
    "test_cases": [
      {
        "input": [
          "150",
          "750"
        ],
        "expected_output": "Horizontal"
      },
      {
        "input": [
          "150",
          "300"
        ],
        "expected_output": "Vertical\n2"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "273f2ef8-b826-4e97-adcf-68a60d27b4d2",
    "title": "Error Codes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA software development team is trying to bug fix their app. To assist, the app runs a series of tests and provides a set of codes, one after each test. The codes are in the form of a 3 digit integer. Before printing the set of codes, the program outputs a set of digits that represent the potential error codes. If a code begins with one of the provided digits then that code is an error code, if not then that test was a success.\n\nWrite a program that counts the number of error codes.\n\n\n**Constraints**\n* n will always be greater than or equal to 0\n* m will always be greater than or equal to 0\n\nInput format\nn the number of error digits to look for in the error codes\nA line of n digits separated by a space (the error digits)\nm the number of error codes\nm lines of 3 digit error codes\n\nOutput format: An integer representing the number of error codes found.",
    "starter_code": "# A software development team is trying to bug fix their app. To assist, the app runs a series of tests and provides a set of codes, one after each test. The codes are in the form of a 3 digit integer. Before printing the set of codes, the program outputs a set of digits that represent the potential error codes. If a code begins with one of the provided digits then that code is an error code, if not then that test was a success.\n# \n# Write a program that counts the number of error codes.\n# ",
    "test_cases": [
      {
        "input": [
          "Input:",
          "3",
          "5 9 2",
          "6",
          "353",
          "225",
          "528",
          "800",
          "204",
          "955"
        ],
        "expected_output": "4"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "2f36c146-1104-48e9-80cd-a04ab72e7f23",
    "title": "Hailstones",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe hailstones sequence of numbers is generated by:\n\nStart with a number.\n\n* If the number is even, divide the number by 2 to generate the next number.\n* If the number is odd, multiply the number by 3 and add 1 to generate the next number.\n* Repeat until the number is 1.\n\nFor example: 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1.\n\nIt is believed that all hailstone sequences end with 1, no matter what the starting number is. You are interested in the proportion of odd and even numbers in a hailstone sequence.\n\nWrite a program that takes, as input, the starting value of a hailstone sequence. Your program should then determine how many even numbers and how many odd numbers it contains.\n\n**Constraints**\n* All inputs provided by the testing server will result in hailstone sequences that end in 1.\n* The starting number will not be less than 1 or greater than 200.\n\nInput format: An integer.\n\nOutput format:\n* Line 1: The number (integer) of even numbers in the sequence.\n* Line 2: The number (integer) of odd numbers in the sequence.",
    "starter_code": "# The hailstones sequence of numbers is generated by:\n# \n# Start with a number.\n# \n# * If the number is even, divide the number by 2 to generate the next number.\n# * If the number is odd, multiply the number by 3 and add 1 to generate the next number.\n# * Repeat until the number is 1.\n# \n# For example: 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1.\n# \n# It is believed that all hailstone sequences end with 1, no matter what the starting number is. You are interested in the proportion of odd and even numbers in a hailstone sequence.\n# \n# Write a program that takes, as input, the starting value of a hailstone sequence. Your program should then determine how many even numbers and how many odd numbers it contains.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "4\n2"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "694caf94-f9c4-4352-96fc-6a7b35ecc503",
    "title": "Square List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA student wants to be able to find all the square numbers from 2 to n, where n is a positive integer.\n\nWrite a program that outputs a list of all the square numbers from 2 to n.\n\n**Constraints**\n1 < n < 1000.",
    "starter_code": "# A student wants to be able to find all the square numbers from 2 to n, where n is a positive integer.\n# \n# Write a program that outputs a list of all the square numbers from 2 to n.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "4 9 16 25 36 49 64 81 100"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "faa81f6a-23d8-4cfb-8cda-c4e146a36792",
    "title": "Happy Ultrarunners",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nIn an Ultrarun season, each runner has to compete in five races. The runners are awarded points calculated by a number of factors such as how long it took to complete, their overall finishing position, how hilly the run was, etc..\n\nEvery runner aims to improve their performance throughout the season by getting more points than in their previous races in the same season. A runner is said to be a \"happy runner\" if they achieve this in every race throughout the season.\n\nWrite a program that outputs the number of \"happy runners\" at the end of the season from the data provided.\n\n**Constraints**\nThe fewest points a runner can be awarded in a race is 0 and the maximum is 100.\n\nInput format:\nOn the first line, an integer, n, representing the number of runners who completed all 5 ultraruns.\nOn each of the next n lines, a set of five integers representing the points scored in each race, in chronological order starting with the first race. Each line has this data for a single runner.\n\nOutput format:\nAn integer from 0 to n representing the number of \"happy runners\" at the end of the season.",
    "starter_code": "# In an Ultrarun season, each runner has to compete in five races. The runners are awarded points calculated by a number of factors such as how long it took to complete, their overall finishing position, how hilly the run was, etc..\n# \n# Every runner aims to improve their performance throughout the season by getting more points than in their previous races in the same season. A runner is said to be a \"happy runner\" if they achieve this in every race throughout the season.\n# \n# Write a program that outputs the number of \"happy runners\" at the end of the season from the data provided.",
    "test_cases": [
      {
        "input": [
          "4",
          "50 50 70 80 100",
          "65 50 70 85 85",
          "60 70 75 80 90",
          "70 70 65 70 75"
        ],
        "expected_output": "1"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "0ff622ac-f34e-4adb-9f59-3420f5dd1d9d",
    "title": "Guest Goes Free",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe Developers Social Club (DSC) holds a monthly meeting at a restaurant where a guest is always invited. The DSC consists of 10 members but they do not always attend the monthly meal. The guest is never asked to pay so the cost of the meal is shared by the DSC members attending like this:\n\n1. The total bill from all the diners is calculated.\n2. A tip of 5% is added (no rounding).\n3. The individual bill for the DSC members is calculated by dividing the total including the tip by the number of diners - 1. (The guest never pays.)\n4. The result of the calculation above is rounded down to the nearest whole pence.\n\nObviously the DSC would like a computer to do this. They have invited you to join the DSC as long as you will write them a program to sort out their monthly restaurant payments.\n\nWrite a program that takes, as input, the total number of diners and their individual bills and outputs how much each of the DSC members attending the meal should pay.\n\n\n**Constraints**\n* Maximum number of diners = 10 DSC members + 1 guest.\n* The individual bills never come to more than \u00a3100.\n\nInput format:\n* Row 1: The number of diners, n, including the guest as an integer.\n* n rows of data: Each row of data consists of a float to 2 decimal places. (The individual bills.)\n\nOutput format: The cost each DSC has to pay to cover the bill and tip in UK money format. (e.g. 5.60)",
    "starter_code": "# The Developers Social Club (DSC) holds a monthly meeting at a restaurant where a guest is always invited. The DSC consists of 10 members but they do not always attend the monthly meal. The guest is never asked to pay so the cost of the meal is shared by the DSC members attending like this:\n# \n# 1. The total bill from all the diners is calculated.\n# 2. A tip of 5% is added (no rounding).\n# 3. The individual bill for the DSC members is calculated by dividing the total including the tip by the number of diners - 1. (The guest never pays.)\n# 4. The result of the calculation above is rounded down to the nearest whole pence.\n# \n# Obviously the DSC would like a computer to do this. They have invited you to join the DSC as long as you will write them a program to sort out their monthly restaurant payments.\n# \n# Write a program that takes, as input, the total number of diners and their individual bills and outputs how much each of the DSC members attending the meal should pay.\n# ",
    "test_cases": [
      {
        "input": [
          "5",
          "5.60",
          "7.42",
          "3.16",
          "6.94",
          "9.20"
        ],
        "expected_output": "8.48"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "0c849496-161d-4da5-ad77-bf1ccf02b328",
    "title": "Too Short",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nChildren are only allowed on a fairground ride if they are at least 1.2m tall.\n\nWrite a program that counts how many children are allowed on the ride.\n\n\n**Constraints**\nAll children who are tall enough go on the ride.\n\nInput format:\nAn integer, n, on the first row indicates how many children were in the queue. This is followed by n rows of decimal numbers which represent the height of each child in the queue.\n\nOutput format:\nAn integer.",
    "starter_code": "# Children are only allowed on a fairground ride if they are at least 1.2m tall.\n# \n# Write a program that counts how many children are allowed on the ride.\n# ",
    "test_cases": [
      {
        "input": [
          "4",
          "1.41",
          "1.20",
          "1.19",
          "1.21"
        ],
        "expected_output": "3"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "776b26fd-05a2-45b1-bc22-ca8104e2b225",
    "title": "Shopping Discounts",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe Store has a sale on. There are several reductions available depending how much you spend:\n\n* Spend over \u00a350 and get 10% off.\n* Spend over \u00a3100 and get 15% off.\n* Spend over \u00a3200 and get 20% off.\n\nWrite a program that takes the total undiscounted price of your purchase as input, and outputs the price to be paid.\n\n**Constraints**\n* The undiscounted price will be from \u00a30 to \u00a32,000.\n* The output price will always be rounded down to the nearest, whole pound (\u00a3).\n\nInput format: An integer from 0 to 2000.\n\nOutput format: An integer.",
    "starter_code": "# The Store has a sale on. There are several reductions available depending how much you spend:\n# \n# * Spend over \u00a350 and get 10% off.\n# * Spend over \u00a3100 and get 15% off.\n# * Spend over \u00a3200 and get 20% off.\n# \n# Write a program that takes the total undiscounted price of your purchase as input, and outputs the price to be paid.",
    "test_cases": [
      {
        "input": [
          "210"
        ],
        "expected_output": "168"
      }
    ],
    "from": "OUCC"
  },
  {
    "id": "ALGO_001",
    "title": "Reverse Array In-Place",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function that takes an array of integers as input and reverses its elements in-place. Do not use any built-in reverse methods.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single line of space-separated integers representing the reversed array.",
    "starter_code": "# Write a function that reverses an array in-place.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "30 20 10"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_002",
    "title": "Find the Kth Smallest Element",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an array of integers and an integer `k` as input, and finds the k-th smallest element in the array. Assume `k` is always valid (1 <= k <= array size).\n\n**Constraints**\nInput format:\nFirst line: A single line of space-separated integers representing the array.\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the k-th smallest element.",
    "starter_code": "# Find the Kth smallest element in an array.",
    "test_cases": [
      {
        "input": [
          "3 2 1 5 6 4",
          "2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "7 10 4 3 20 15",
          "3"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_003",
    "title": "Check for Anagrams",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and determines if they are anagrams of each other (i.e., contain the same characters with the same frequencies, ignoring case and spaces).\n\n**Constraints**\nInput format:\nFirst line: The first string.\nSecond line: The second string.\nStrings consist of alphanumeric characters and spaces.\n\nOutput format:\n'True' if they are anagrams, 'False' otherwise.",
    "starter_code": "# Check if two strings are anagrams.",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "Debit Card",
          "Bad Credit"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_004",
    "title": "Longest Common Prefix",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.\n\n**Constraints**\nInput format:\nA single line with space-separated strings.\n\nOutput format:\nA single string representing the longest common prefix, or an empty string if none.",
    "starter_code": "# Find the longest common prefix.",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      },
      {
        "input": [
          "dog racecar car"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "apple apricot april"
        ],
        "expected_output": "ap"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_005",
    "title": "Implement Binary Search",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function that implements binary search to find the index of a target value in a sorted array of integers. Return the index if the target is found, otherwise return -1.\n\n**Constraints**\nInput format:\nFirst line: A single line of space-separated sorted integers representing the array.\nSecond line: An integer representing the target value.\n\nOutput format:\nA single integer, the index of the target or -1.",
    "starter_code": "# Implement binary search.",
    "test_cases": [
      {
        "input": [
          "2 5 8 12 16 23 38 56 72 91",
          "23"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "-5 0 3 9 12",
          "0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 3 5 7 9",
          "4"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_006",
    "title": "Merge Two Sorted Arrays",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two sorted arrays of integers, merge them into a single sorted array. The merged array should not contain duplicates.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for the first sorted array.\nSecond line: Space-separated integers for the second sorted array.\n\nOutput format:\nA single line of space-separated integers representing the merged and sorted array without duplicates.",
    "starter_code": "# Merge two sorted arrays.",
    "test_cases": [
      {
        "input": [
          "1 3 5",
          "2 4 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      },
      {
        "input": [
          "1 2 3",
          "2 3 4"
        ],
        "expected_output": "1 2 3 4"
      },
      {
        "input": [
          "",
          "1 2 3"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_007",
    "title": "Move Zeros to End",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers, move all 0's to the end of it while maintaining the relative order of the non-zero elements. Perform this in-place without making a copy of the array.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single line of space-separated integers representing the modified array.",
    "starter_code": "# Move zeros to the end of an array.",
    "test_cases": [
      {
        "input": [
          "0 1 0 3 12"
        ],
        "expected_output": "1 3 12 0 0"
      },
      {
        "input": [
          "0 0 1"
        ],
        "expected_output": "1 0 0"
      },
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_008",
    "title": "Rotate Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array, rotate the array to the right by `k` steps, where `k` is non-negative.\n\n**Constraints**\nInput format:\nFirst line: A single line of space-separated integers representing the array.\nSecond line: An integer `k` (number of steps to rotate).\n\nOutput format:\nA single line of space-separated integers representing the rotated array.",
    "starter_code": "# Rotate an array.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6 7",
          "3"
        ],
        "expected_output": "5 6 7 1 2 3 4"
      },
      {
        "input": [
          "-1 -100 3 99",
          "2"
        ],
        "expected_output": "3 99 -1 -100"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_009",
    "title": "Find Missing Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer, the missing number.",
    "starter_code": "# Find the missing number.",
    "test_cases": [
      {
        "input": [
          "3 0 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "9 6 4 2 3 5 7 0 1"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "0 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_010",
    "title": "Maximum Subarray Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer, the maximum subarray sum.",
    "starter_code": "# Find the maximum subarray sum.",
    "test_cases": [
      {
        "input": [
          "-2 1 -3 4 -1 2 1 -5 4"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5 4 -1 7 8"
        ],
        "expected_output": "23"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_011",
    "title": "Implement Queue using Stacks",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a first-in-first-out (FIFO) queue using two stacks. The queue should support `push`, `pop`, `peek`, and `empty` operations.\n\n**Constraints**\nInput format:\nMultiple lines, each representing an operation. Example: `push 1`, `push 2`, `peek`, `pop`, `empty`.\n\nOutput format:\nOutputs for `peek`, `pop`, `empty` operations on separate lines. 'True' or 'False' for empty.",
    "starter_code": "# Implement a Queue using two Stacks.",
    "test_cases": [
      {
        "input": [
          "push 1",
          "push 2",
          "peek",
          "pop",
          "empty"
        ],
        "expected_output": "1\n1\nFalse"
      },
      {
        "input": [
          "push 5",
          "pop",
          "empty"
        ],
        "expected_output": "5\nTrue"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_012",
    "title": "Detect Cycle in Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, return `true` if there is a cycle in the linked list. Otherwise, return `false`.\n\n**Constraints**\nInput format:\nA series of integers representing node values, followed by a special character (e.g., `-1`) to indicate the end of the list. If a cycle exists, the input should specify the node where the tail connects. (For simplicity, input can be a representation of nodes and pointers).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Detect cycle in a linked list.",
    "test_cases": [
      {
        "input": [
          "3 2 0 -4 1 (cycle at 1)"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 (no cycle)"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_013",
    "title": "Valid Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\n'True' if the input string is valid, 'False' otherwise.",
    "starter_code": "# Check for valid parentheses.",
    "test_cases": [
      {
        "input": [
          "()[]{}"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "([{}])"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "(]"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "{[]}"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_014",
    "title": "Climbing Stairs",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n**Constraints**\nInput format:\nAn integer `n` (1 <= n <= 45).\n\nOutput format:\nA single integer, the number of distinct ways.",
    "starter_code": "# Calculate ways to climb stairs.",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_015",
    "title": "Find First and Last Position of Element in Sorted Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If the target is not found in the array, return `[-1, -1]`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for the sorted array.\nSecond line: An integer `target`.\n\nOutput format:\nA single line of space-separated integers representing the `[start, end]` indices.",
    "starter_code": "# Find first and last position of element.",
    "test_cases": [
      {
        "input": [
          "5 7 7 8 8 10",
          "8"
        ],
        "expected_output": "3 4"
      },
      {
        "input": [
          "5 7 7 8 8 10",
          "6"
        ],
        "expected_output": "-1 -1"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_016",
    "title": "Intersection of Two Arrays",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique, and you may return the result in any order.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums1`.\nSecond line: Space-separated integers for `nums2`.\n\nOutput format:\nA single line of space-separated integers representing the intersection.",
    "starter_code": "# Find intersection of two arrays.",
    "test_cases": [
      {
        "input": [
          "1 2 2 1",
          "2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4 9 5",
          "9 4 9 8 4"
        ],
        "expected_output": "9 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_017",
    "title": "Reverse Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, reverse the list, and return the reversed list.\n\n**Constraints**\nInput format:\nA series of integers representing node values, ending with a special character (e.g., `-1`).\n\nOutput format:\nA series of integers representing the reversed linked list.",
    "starter_code": "# Reverse a linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "1 2 -1"
        ],
        "expected_output": "2 1"
      },
      {
        "input": [
          " -1"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_018",
    "title": "Valid Palindrome II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return `true` if the `s` can be palindrome after deleting at most one character from it.\n\n**Constraints**\nInput format:\nA single string `s` consisting of lowercase English letters.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check for valid palindrome with one deletion.",
    "test_cases": [
      {
        "input": [
          "aba"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abca"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abc"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_019",
    "title": "Remove Duplicates from Sorted Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted array of integers `nums` in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements.\n\n**Constraints**\nInput format:\nA single line of space-separated sorted integers.\n\nOutput format:\nFirst line: The number of unique elements.\nSecond line: The modified array with unique elements (space-separated).",
    "starter_code": "# Remove duplicates from sorted array.",
    "test_cases": [
      {
        "input": [
          "1 1 2"
        ],
        "expected_output": "2\n1 2"
      },
      {
        "input": [
          "0 0 1 1 1 2 2 3 3 4"
        ],
        "expected_output": "5\n0 1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_020",
    "title": "Fibonacci Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function `fib(n)` that calculates the `n`th Fibonacci number. The Fibonacci sequence is defined by the recurrence relation: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n**Constraints**\nInput format:\nAn integer `n` (0 <= n <= 30).\n\nOutput format:\nA single integer, the `n`th Fibonacci number.",
    "starter_code": "# Calculate the Nth Fibonacci number.",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_021",
    "title": "Palindrome Checker",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and determines if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, e.g., 'madam' or 'racecar'. Ignore spaces and case when checking for a palindrome.\n\n**Constraints**\nInput format:\nA single line string.\n\nOutput format:\n'True' if the string is a palindrome, 'False' otherwise.",
    "starter_code": "# Check if a string is a palindrome (ignoring spaces and case).",
    "test_cases": [
      {
        "input": [
          "Racecar"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "hello world"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_022",
    "title": "Anagram Checker",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and determines if they are anagrams of each other. Anagrams are words or phrases formed by rearranging the letters of another, such as 'listen' and 'silent'. Ignore case and spaces.\n\n**Constraints**\nInput format:\nTwo lines, each containing a single string.\n\nOutput format:\n'True' if the strings are anagrams, 'False' otherwise.",
    "starter_code": "# Check if two strings are anagrams (ignoring spaces and case).",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "hello",
          "world"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_023",
    "title": "Prime Number Check",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and determines if it is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n**Constraints**\nInput format:\nA single integer `n` (1 <= n <= 1000).\n\nOutput format:\n'True' if the number is prime, 'False' otherwise.",
    "starter_code": "# Check if a number is prime.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_024",
    "title": "Factorial Calculation",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the factorial of a given non-negative integer. The factorial of a non-negative integer `n`, denoted by `n!`, is the product of all positive integers less than or equal to `n`. For example, `5! = 5 * 4 * 3 * 2 * 1 = 120`.\n\n**Constraints**\nInput format:\nA single non-negative integer `n` (0 <= n <= 12).\n\nOutput format:\nA single integer representing the factorial of `n`.",
    "starter_code": "# Calculate the factorial of a number.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_025",
    "title": "Greatest Common Divisor (GCD)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the Greatest Common Divisor (GCD) of two non-negative integers. The GCD is the largest positive integer that divides both numbers without leaving a remainder.\n\n**Constraints**\nInput format:\nTwo non-negative integers `a` and `b` separated by a space (0 <= a, b <= 1000).\n\nOutput format:\nA single integer representing the GCD.",
    "starter_code": "# Calculate the Greatest Common Divisor (GCD) of two numbers.",
    "test_cases": [
      {
        "input": [
          "48 18"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "101 103"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_026",
    "title": "Least Common Multiple (LCM)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates the Least Common Multiple (LCM) of two positive integers. The LCM is the smallest positive integer that is divisible by both numbers.\n\n**Constraints**\nInput format:\nTwo positive integers `a` and `b` separated by a space (1 <= a, b <= 500).\n\nOutput format:\nA single integer representing the LCM.",
    "starter_code": "# Calculate the Least Common Multiple (LCM) of two numbers.",
    "test_cases": [
      {
        "input": [
          "4 6"
        ],
        "expected_output": "12"
      },
      {
        "input": [
          "7 5"
        ],
        "expected_output": "35"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_027",
    "title": "Reverse a String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and returns the string in reverse order without using any built-in string reversal functions.\n\n**Constraints**\nInput format:\nA single line string.\n\nOutput format:\nThe reversed string.",
    "starter_code": "# Reverse a string without using built-in functions.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "olleh"
      },
      {
        "input": [
          "world"
        ],
        "expected_output": "dlrow"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_028",
    "title": "Count Vowels and Consonants",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and counts the number of vowels (a, e, i, o, u, case-insensitive) and consonants. Spaces and other characters should be ignored.\n\n**Constraints**\nInput format:\nA single line string.\n\nOutput format:\nTwo integers, first the count of vowels, then the count of consonants, separated by a space.",
    "starter_code": "# Count vowels and consonants in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "3 7"
      },
      {
        "input": [
          "Python"
        ],
        "expected_output": "1 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_029",
    "title": "FizzBuzz",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that prints numbers from 1 to `n`. For multiples of three, print 'Fizz' instead of the number. For multiples of five, print 'Buzz'. For numbers which are multiples of both three and five, print 'FizzBuzz'. Otherwise, print the number.\n\n**Constraints**\nInput format:\nA single integer `n` (1 <= n <= 100).\n\nOutput format:\nEach result on a new line.",
    "starter_code": "# Implement the FizzBuzz game logic.",
    "test_cases": [
      {
        "input": [
          "15"
        ],
        "expected_output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_030",
    "title": "Array Sum and Average",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and calculates their sum and average.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nTwo lines: first the sum, then the average (as a floating-point number with one decimal place).",
    "starter_code": "# Calculate the sum and average of elements in an array.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "15\n3.0"
      },
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "60\n20.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_031",
    "title": "Find Max/Min in Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and finds the maximum and minimum values within the list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nTwo integers, first the maximum, then the minimum, separated by a space.",
    "starter_code": "# Find the maximum and minimum elements in an array.",
    "test_cases": [
      {
        "input": [
          "5 1 9 2 7"
        ],
        "expected_output": "9 1"
      },
      {
        "input": [
          "100 20 50 10"
        ],
        "expected_output": "100 10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_032",
    "title": "Remove Duplicates from Unsorted Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an unsorted list of integers as input and returns a new list with all duplicate elements removed. The order of the remaining unique elements does not matter.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single line of space-separated unique integers.",
    "starter_code": "# Remove duplicate elements from an unsorted array.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 1 4 5 3"
        ],
        "expected_output": "1 2 3 4 5"
      },
      {
        "input": [
          "7 7 7 7"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_033",
    "title": "Binary Search",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that implements binary search on a sorted list of integers to find the index of a target value. If the target value is not found, return -1.\n\n**Constraints**\nInput format:\nFirst line: A single line of space-separated sorted integers (ascending order).\nSecond line: A single integer representing the target value.\n\nOutput format:\nA single integer representing the index of the target value, or -1 if not found.",
    "starter_code": "# Implement binary search on a sorted array.",
    "test_cases": [
      {
        "input": [
          "1 5 8 12 13",
          "8"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "10 20 30 40 50",
          "25"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_034",
    "title": "Bubble Sort",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that implements the Bubble Sort algorithm to sort a list of integers in ascending order. Bubble Sort repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single line of space-separated integers sorted in ascending order.",
    "starter_code": "# Implement bubble sort for an array.",
    "test_cases": [
      {
        "input": [
          "5 1 4 2 8"
        ],
        "expected_output": "1 2 4 5 8"
      },
      {
        "input": [
          "3 2 1"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_035",
    "title": "Selection Sort",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that implements the Selection Sort algorithm to sort a list of integers in ascending order. Selection Sort repeatedly finds the minimum element from the unsorted part and puts it at the beginning.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single line of space-separated integers sorted in ascending order.",
    "starter_code": "# Implement selection sort for an array.",
    "test_cases": [
      {
        "input": [
          "64 25 12 22 11"
        ],
        "expected_output": "11 12 22 25 64"
      },
      {
        "input": [
          "9 8 7"
        ],
        "expected_output": "7 8 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_036",
    "title": "Insertion Sort",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that implements the Insertion Sort algorithm to sort a list of integers in ascending order. Insertion Sort builds the final sorted array (or list) one item at a time. It iterates through the input elements and builds a sorted list by inserting each element into its correct position in the sorted list.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single line of space-separated integers sorted in ascending order.",
    "starter_code": "# Implement insertion sort for an array.",
    "test_cases": [
      {
        "input": [
          "12 11 13 5 6"
        ],
        "expected_output": "5 6 11 12 13"
      },
      {
        "input": [
          "4 3 2 1"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_037",
    "title": "Merge Two Sorted Arrays",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two already sorted lists of integers as input and merges them into a single sorted list. You should not use any built-in sorting functions on the combined list.\n\n**Constraints**\nInput format:\nFirst line: A single line of space-separated sorted integers for the first array.\nSecond line: A single line of space-separated sorted integers for the second array.\n\nOutput format:\nA single line of space-separated integers representing the merged sorted array.",
    "starter_code": "# Merge two sorted arrays into a single sorted array.",
    "test_cases": [
      {
        "input": [
          "1 3 5",
          "2 4 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      },
      {
        "input": [
          "10 20",
          "5 15 25"
        ],
        "expected_output": "5 10 15 20 25"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_038",
    "title": "Matrix Addition",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two matrices (2D arrays of integers) of the same dimensions as input and calculates their sum. The sum of two matrices is a matrix of the same dimensions where each element is the sum of the corresponding elements in the input matrices.\n\n**Constraints**\nInput format:\nFirst line: Two integers `rows` and `cols` separated by a space, representing the dimensions of the matrices.\nNext `rows` lines: Elements of the first matrix, each row as space-separated integers.\nNext `rows` lines: Elements of the second matrix, each row as space-separated integers.\n\nOutput format:\nThe resulting sum matrix, with each row on a new line and elements space-separated.",
    "starter_code": "# Add two matrices.",
    "test_cases": [
      {
        "input": [
          "2 2",
          "1 2",
          "3 4",
          "5 6",
          "7 8"
        ],
        "expected_output": "6 8\n10 12"
      },
      {
        "input": [
          "2 3",
          "1 1 1",
          "2 2 2",
          "3 3 3",
          "4 4 4"
        ],
        "expected_output": "4 4 4\n6 6 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_039",
    "title": "Rotate Matrix 90 Degrees Clockwise",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a square matrix (2D array of integers) as input and rotates it 90 degrees clockwise. The rotation should be performed in-place if possible, but returning a new matrix is also acceptable.\n\n**Constraints**\nInput format:\nFirst line: A single integer `n` representing the dimension of the square matrix (n x n).\nNext `n` lines: Elements of the matrix, each row as space-separated integers.\n\nOutput format:\nThe rotated matrix, with each row on a new line and elements space-separated.",
    "starter_code": "# Rotate a square matrix by 90 degrees clockwise.",
    "test_cases": [
      {
        "input": [
          "3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "7 4 1\n8 5 2\n9 6 3"
      },
      {
        "input": [
          "2",
          "1 2",
          "3 4"
        ],
        "expected_output": "3 1\n4 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_040",
    "title": "Roman to Integer",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that converts a Roman numeral string to an integer. The Roman numerals are I (1), V (5), X (10), L (50), C (100), D (500), and M (1000). Subtraction rule applies (e.g., IV = 4, IX = 9).\n\n**Constraints**\nInput format:\nA single string representing a valid Roman numeral (e.g., 'III', 'LVIII', 'MCMXCIV').\n\nOutput format:\nA single integer representing the converted value.",
    "starter_code": "# Convert a Roman numeral string to an integer.",
    "test_cases": [
      {
        "input": [
          "III"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "LVIII"
        ],
        "expected_output": "58"
      },
      {
        "input": [
          "MCMXCIV"
        ],
        "expected_output": "1994"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_041",
    "title": "Two Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. Return the indices in ascending order.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the array `nums`.\nSecond line: A single integer `target`.\n\nOutput format:\nTwo space-separated integers, the indices of the two numbers.",
    "starter_code": "# Find two numbers in an array that sum up to a target.",
    "test_cases": [
      {
        "input": [
          "2 7 11 15",
          "9"
        ],
        "expected_output": "0 1"
      },
      {
        "input": [
          "3 2 4",
          "6"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_042",
    "title": "Container With Most Water",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`. Find two such lines that, together with the x-axis, form a container that contains the most water. Return the maximum amount of water a container can store.\n\n**Constraints**\nInput format:\nA single line of space-separated non-negative integers representing heights.\n\nOutput format:\nA single integer, the maximum amount of water.",
    "starter_code": "# Find the container with the most water.",
    "test_cases": [
      {
        "input": [
          "1 8 6 2 5 4 8 3 7"
        ],
        "expected_output": "49"
      },
      {
        "input": [
          "1 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_043",
    "title": "Integer to Roman",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer, convert it to a Roman numeral. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, four is written as IV. Because the one is before the five we subtract it, making four. The same principle applies to nine, which is written as IX. There are six instances where subtraction is used: IV, IX, XL, XC, CD, CM.\n\n**Constraints**\nInput format:\nA single integer `num` (1 <= num <= 3999).\n\nOutput format:\nA string representing the Roman numeral.",
    "starter_code": "# Convert an integer to a Roman numeral.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "III"
      },
      {
        "input": [
          "58"
        ],
        "expected_output": "LVIII"
      },
      {
        "input": [
          "1994"
        ],
        "expected_output": "MCMXCIV"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_044",
    "title": "Longest Palindromic Substring",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the longest palindromic substring in `s`. If there are multiple, return any valid one.\n\n**Constraints**\nInput format:\nA single string `s` (1 <= length(s) <= 1000).\n\nOutput format:\nA single string, the longest palindromic substring.",
    "starter_code": "# Find the longest palindromic substring.",
    "test_cases": [
      {
        "input": [
          "babad"
        ],
        "expected_output": "bab"
      },
      {
        "input": [
          "cbbd"
        ],
        "expected_output": "bb"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_045",
    "title": "Zigzag Conversion",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe string `s` is written in a zigzag pattern on a given number of rows `numRows`. For example, `s = \"PAYPALISHIRING\", numRows = 3` is written as:\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\". Write the code that will take a string and make this conversion given a number of rows.\n\n**Constraints**\nInput format:\nFirst line: The string `s`.\nSecond line: An integer `numRows` (1 <= numRows <= 1000).\n\nOutput format:\nThe converted string.",
    "starter_code": "# Convert a string to a zigzag pattern.",
    "test_cases": [
      {
        "input": [
          "PAYPALISHIRING",
          "3"
        ],
        "expected_output": "PAHNAPLSIIGYIR"
      },
      {
        "input": [
          "PAYPALISHIRING",
          "4"
        ],
        "expected_output": "PINALSIGYAHRPI"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_046",
    "title": "String to Integer (atoi)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function). The algorithm for `myAtoi(string s)` is as follows:\n1. Read in and ignore any leading whitespace.\n2. Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume positive if neither is present.\n3. Read in next the characters until the first non-digit character or the end of the input is reached. The rest of the string is ignored.\n4. Convert these digits into an integer (i.e., \"123\" -> 123, \"0032\" -> 32). If no digits were read, the integer is 0.\n5. If the integer is out of the 32-bit signed integer range `[-2^31, 2^31 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-2^31` should be clamped to `-2^31`, and integers greater than `2^31 - 1` should be clamped to `2^31 - 1`.\n6. Return the integer as the final result.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the converted value.",
    "starter_code": "# Implement string to integer (atoi) function.",
    "test_cases": [
      {
        "input": [
          "42"
        ],
        "expected_output": "42"
      },
      {
        "input": [
          "   -42"
        ],
        "expected_output": "-42"
      },
      {
        "input": [
          "4193 with words"
        ],
        "expected_output": "4193"
      },
      {
        "input": [
          "words and 987"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "-91283472332"
        ],
        "expected_output": "-2147483648"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_047",
    "title": "Implement strStr()",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement `strStr()`. Given two strings `haystack` and `needle`, return the index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack`.\n\n**Constraints**\nInput format:\nFirst line: The string `haystack`.\nSecond line: The string `needle`.\n\nOutput format:\nA single integer, the index of the first occurrence, or -1.",
    "starter_code": "# Implement strStr() for substring search.",
    "test_cases": [
      {
        "input": [
          "hello",
          "ll"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "aaaaa",
          "bba"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "",
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_048",
    "title": "Divide Two Integers",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and modulo operators. The integer division should truncate toward zero.\n\n**Constraints**\nInput format:\nFirst line: An integer `dividend`.\nSecond line: An integer `divisor`.\nAssume `divisor` is not zero.\n\nOutput format:\nA single integer, the result of the division. Handle overflow for 32-bit signed integers.",
    "starter_code": "# Divide two integers without multiplication, division, or modulo.",
    "test_cases": [
      {
        "input": [
          "10",
          "3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "7",
          "-3"
        ],
        "expected_output": "-2"
      },
      {
        "input": [
          "2147483647",
          "1"
        ],
        "expected_output": "2147483647"
      },
      {
        "input": [
          "-2147483648",
          "-1"
        ],
        "expected_output": "2147483647"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_049",
    "title": "Longest Valid Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\n**Constraints**\nInput format:\nA single string `s` consisting of only '(' and ')'.\n\nOutput format:\nA single integer, the length of the longest valid parentheses substring.",
    "starter_code": "# Find the length of the longest valid parentheses substring.",
    "test_cases": [
      {
        "input": [
          "(()"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          ")()())"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_050",
    "title": "Search in Rotated Sorted Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is an integer array `nums` sorted in ascending order (with distinct values). Prior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k` (0 <= k < nums.length) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]`. Given the array `nums` after the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or -1 if it is not in `nums`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for the rotated array `nums`.\nSecond line: An integer `target`.\n\nOutput format:\nA single integer, the index of the target or -1.",
    "starter_code": "# Search for a target in a rotated sorted array.",
    "test_cases": [
      {
        "input": [
          "4 5 6 7 0 1 2",
          "0"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "4 5 6 7 0 1 2",
          "3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_051",
    "title": "Combination Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `candidates`.\nSecond line: An integer `target`.\n\nOutput format:\nEach combination on a new line, with numbers space-separated.",
    "starter_code": "# Find unique combinations that sum to a target.",
    "test_cases": [
      {
        "input": [
          "2 3 6 7",
          "7"
        ],
        "expected_output": "7\n2 2 3"
      },
      {
        "input": [
          "2 3 5",
          "8"
        ],
        "expected_output": "2 2 2 2\n2 3 3\n3 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_052",
    "title": "Permutations",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers for `nums` (1 <= nums.length <= 6).\n\nOutput format:\nEach permutation on a new line, with numbers space-separated.",
    "starter_code": "# Generate all permutations of an array.",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1"
      },
      {
        "input": [
          "0 1"
        ],
        "expected_output": "0 1\n1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_053",
    "title": "Rotate List (Linked List)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a linked list, rotate the list to the right by `k` places.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the linked list nodes (ending with -1 for null).\nSecond line: An integer `k` (0 <= k <= 2 * 10^9).\n\nOutput format:\nA single line of space-separated integers representing the rotated linked list.",
    "starter_code": "# Rotate a linked list to the right by k places.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1",
          "2"
        ],
        "expected_output": "4 5 1 2 3"
      },
      {
        "input": [
          "0 1 2 -1",
          "4"
        ],
        "expected_output": "2 0 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_054",
    "title": "Jump Game",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums`. You are initially positioned at the array's first index, and each element in `nums` represents your maximum jump length at that position. Return `true` if you can reach the last index, or `false` otherwise.\n\n**Constraints**\nInput format:\nA single line of space-separated non-negative integers representing the array `nums`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if you can reach the last index in a jump game.",
    "test_cases": [
      {
        "input": [
          "2 3 1 1 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 2 1 0 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_055",
    "title": "Merge Intervals",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of `intervals` where `intervals[i] = [start_i, end_i]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\n**Constraints**\nInput format:\nEach line represents an interval `start end`. Input ends with a blank line.\n\nOutput format:\nEach merged interval on a new line, `start end` space-separated.",
    "starter_code": "# Merge overlapping intervals.",
    "test_cases": [
      {
        "input": [
          "1 3",
          "2 6",
          "8 10",
          "15 18",
          ""
        ],
        "expected_output": "1 6\n8 10\n15 18"
      },
      {
        "input": [
          "1 4",
          "4 5",
          ""
        ],
        "expected_output": "1 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_056",
    "title": "Insert Interval",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of non-overlapping intervals `intervals` where `intervals[i] = [start_i, end_i]` are sorted by `start_i`. You are also given an interval `newInterval = [start, end]`. Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `start_i` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\n**Constraints**\nInput format:\nFirst, existing intervals, each line `start end`, ending with a blank line.\nThen, the `newInterval` as `start end` on a single line.\n\nOutput format:\nEach resulting interval on a new line, `start end` space-separated.",
    "starter_code": "# Insert a new interval into a sorted list of intervals and merge.",
    "test_cases": [
      {
        "input": [
          "1 3",
          "6 9",
          "",
          "2 5"
        ],
        "expected_output": "1 5\n6 9"
      },
      {
        "input": [
          "1 2",
          "3 5",
          "6 7",
          "8 10",
          "12 16",
          "",
          "4 8"
        ],
        "expected_output": "1 2\n3 10\n12 16"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_057",
    "title": "Minimum Path Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a `m x n` grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` separated by a space.\nNext `m` lines: Each line represents a row of the grid with `n` space-separated non-negative integers.\n\nOutput format:\nA single integer, the minimum path sum.",
    "starter_code": "# Find the minimum path sum in a grid.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 3 1",
          "1 5 1",
          "4 2 1"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "2 2",
          "1 2",
          "1 1"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_058",
    "title": "Unique Paths",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is a robot on an `m x n` grid. The robot is initially located at the top-left corner `(0, 0)`. The robot tries to move to the bottom-right corner `(m-1, n-1)`. The robot can only move either down or right at any point in time. Given the two integers `m` and `n`, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\n**Constraints**\nInput format:\nTwo integers `m` and `n` separated by a space (1 <= m, n <= 100).\n\nOutput format:\nA single integer, the number of unique paths.",
    "starter_code": "# Calculate the number of unique paths in a grid.",
    "test_cases": [
      {
        "input": [
          "3 7"
        ],
        "expected_output": "28"
      },
      {
        "input": [
          "3 2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_059",
    "title": "Set Matrix Zeroes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` integer matrix, if an element is 0, set its entire row and column to 0's. You must do this in-place.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` separated by a space.\nNext `m` lines: Each line represents a row of the matrix with `n` space-separated integers.\n\nOutput format:\nThe modified matrix, with each row on a new line and elements space-separated.",
    "starter_code": "# Set entire row and column to zeroes if an element is 0.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 1 1",
          "1 0 1",
          "1 1 1"
        ],
        "expected_output": "1 0 1\n0 0 0\n1 0 1"
      },
      {
        "input": [
          "3 4",
          "0 1 2 0",
          "3 4 5 2",
          "1 3 1 5"
        ],
        "expected_output": "0 0 0 0\n0 4 5 0\n0 3 1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_060",
    "title": "Sort Colors (Dutch National Flag)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. Use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (0, 1, or 2).\n\nOutput format:\nA single line of space-separated integers representing the sorted array.",
    "starter_code": "# Sort colors (0s, 1s, 2s) in-place.",
    "test_cases": [
      {
        "input": [
          "2 0 2 1 1 0"
        ],
        "expected_output": "0 0 1 1 2 2"
      },
      {
        "input": [
          "2 0 1"
        ],
        "expected_output": "0 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_061",
    "title": "Subsets",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.\n\n**Constraints**\nInput format:\nA single line of space-separated distinct integers for `nums` (1 <= nums.length <= 10).\n\nOutput format:\nEach subset on a new line. Elements within a subset should be space-separated.",
    "starter_code": "# Generate all subsets of an array.",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "\n1\n2\n3\n1 2\n1 3\n2 3\n1 2 3"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "\n0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_062",
    "title": "Word Search",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the grid as a string of characters (no spaces).\nLast line: The `word` to search for.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Search for a word in a grid of characters.",
    "test_cases": [
      {
        "input": [
          "3 4",
          "ABCE",
          "SFCS",
          "ADEE",
          "ABCCED"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 4",
          "ABCE",
          "SFCS",
          "ADEE",
          "SEE"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 4",
          "ABCE",
          "SFCS",
          "ADEE",
          "ABCB"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_063",
    "title": "Longest Consecutive Sequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in O(n) time.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer, the length of the longest consecutive sequence.",
    "starter_code": "# Find the length of the longest consecutive elements sequence.",
    "test_cases": [
      {
        "input": [
          "100 4 200 1 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 3 7 2 5 8 4 6 0 1"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_064",
    "title": "Minimum Window Substring",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return an empty string. The test cases will be generated such that the answer is unique.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `t`.\n\nOutput format:\nA single string, the minimum window substring, or an empty string.",
    "starter_code": "# Find the minimum window substring.",
    "test_cases": [
      {
        "input": [
          "ADOBECODEBANC",
          "ABC"
        ],
        "expected_output": "BANC"
      },
      {
        "input": [
          "a",
          "a"
        ],
        "expected_output": "a"
      },
      {
        "input": [
          "a",
          "aa"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_065",
    "title": "Valid Sudoku",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDetermine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n1. Each of the digits 1-9 must appear exactly once in each row.\n2. Each of the digits 1-9 must appear exactly once in each column.\n3. Each of the digits 1-9 must appear exactly once in each of the 9 3x3 sub-boxes of the grid.\n\n**Constraints**\nInput format:\n9 lines, each representing a row of the Sudoku board. Use '.' for empty cells and digits '1-9' for filled cells (no spaces).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a Sudoku board is valid.",
    "test_cases": [
      {
        "input": [
          "53..7....",
          "6..195...",
          ".98....6.",
          "8...6...3",
          "4..8.3..1",
          "7...2...6",
          ".6....28.",
          "...419..5",
          "....8..79"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "83..7....",
          "6..195...",
          ".98....6.",
          "8...6...3",
          "4..8.3..1",
          "7...2...6",
          ".6....28.",
          "...419..5",
          "....8..79"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_066",
    "title": "Group Anagrams",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nEach group of anagrams on a new line, with strings space-separated.",
    "starter_code": "# Group anagrams from a list of strings.",
    "test_cases": [
      {
        "input": [
          "eat tea tan ate nat bat"
        ],
        "expected_output": "bat\nnat tan\nate eat tea"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_067",
    "title": "Spiral Matrix",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` matrix, return all elements of the matrix in spiral order.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers.\n\nOutput format:\nA single line of space-separated integers in spiral order.",
    "starter_code": "# Traverse a matrix in spiral order.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "1 2 3 6 9 8 7 4 5"
      },
      {
        "input": [
          "3 4",
          "1 2 3 4",
          "5 6 7 8",
          "9 10 11 12"
        ],
        "expected_output": "1 2 3 4 8 12 11 10 9 5 6 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_068",
    "title": "Pow(x, n)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement `pow(x, n)`, which calculates `x` raised to the power `n` (`x^n`).\n\n**Constraints**\nInput format:\nFirst line: A floating-point number `x`.\nSecond line: An integer `n`.\n\nOutput format:\nA single floating-point number, `x^n`, rounded to 5 decimal places.",
    "starter_code": "# Implement pow(x, n).",
    "test_cases": [
      {
        "input": [
          "2.00000",
          "10"
        ],
        "expected_output": "1024.00000"
      },
      {
        "input": [
          "2.10000",
          "3"
        ],
        "expected_output": "9.26100"
      },
      {
        "input": [
          "2.00000",
          "-2"
        ],
        "expected_output": "0.25000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_069",
    "title": "Sqrt(x)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-negative integer `x`, compute and return the square root of `x`. Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.\n\n**Constraints**\nInput format:\nA single non-negative integer `x` (0 <= x <= 2^31 - 1).\n\nOutput format:\nA single integer, the truncated square root.",
    "starter_code": "# Compute the integer square root of x.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_070",
    "title": "Plus One",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a large integer represented as an integer array `digits`, where each `digits[i]` is the `i`th digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading zeros. Increment the large integer by one and return the resulting array of digits.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the digits of the large integer.\n\nOutput format:\nA single line of space-separated integers representing the resulting array of digits.",
    "starter_code": "# Increment a large integer represented as an array of digits by one.",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "1 2 4"
      },
      {
        "input": [
          "4 3 2 1"
        ],
        "expected_output": "4 3 2 2"
      },
      {
        "input": [
          "9"
        ],
        "expected_output": "1 0"
      },
      {
        "input": [
          "9 9"
        ],
        "expected_output": "1 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_071",
    "title": "Add Binary",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two binary strings `a` and `b`, return their sum as a binary string.\n\n**Constraints**\nInput format:\nFirst line: Binary string `a`.\nSecond line: Binary string `b`.\nStrings `a` and `b` consist only of '0' or '1' characters.\n\nOutput format:\nA single binary string representing the sum.",
    "starter_code": "# Add two binary strings.",
    "test_cases": [
      {
        "input": [
          "11",
          "1"
        ],
        "expected_output": "100"
      },
      {
        "input": [
          "1010",
          "1011"
        ],
        "expected_output": "10101"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_072",
    "title": "Text Justification",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of words and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly `maxWidth` characters. Extra spaces between words should be distributed as evenly as possible.\n\n**Constraints**\nInput format:\nFirst line: Space-separated words.\nSecond line: An integer `maxWidth`.\n\nOutput format:\nEach justified line on a new line, enclosed in double quotes.",
    "starter_code": "# Implement text justification.",
    "test_cases": [
      {
        "input": [
          "This is an example of text justification.",
          "16"
        ],
        "expected_output": "\"This    is    an\"\n\"example  of text\"\n\"justification.  \""
      },
      {
        "input": [
          "What must be acknowledgment shall be",
          "16"
        ],
        "expected_output": "\"What   must   be\"\n\"acknowledgment  \"\n\"shall be        \""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_073",
    "title": "Count and Say Sequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe count-and-say sequence is a sequence of digit strings defined by the recursive formula: `countAndSay(1) = \"1\"`, `countAndSay(n)` is the way you would \"say\" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string. To say a digit string, split it into the minimum number of groups so that each group consists of consecutive identical characters. Then, for each group, say the number of characters, then say the character itself. Return the `n`th term of the count-and-say sequence.\n\n**Constraints**\nInput format:\nA single integer `n` (1 <= n <= 30).\n\nOutput format:\nA single string, the `n`th term of the sequence.",
    "starter_code": "# Generate the count-and-say sequence.",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "1211"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_074",
    "title": "N-Queens Problem",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return all distinct solutions to the n-queens puzzle. Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n\n**Constraints**\nInput format:\nA single integer `n` (1 <= n <= 9).\n\nOutput format:\nEach distinct solution (board) separated by a blank line, with each row on a new line.",
    "starter_code": "# Solve the N-Queens problem.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": ". Q . .\n. . . Q\nQ . . .\n. . Q .\n\n. . Q .\nQ . . .\n. . . Q\n. Q . ."
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "Q"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_075",
    "title": "Maximum Depth of Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes. E.g., `3 9 20 null null 15 7`.\n\nOutput format:\nA single integer, the maximum depth.",
    "starter_code": "# Find the maximum depth of a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 null 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_076",
    "title": "Same Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the roots of two binary trees `p` and `q`, return `true` if they are the same tree. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing tree `p` in level order.\nSecond line: Space-separated integers representing tree `q` in level order.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if two binary trees are identical.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "1 2 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2",
          "1 null 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_077",
    "title": "Symmetric Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a binary tree is symmetric.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 4 4 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 2 null 3 null 3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_078",
    "title": "Binary Tree Level Order Traversal",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\nEach level's nodes on a new line, with values space-separated.",
    "starter_code": "# Perform level order traversal of a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3\n9 20\n15 7"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_079",
    "title": "Convert Sorted Array to Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree (BST). A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\n\n**Constraints**\nInput format:\nA single line of space-separated sorted integers.\n\nOutput format:\nThe level order traversal of the constructed BST, with 'null' for null nodes.",
    "starter_code": "# Convert sorted array to a height-balanced BST.",
    "test_cases": [
      {
        "input": [
          "-10 -3 0 5 9"
        ],
        "expected_output": "0 -3 9 -10 null 5 null"
      },
      {
        "input": [
          "1 3"
        ],
        "expected_output": "3 1 null"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_080",
    "title": "Balanced Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree, determine if it is height-balanced. A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a binary tree is height-balanced.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 2 3 3 null null 4 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_081",
    "title": "Minimum Depth of Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\nA single integer, the minimum depth.",
    "starter_code": "# Find the minimum depth of a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 null 3 null 4 null 5 null 6"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_082",
    "title": "Path Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`. A leaf node is a node with no children.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\nSecond line: An integer `targetSum`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if there is a root-to-leaf path sum.",
    "test_cases": [
      {
        "input": [
          "5 4 8 11 null 13 4 7 2 null null null 1",
          "22"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3",
          "5"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_083",
    "title": "Flatten Binary Tree to Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, flatten the tree into a \"linked list\" format. The \"linked list\" should be in the same order as a pre-order traversal. The `right` child pointer should point to the next node in the list and the `left` child pointer should always be `null`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\nA single line of space-separated integers representing the flattened linked list (pre-order traversal).",
    "starter_code": "# Flatten a binary tree into a linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 5 3 4 null 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_084",
    "title": "Pascal's Triangle",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `numRows`, return the first `numRows` of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it.\n\n**Constraints**\nInput format:\nA single integer `numRows` (1 <= numRows <= 30).\n\nOutput format:\nEach row on a new line, with numbers space-separated.",
    "starter_code": "# Generate Pascal's Triangle.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_085",
    "title": "Single Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer, the unique element.",
    "starter_code": "# Find the single number in an array.",
    "test_cases": [
      {
        "input": [
          "2 2 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4 1 2 1 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_086",
    "title": "Majority Element",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `n / 2` times. You may assume that the majority element always exists in the array.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer, the majority element.",
    "starter_code": "# Find the majority element in an array.",
    "test_cases": [
      {
        "input": [
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_087",
    "title": "House Robber",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses are broken into on the same night. Given an integer array `nums` representing the amount of money in each house, return the maximum amount of money you can rob tonight without alerting the police.\n\n**Constraints**\nInput format:\nA single line of space-separated non-negative integers representing money in houses.\n\nOutput format:\nA single integer, the maximum amount of money you can rob.",
    "starter_code": "# Calculate maximum money a robber can steal without alerting police.",
    "test_cases": [
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2 7 9 3 1"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_088",
    "title": "Best Time to Buy and Sell Stock",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing stock prices.\n\nOutput format:\nA single integer, the maximum profit.",
    "starter_code": "# Calculate the maximum profit from buying and selling stock.",
    "test_cases": [
      {
        "input": [
          "7 1 5 3 6 4"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "7 6 4 3 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_089",
    "title": "Contains Duplicate",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an array contains duplicate elements.",
    "test_cases": [
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_090",
    "title": "Remove Nth Node From End of List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a linked list, remove the `n`th node from the end of the list and return its head.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the linked list nodes (ending with -1 for null).\nSecond line: An integer `n`.\n\nOutput format:\nA single line of space-separated integers representing the modified linked list.",
    "starter_code": "# Remove the Nth node from the end of a linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1",
          "2"
        ],
        "expected_output": "1 2 3 5"
      },
      {
        "input": [
          "1 -1",
          "1"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "1 2 -1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_091",
    "title": "Longest Common Prefix",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.\n\n**Constraints**\nInput format:\nA single line of space-separated strings.\n\nOutput format:\nA single string, the longest common prefix.",
    "starter_code": "# Find the longest common prefix among an array of strings.",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      },
      {
        "input": [
          "dog racecar car"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_092",
    "title": "3Sum Closest",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of `n` integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `target`.\n\nOutput format:\nA single integer, the sum closest to the target.",
    "starter_code": "# Find three integers in an array that sum closest to a target.",
    "test_cases": [
      {
        "input": [
          "-1 2 1 -4",
          "1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "0 0 0",
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_093",
    "title": "Letter Combinations of a Phone Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. Mapping is same as on telephone buttons (2:'abc', 3:'def', etc.).\n\n**Constraints**\nInput format:\nA single string `digits` (0 <= digits.length <= 4).\n\nOutput format:\nEach combination on a new line, sorted alphabetically.",
    "starter_code": "# Generate all possible letter combinations from a phone number.",
    "test_cases": [
      {
        "input": [
          "23"
        ],
        "expected_output": "ad\nae\naf\nbd\nbe\nbf\ncd\nce\ncf"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "a\nb\nc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_094",
    "title": "Remove Duplicates from Sorted Array II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted array `nums`, remove the duplicates in-place such that each element appears at most twice. The relative order of the elements should be kept the same. Return the new length of the array. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\n\n**Constraints**\nInput format:\nA single line of space-separated sorted integers.\n\nOutput format:\nFirst line: The new length.\nSecond line: The modified array with duplicates at most twice (space-separated).",
    "starter_code": "# Remove duplicates from sorted array, allowing at most two occurrences.",
    "test_cases": [
      {
        "input": [
          "1 1 1 2 2 3"
        ],
        "expected_output": "5\n1 1 2 2 3"
      },
      {
        "input": [
          "0 0 1 1 1 1 2 3 3"
        ],
        "expected_output": "7\n0 0 1 1 2 3 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_095",
    "title": "Remove Element",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` in-place. The relative order of the elements may be changed. Return the number of elements in `nums` which are not equal to `val`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `val` to remove.\n\nOutput format:\nFirst line: The new length.\nSecond line: The modified array with `val` removed (space-separated, order not important beyond the new length).",
    "starter_code": "# Remove all occurrences of a specific value from an array in-place.",
    "test_cases": [
      {
        "input": [
          "3 2 2 3",
          "3"
        ],
        "expected_output": "2\n2 2"
      },
      {
        "input": [
          "0 1 2 2 3 0 4 2",
          "2"
        ],
        "expected_output": "5\n0 1 3 0 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_096",
    "title": "Generate Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n**Constraints**\nInput format:\nA single integer `n` (1 <= n <= 8).\n\nOutput format:\nEach combination on a new line, sorted alphabetically.",
    "starter_code": "# Generate all combinations of well-formed parentheses.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "((()))\n(()())\n(())()\n()(())\n()()()"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "()"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_097",
    "title": "Merge Two Sorted Linked Lists",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the heads of two sorted linked lists `list1` and `list2`, merge the two lists into a single sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing `list1` (ending with -1 for null).\nSecond line: Space-separated integers representing `list2` (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the merged linked list.",
    "starter_code": "# Merge two sorted linked lists.",
    "test_cases": [
      {
        "input": [
          "1 2 4 -1",
          "1 3 4 -1"
        ],
        "expected_output": "1 1 2 3 4 4"
      },
      {
        "input": [
          "-1",
          "0 -1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_098",
    "title": "Remove Duplicates from Sorted List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the modified linked list.",
    "starter_code": "# Remove duplicates from a sorted linked list.",
    "test_cases": [
      {
        "input": [
          "1 1 2 -1"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "1 1 2 3 3 -1"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_099",
    "title": "Partition List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before all nodes greater than or equal to `x`. You should preserve the original relative order of the nodes in each of the two partitions.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the linked list nodes (ending with -1 for null).\nSecond line: An integer `x`.\n\nOutput format:\nA single line of space-separated integers representing the partitioned linked list.",
    "starter_code": "# Partition a linked list around a value x.",
    "test_cases": [
      {
        "input": [
          "1 4 3 2 5 2 -1",
          "3"
        ],
        "expected_output": "1 2 2 4 3 5"
      },
      {
        "input": [
          "2 1 -1",
          "2"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_100",
    "title": "Decode Ways",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA message containing letters from A-Z is being encoded to numbers using the following mapping: 'A' -> \"1\", 'B' -> \"2\", ..., 'Z' -> \"26\". Given a string `s` containing only digits, return the number of ways to decode it.\n\n**Constraints**\nInput format:\nA single string `s` consisting of digits.\n\nOutput format:\nA single integer, the number of ways to decode `s`.",
    "starter_code": "# Calculate the number of ways to decode an encoded message.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "226"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "06"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_101",
    "title": "Min Stack",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign a stack that supports `push`, `pop`, `top`, and retrieving the minimum element in constant time. Your design should include four operations: `push(val)`, `pop()`, `top()`, and `getMin()`.\n\n**Constraints**\nInput format:\nLines of operations and their arguments. Example: `push 5`, `push 2`, `getMin`, `pop`, `getMin`.\n\nOutput format:\nResults of `getMin` and `top` operations on new lines.",
    "starter_code": "# Design a Min Stack data structure.",
    "test_cases": [
      {
        "input": [
          "push -2",
          "push 0",
          "push -3",
          "getMin",
          "pop",
          "top",
          "getMin"
        ],
        "expected_output": "-3\n0\n-2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_102",
    "title": "Evaluate Reverse Polish Notation",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nEvaluate the value of an arithmetic expression in Reverse Polish Notation (RPN). Valid operators are +, -, *, /. Each operand may be an integer or another expression. The division between two integers should truncate toward zero. It is guaranteed that the given RPN expression is always valid.\n\n**Constraints**\nInput format:\nA single line of space-separated strings representing the RPN expression.\n\nOutput format:\nA single integer, the result of the evaluation.",
    "starter_code": "# Evaluate an arithmetic expression in Reverse Polish Notation.",
    "test_cases": [
      {
        "input": [
          "2 1 + 3 *"
        ],
        "expected_output": "9"
      },
      {
        "input": [
          "4 13 5 / +"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "10 6 9 3 + -11 * / * 17 + 5 +"
        ],
        "expected_output": "22"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_103",
    "title": "Number of Islands",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` 2D binary grid `grid` which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the grid as a string of '0's and '1's (no spaces).\n\nOutput format:\nA single integer, the number of islands.",
    "starter_code": "# Count the number of islands in a 2D binary grid.",
    "test_cases": [
      {
        "input": [
          "4 5",
          "11110",
          "11010",
          "11000",
          "00000"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4 5",
          "11000",
          "11000",
          "00100",
          "00011"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_104",
    "title": "Pacific Atlantic Water Flow",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` rectangular integer array `heights` representing the height of each unit cell in a continent, find a list of grid coordinates `(row, col)` where water can flow to both the Pacific and Atlantic oceans. Water can only flow from a cell to another one with a height equal to or less than the current cell. Both the Pacific ocean (left and top borders) and Atlantic ocean (right and bottom borders) touch the border of the array.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of `heights` as space-separated integers.\n\nOutput format:\nEach coordinate `row col` on a new line, sorted row-wise then column-wise.",
    "starter_code": "# Find grid coordinates where water can flow to both Pacific and Atlantic oceans.",
    "test_cases": [
      {
        "input": [
          "5 5",
          "1 2 2 3 5",
          "3 2 3 4 4",
          "2 4 5 3 1",
          "6 7 1 4 5",
          "5 1 1 2 4"
        ],
        "expected_output": "0 4\n1 3\n1 4\n2 2\n3 0\n3 1\n4 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_105",
    "title": "Course Schedule",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from 0 to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return `true` if you can finish all courses. Otherwise, return `false`.\n\n**Constraints**\nInput format:\nFirst line: An integer `numCourses`.\nNext lines: Each line `ai bi` representing a prerequisite, ending with a blank line to signify end of prerequisites.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if it's possible to finish all courses (detect cycles).",
    "test_cases": [
      {
        "input": [
          "2",
          "1 0",
          ""
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2",
          "1 0",
          "0 1",
          ""
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_106",
    "title": "Clone Graph",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a value `val` (integer) and a list `neighbors` (list of Node objects). Nodes are numbered from 1 to `n`.\n\n**Constraints**\nInput format:\nEach line represents a node and its neighbors: `node_val: neighbor1 neighbor2 ...`.\nEnd input with a blank line.\n\nOutput format:\nThe cloned graph represented in the same format as input.",
    "starter_code": "# Clone an undirected graph.",
    "test_cases": [
      {
        "input": [
          "1:2 4",
          "2:1 3",
          "3:2 4",
          "4:1 3",
          ""
        ],
        "expected_output": "1:2 4\n2:1 3\n3:2 4\n4:1 3"
      },
      {
        "input": [
          "1:",
          ""
        ],
        "expected_output": "1:"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_107",
    "title": "Word Ladder",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA transformation sequence from `beginWord` to `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk -> endWord` such that:\n1. Every adjacent pair of words differs by a single letter.\n2. Every `si` for `1 <= i <= k` is in `wordList`.\n3. `endWord` is in `wordList`.\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence, or 0 if no such sequence exists.\n\n**Constraints**\nInput format:\nFirst line: `beginWord`.\nSecond line: `endWord`.\nThird line: Space-separated words for `wordList`.\n\nOutput format:\nA single integer, the length of the shortest transformation sequence, or 0.",
    "starter_code": "# Find the length of the shortest word ladder transformation sequence.",
    "test_cases": [
      {
        "input": [
          "hit",
          "cog",
          "hot dot dog lot log cog"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "hit",
          "cog",
          "hot dot dog lot log"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_108",
    "title": "Cheapest Flights Within K Stops",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are `n` cities connected by `m` flights. Each flight `(from, to, price)` denotes that there is a flight from city `from` to city `to` with the given `price`. You are also given three integers `src`, `dst`, and `k`, return the cheapest price from `src` to `dst` with at most `k` stops. If there is no such route, return -1.\n\n**Constraints**\nInput format:\nFirst line: `n` (number of cities).\nSecond line: `m` (number of flights).\nNext `m` lines: `from to price` for each flight.\nLast line: `src dst k`.\n\nOutput format:\nA single integer, the cheapest price or -1.",
    "starter_code": "# Find the cheapest flight price with at most K stops.",
    "test_cases": [
      {
        "input": [
          "3",
          "3",
          "0 1 100",
          "1 2 100",
          "0 2 500",
          "0 2 1"
        ],
        "expected_output": "200"
      },
      {
        "input": [
          "3",
          "3",
          "0 1 100",
          "1 2 100",
          "0 2 500",
          "0 2 0"
        ],
        "expected_output": "500"
      },
      {
        "input": [
          "3",
          "3",
          "0 1 100",
          "1 2 100",
          "0 2 500",
          "0 1 0"
        ],
        "expected_output": "100"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_109",
    "title": "Dijkstra's Algorithm (Shortest Path)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement Dijkstra's algorithm to find the shortest path from a source node to all other nodes in a given weighted, undirected graph with non-negative edge weights. Return the shortest distances. If a node is unreachable, its distance should be infinity.\n\n**Constraints**\nInput format:\nFirst line: `n` (number of nodes), `m` (number of edges).\nNext `m` lines: `u v weight` for each edge.\nLast line: `source_node`.\n\nOutput format:\nSpace-separated integers for shortest distances from source to each node (0 to n-1). Use -1 for infinity.",
    "starter_code": "# Implement Dijkstra's algorithm for shortest paths.",
    "test_cases": [
      {
        "input": [
          "5 6",
          "0 1 10",
          "0 2 3",
          "1 2 1",
          "1 3 2",
          "2 1 4",
          "2 3 8",
          "2 4 2",
          "3 4 5",
          "0"
        ],
        "expected_output": "0 4 3 6 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_110",
    "title": "Bellman-Ford Algorithm (Shortest Path with Negative Edges)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement the Bellman-Ford algorithm to find the shortest paths from a source node to all other nodes in a given weighted, directed graph that might contain negative edge weights. Detect if there is a negative cycle reachable from the source. Return the shortest distances, or 'Negative Cycle Detected' if a negative cycle is found.\n\n**Constraints**\nInput format:\nFirst line: `n` (number of nodes), `m` (number of edges).\nNext `m` lines: `u v weight` for each directed edge.\nLast line: `source_node`.\n\nOutput format:\nSpace-separated integers for shortest distances from source to each node (0 to n-1). Use -1 for infinity. If negative cycle, print 'Negative Cycle Detected'.",
    "starter_code": "# Implement Bellman-Ford algorithm for shortest paths with negative edges.",
    "test_cases": [
      {
        "input": [
          "5 8",
          "0 1 -1",
          "0 2 4",
          "1 2 3",
          "1 3 2",
          "1 4 2",
          "3 2 5",
          "3 1 1",
          "4 3 -3",
          "0"
        ],
        "expected_output": "0 -1 2 -2 1"
      },
      {
        "input": [
          "3 3",
          "0 1 1",
          "1 2 -1",
          "2 0 -1",
          "0"
        ],
        "expected_output": "Negative Cycle Detected"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_111",
    "title": "Longest Increasing Subsequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the length of the longest strictly increasing subsequence.\n\n**Constraints**\nInput format:\nA single line of space-separated integers.\n\nOutput format:\nA single integer, the length of the longest increasing subsequence.",
    "starter_code": "# Find the length of the longest increasing subsequence.",
    "test_cases": [
      {
        "input": [
          "10 9 2 5 3 7 101 18"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 1 0 3 2 3"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_112",
    "title": "Edit Distance",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. You have the following three operations permitted on a word:\n1. Insert a character\n2. Delete a character\n3. Replace a character\n\n**Constraints**\nInput format:\nFirst line: String `word1`.\nSecond line: String `word2`.\n\nOutput format:\nA single integer, the minimum number of operations.",
    "starter_code": "# Compute the minimum edit distance between two words.",
    "test_cases": [
      {
        "input": [
          "horse",
          "ros"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "intention",
          "execution"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_113",
    "title": "Coin Change",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `coins`.\nSecond line: An integer `amount`.\n\nOutput format:\nA single integer, the fewest number of coins or -1.",
    "starter_code": "# Find the fewest number of coins to make up an amount.",
    "test_cases": [
      {
        "input": [
          "1 2 5",
          "11"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_114",
    "title": "Word Break",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: Space-separated words for `wordDict`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if a string can be segmented into dictionary words.",
    "test_cases": [
      {
        "input": [
          "leetcode",
          "leet code"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "applepenapple",
          "apple pen"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "catsandog",
          "cats dog sand and cat"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_115",
    "title": "Wildcard Matching",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an input string `s` and a pattern `p`, implement wildcard pattern matching with support for '?' and '*'.\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `p`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Implement wildcard pattern matching.",
    "test_cases": [
      {
        "input": [
          "aa",
          "a"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "*"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "cb",
          "?a"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_116",
    "title": "Count Primes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the number of prime numbers that are strictly less than `n`.\n\n**Constraints**\nInput format:\nA single integer `n` (0 <= n <= 5 * 10^6).\n\nOutput format:\nA single integer, the count of prime numbers.",
    "starter_code": "# Count the number of prime numbers less than n.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_117",
    "title": "Happy Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite an algorithm to determine if a number `n` is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return `true` if `n` is a happy number, and `false` if not.\n\n**Constraints**\nInput format:\nA single integer `n` (1 <= n <= 2^31 - 1).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if a number is happy.",
    "test_cases": [
      {
        "input": [
          "19"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_118",
    "title": "Ugly Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nAn ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer `n`, return `true` if `n` is an ugly number.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if a number is an ugly number.",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "14"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_119",
    "title": "Power of Two",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `true` if it is a power of two. Otherwise, return `false`. An integer `n` is a power of two, if there exists an integer `x` such that `n == 2^x`.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a number is a power of two.",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_120",
    "title": "Add Digits",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `num`, repeatedly add all its digits until the result has only one digit. Return the single digit result.\n\n**Constraints**\nInput format:\nA single integer `num` (0 <= num <= 2^31 - 1).\n\nOutput format:\nA single integer, the final single digit.",
    "starter_code": "# Repeatedly add digits until a single digit remains.",
    "test_cases": [
      {
        "input": [
          "38"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_121",
    "title": "Power of Three",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `true` if it is a power of three. Otherwise, return `false`. An integer `n` is a power of three, if there exists an integer `x` such that `n == 3^x`.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a number is a power of three.",
    "test_cases": [
      {
        "input": [
          "27"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "9"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "45"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_122",
    "title": "Sum of Two Integers (Bit Manipulation)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.\n\n**Constraints**\nInput format:\nFirst line: An integer `a`.\nSecond line: An integer `b`.\n\nOutput format:\nA single integer, the sum.",
    "starter_code": "# Calculate the sum of two integers using bit manipulation.",
    "test_cases": [
      {
        "input": [
          "1",
          "2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_123",
    "title": "Number of 1 Bits (Hamming Weight)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\n**Constraints**\nInput format:\nA single non-negative integer `n`.\n\nOutput format:\nA single integer, the number of 1 bits.",
    "starter_code": "# Count the number of 1 bits in an unsigned integer.",
    "test_cases": [
      {
        "input": [
          "11"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "128"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_124",
    "title": "Reverse Bits",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nReverse bits of a given 32-bit unsigned integer.\n\n**Constraints**\nInput format:\nA single non-negative integer `n`.\n\nOutput format:\nA single integer, the reversed 32-bit integer.",
    "starter_code": "# Reverse bits of a 32-bit unsigned integer.",
    "test_cases": [
      {
        "input": [
          "43261596"
        ],
        "expected_output": "964176192"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_125",
    "title": "Counting Bits",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return an array `ans` of length `n + 1` such that for each `i` (`0 <= i <= n`), `ans[i]` is the number of 1's in the binary representation of `i`.\n\n**Constraints**\nInput format:\nA single non-negative integer `n` (0 <= n <= 10^5).\n\nOutput format:\nA single line of space-separated integers, the array `ans`.",
    "starter_code": "# Calculate the number of 1's in binary representation for numbers up to n.",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "0 1 1"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "0 1 1 2 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_126",
    "title": "Invert Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, invert the tree, and return its `root`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\nThe level order traversal of the inverted tree, with 'null' for null nodes.",
    "starter_code": "# Invert a binary tree.",
    "test_cases": [
      {
        "input": [
          "4 2 7 1 3 6 9"
        ],
        "expected_output": "4 7 2 9 6 3 1"
      },
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "2 3 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_127",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a Binary Search Tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. The LCA is defined as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the BST nodes in level order, with 'null' for null nodes.\nSecond line: An integer `p_val` (value of node p).\nThird line: An integer `q_val` (value of node q).\n\nOutput format:\nA single integer, the value of the LCA node.",
    "starter_code": "# Find the Lowest Common Ancestor (LCA) of two nodes in a BST.",
    "test_cases": [
      {
        "input": [
          "6 2 8 0 4 7 9 null null 3 5",
          "2",
          "8"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "6 2 8 0 4 7 9 null null 3 5",
          "2",
          "4"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_128",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. The LCA is defined as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the binary tree nodes in level order, with 'null' for null nodes.\nSecond line: An integer `p_val` (value of node p).\nThird line: An integer `q_val` (value of node q).\n\nOutput format:\nA single integer, the value of the LCA node.",
    "starter_code": "# Find the Lowest Common Ancestor (LCA) of two nodes in a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 5 1 6 2 0 8 null null 7 4",
          "5",
          "1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3 5 1 6 2 0 8 null null 7 4",
          "5",
          "4"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_129",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and so on. The next level again left to right, and so on.)\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\nEach level's nodes on a new line, with values space-separated.",
    "starter_code": "# Perform zigzag level order traversal of a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3\n20 9\n15 7"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_130",
    "title": "Binary Tree Right Side View",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\nA single line of space-separated integers, the right side view of the tree.",
    "starter_code": "# Get the right side view of a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3 null 5 null 4"
        ],
        "expected_output": "1 3 4"
      },
      {
        "input": [
          "1 null 3"
        ],
        "expected_output": "1 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_131",
    "title": "Count Complete Tree Nodes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a complete binary tree, return the number of nodes in the tree. In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the complete binary tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\nA single integer, the number of nodes.",
    "starter_code": "# Count the number of nodes in a complete binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_132",
    "title": "Kth Smallest Element in a BST",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), and an integer `k`, return the `k`th smallest value (1-indexed) of all the values in the tree.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the BST nodes in level order, with 'null' for null nodes.\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the `k`th smallest element.",
    "starter_code": "# Find the Kth smallest element in a Binary Search Tree (BST).",
    "test_cases": [
      {
        "input": [
          "3 1 4 null 2",
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5 3 6 2 4 null null 1",
          "3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_133",
    "title": "Serialize and Deserialize Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign algorithms to serialize and deserialize a binary tree. Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\n**Constraints**\nInput format:\nFirst line: A single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes (for serialization input).\nSecond line: A serialized string (for deserialization input).\n\nOutput format:\nFirst line: The serialized string of the input tree.\nSecond line: The level order traversal of the deserialized tree, with 'null' for null nodes.",
    "starter_code": "# Implement serialization and deserialization of a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3 null null 4 5",
          "1,2,null,null,3,4,null,null,5,null,null"
        ],
        "expected_output": "1,2,null,null,3,4,null,null,5,null,null\n1 2 3 null null 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_134",
    "title": "Path Sum II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where the sum of the node values in the path equals `targetSum`. Return the paths in any order.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\nSecond line: An integer `targetSum`.\n\nOutput format:\nEach path on a new line, with node values space-separated.",
    "starter_code": "# Find all root-to-leaf paths with a given sum.",
    "test_cases": [
      {
        "input": [
          "5 4 8 11 null 13 4 7 2 null null 5 1",
          "22"
        ],
        "expected_output": "5 4 11 2\n5 8 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_135",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `preorder` traversal.\nSecond line: Space-separated integers for `inorder` traversal.\n\nOutput format:\nThe level order traversal of the constructed binary tree, with 'null' for null nodes.",
    "starter_code": "# Construct a binary tree from preorder and inorder traversals.",
    "test_cases": [
      {
        "input": [
          "3 9 20 15 7",
          "9 3 15 20 7"
        ],
        "expected_output": "3 9 20 null null 15 7"
      },
      {
        "input": [
          "-1",
          "-1"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_136",
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `inorder` traversal.\nSecond line: Space-separated integers for `postorder` traversal.\n\nOutput format:\nThe level order traversal of the constructed binary tree, with 'null' for null nodes.",
    "starter_code": "# Construct a binary tree from inorder and postorder traversals.",
    "test_cases": [
      {
        "input": [
          "9 3 15 20 7",
          "9 15 7 20 3"
        ],
        "expected_output": "3 9 20 null null 15 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_137",
    "title": "Validate Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys `less than` the node's key.\n- The right subtree of a node contains only nodes with keys `greater than` the node's key.\n- Both the left and right subtrees must also be binary search trees.\n\n**Constraints**\nInput format:\nA single line of space-separated integers representing the tree nodes in level order, with 'null' for null nodes.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Validate if a binary tree is a valid Binary Search Tree (BST).",
    "test_cases": [
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5 1 4 null null 3 6"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_138",
    "title": "Missing Ranges",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted integer array `nums`, where the range of elements is `[lower, upper]` inclusive, return its missing ranges. A missing range is a range `[a, b]` such that all integers in `[a, b]` are not found in `nums` and no integer in `[a, b]` is outside the range `[lower, upper]` and all integers in `nums` are within the range `[lower, upper]`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `lower`.\nThird line: An integer `upper`.\n\nOutput format:\nEach missing range on a new line, formatted as 'a->b' or 'a' if a==b.",
    "starter_code": "# Find missing ranges in a sorted integer array.",
    "test_cases": [
      {
        "input": [
          "0 1 3 50 75",
          "0",
          "99"
        ],
        "expected_output": "2\n4->49\n51->74\n76->99"
      },
      {
        "input": [
          "",
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_139",
    "title": "Meeting Rooms",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of meeting time intervals `intervals` where `intervals[i] = [start_i, end_i]`, determine if a person could attend all meetings. That is, check if any two intervals overlap.\n\n**Constraints**\nInput format:\nEach line represents an interval `start end`. Input ends with a blank line.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if a person can attend all meetings without overlap.",
    "test_cases": [
      {
        "input": [
          "0 30",
          "5 10",
          "15 20",
          ""
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "7 10",
          "2 4",
          ""
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_140",
    "title": "Meeting Rooms II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of meeting time intervals `intervals` where `intervals[i] = [start_i, end_i]`, return the minimum number of conference rooms required. Assume that a meeting can end and start at the same time in the same room.\n\n**Constraints**\nInput format:\nEach line represents an interval `start end`. Input ends with a blank line.\n\nOutput format:\nA single integer, the minimum number of conference rooms required.",
    "starter_code": "# Find the minimum number of conference rooms required for meetings.",
    "test_cases": [
      {
        "input": [
          "0 30",
          "5 10",
          "15 20",
          ""
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "7 10",
          "2 4",
          ""
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_141",
    "title": "Shortest Word Distance",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of strings `wordsDict` and two different strings `word1` and `word2` in `wordsDict`, return the shortest distance between these two words in the list.\n\n**Constraints**\nInput format:\nFirst line: Space-separated strings for `wordsDict`.\nSecond line: `word1`.\nThird line: `word2`.\n\nOutput format:\nA single integer, the shortest distance.",
    "starter_code": "# Find the shortest distance between two words in a list.",
    "test_cases": [
      {
        "input": [
          "practice makes perfect coding makes",
          "coding",
          "practice"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "a b c d a",
          "a",
          "b"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_142",
    "title": "Remove K Digits",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-negative integer `num` represented as a string, remove `k` digits from the number so that the new number is the smallest possible. Return the new smallest number.\n\n**Constraints**\nInput format:\nFirst line: String `num`.\nSecond line: An integer `k`.\n\nOutput format:\nA single string, the smallest possible new number.",
    "starter_code": "# Remove K digits from a number to make the smallest possible new number.",
    "test_cases": [
      {
        "input": [
          "1432219",
          "3"
        ],
        "expected_output": "1219"
      },
      {
        "input": [
          "10200",
          "1"
        ],
        "expected_output": "200"
      },
      {
        "input": [
          "10",
          "2"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_143",
    "title": "Flatten a Multilevel Doubly Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a doubly linked list, which contains nodes that have a `next` pointer, a `prev` pointer, and a `child` pointer (which points to a separate doubly linked list). These child lists may have their own children, and so on. Flatten the list so that all the nodes appear in a single-level, doubly linked list. The order should be as follows: If a node has a child, the child list should be flattened and inserted immediately after the parent node, before the parent's `next` node. The `prev` and `next` pointers of the flattened list should be set correctly. The `child` pointers should all be `null`.\n\n**Constraints**\nInput format:\nEach line represents a node and its connections: `val: next_val prev_val child_val`. `null` if no connection. End input with a blank line.\n\nOutput format:\nA single line of space-separated integers representing the flattened list.",
    "starter_code": "# Flatten a multilevel doubly linked list.",
    "test_cases": [
      {
        "input": [
          "1:2 null 7",
          "2:3 1 null",
          "3:4 2 null",
          "4:5 3 null",
          "5:6 4 null",
          "6:null 5 null",
          "7:8 null 11",
          "8:9 7 null",
          "9:10 8 null",
          "10:null 9 null",
          "11:12 null null",
          "12:null 11 null",
          ""
        ],
        "expected_output": "1 7 11 12 8 9 10 2 3 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_144",
    "title": "Next Greater Element I",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe next greater element of some element `x` in an array is the first greater element that is to the right of `x` in the same array. You are given two distinct 0-indexed integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`. Find the next greater element for each element in `nums1` in `nums2`. If it does not exist, return -1.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums1`.\nSecond line: Space-separated integers for `nums2`.\n\nOutput format:\nA single line of space-separated integers, the next greater elements for `nums1`.",
    "starter_code": "# Find the next greater element for each number in nums1 present in nums2.",
    "test_cases": [
      {
        "input": [
          "4 1 2",
          "1 3 4 2"
        ],
        "expected_output": "-1 3 -1"
      },
      {
        "input": [
          "2 4",
          "1 2 3 4"
        ],
        "expected_output": "3 -1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_145",
    "title": "Top K Frequent Elements",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\nA single line of space-separated integers, the `k` most frequent elements (sorted if multiple correct answers exist, otherwise any order).",
    "starter_code": "# Find the K most frequent elements in an array.",
    "test_cases": [
      {
        "input": [
          "1 1 1 2 2 3",
          "2"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_146",
    "title": "Find All Duplicates in an Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of length `n` where all the integers of `nums` are in the range `[1, n]` and each integer appears once or twice, return an array of all the integers that appear twice. You must write an algorithm that runs in `O(n)` time and uses only constant extra space.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single line of space-separated integers, the duplicates (sorted in ascending order).",
    "starter_code": "# Find all elements that appear twice in an array.",
    "test_cases": [
      {
        "input": [
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "2 3"
      },
      {
        "input": [
          "1 1 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_147",
    "title": "Array Partition I",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the maximized sum.",
    "starter_code": "# Maximize sum of minimums in pairs from an array.",
    "test_cases": [
      {
        "input": [
          "1 4 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "6 2 6 5 1 2"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_148",
    "title": "Number Complement",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe complement of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation. Given a positive integer `num`, return its complement.\n\n**Constraints**\nInput format:\nA single positive integer `num`.\n\nOutput format:\nA single integer, the complement of `num`.",
    "starter_code": "# Find the complement of an integer (binary complement).",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_149",
    "title": "Teemo Attacking",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nIn LOL world, there is a hero called Teemo and his attacking can make enemy Ashe be in poisoned condition. Now, given the Teemo's attacking `timeSeries` and Ashe's poisoned `duration`, you need to output the total time that Ashe is in poisoned condition.\nYou may assume that Teemo attacks at the very beginning of a specific time point, and duration time will be active at the same time point. If Teemo attacks again before the poisoned condition ends, the poisoned condition will be refreshed.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `timeSeries`.\nSecond line: An integer `duration`.\n\nOutput format:\nA single integer, the total poisoned time.",
    "starter_code": "# Calculate total time Teemo will be in poisoned condition.",
    "test_cases": [
      {
        "input": [
          "1 4",
          "2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "1 2",
          "2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_150",
    "title": "Longest Palindrome",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters. Letters are case sensitive, for example, \"Aa\" is not considered a palindrome here.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the length of the longest palindrome.",
    "starter_code": "# Find the length of the longest palindrome that can be built from a string.",
    "test_cases": [
      {
        "input": [
          "abccccdd"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_151",
    "title": "First Unique Character in a String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the index of the first unique character or -1.",
    "starter_code": "# Find the first non-repeating character in a string.",
    "test_cases": [
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "loveleetcode"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "aabb"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_152",
    "title": "Ransom Note",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `ransomNote` and `magazine`, return `true` if `ransomNote` can be constructed by using the letters from `magazine` and `false` otherwise. Each letter in `magazine` can only be used once in `ransomNote`.\n\n**Constraints**\nInput format:\nFirst line: String `ransomNote`.\nSecond line: String `magazine`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if a ransom note can be constructed from a magazine.",
    "test_cases": [
      {
        "input": [
          "a",
          "b"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "ab"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "aa",
          "aab"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_153",
    "title": "Find the Difference",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two strings `s` and `t`. String `t` is generated by random shuffling string `s` and then add one more letter at a random position. Return the letter that was added to `t`.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `t`.\n\nOutput format:\nA single character, the added letter.",
    "starter_code": "# Find the letter that was added to string t.",
    "test_cases": [
      {
        "input": [
          "abcd",
          "abcde"
        ],
        "expected_output": "e"
      },
      {
        "input": [
          "",
          "y"
        ],
        "expected_output": "y"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_154",
    "title": "Jewels and Stones",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels. Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n\n**Constraints**\nInput format:\nFirst line: String `jewels`.\nSecond line: String `stones`.\n\nOutput format:\nA single integer, the count of stones that are also jewels.",
    "starter_code": "# Count how many stones are jewels.",
    "test_cases": [
      {
        "input": [
          "aA",
          "aAAbbbb"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "z",
          "ZZ"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_155",
    "title": "Number of Good Pairs",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums`, return the number of *good pairs*. A pair `(i, j)` is called a *good pair* if `nums[i] == nums[j]` and `i < j`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the number of good pairs.",
    "starter_code": "# Count the number of good pairs in an array.",
    "test_cases": [
      {
        "input": [
          "1 2 3 1 1 3"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "1 1 1 1"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_156",
    "title": "Valid Perfect Square",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer `num`, return `true` if `num` is a perfect square, otherwise return `false`. Do not use any built-in library function such as `sqrt`.\n\n**Constraints**\nInput format:\nA single positive integer `num`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a given positive integer is a perfect square.",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "14"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_157",
    "title": "Arranging Coins",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou have `n` coins and you want to build a staircase with them. The staircase consists of `k` rows where the `i`th row has exactly `i` coins. The last row of the staircase may be incomplete.\nGiven the integer `n`, return the number of complete rows of the staircase you will build.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\nA single integer, the number of complete rows.",
    "starter_code": "# Calculate the maximum number of complete rows of coins that can be formed.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "8"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_158",
    "title": "Find All Numbers Disappeared in an Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single line of space-separated integers, the disappeared numbers (sorted in ascending order).",
    "starter_code": "# Find all integers in the range [1, n] that do not appear in an array.",
    "test_cases": [
      {
        "input": [
          "4 3 2 7 8 2 3 1"
        ],
        "expected_output": "5 6"
      },
      {
        "input": [
          "1 1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_159",
    "title": "Assign Cookies",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `g` (greed factors).\nSecond line: Space-separated integers for `s` (cookie sizes).\n\nOutput format:\nA single integer, the maximum number of content children.",
    "starter_code": "# Maximize the number of content children by assigning cookies.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "1 1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "10 9 8 7",
          "5 6 7 8"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_160",
    "title": "Can Place Flowers",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\nGiven an integer array `flowerbed` containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer `n`, return `true` if `n` new flowers can be planted in the `flowerbed` without violating the no-adjacent-flowers rule and `false` otherwise.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `flowerbed` (0s and 1s).\nSecond line: An integer `n`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if N new flowers can be planted in a flowerbed.",
    "test_cases": [
      {
        "input": [
          "1 0 0 0 1",
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 0 0 0 1",
          "2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_161",
    "title": "Non-overlapping Intervals",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of intervals `intervals` where `intervals[i] = [start_i, end_i]`, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n\n**Constraints**\nInput format:\nEach line represents an interval `start end`. Input ends with a blank line.\n\nOutput format:\nA single integer, the minimum number of intervals to remove.",
    "starter_code": "# Find the minimum number of intervals to remove to make the rest non-overlapping.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "2 3",
          "3 4",
          "1 3",
          ""
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 2",
          "1 2",
          "1 2",
          ""
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_162",
    "title": "Merge Intervals",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of `intervals` where `intervals[i] = [start_i, end_i]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\n**Constraints**\nInput format:\nEach line represents an interval `start end`. Input ends with a blank line.\n\nOutput format:\nEach merged interval on a new line, formatted as `start end`.",
    "starter_code": "# Merge all overlapping intervals.",
    "test_cases": [
      {
        "input": [
          "1 3",
          "2 6",
          "8 10",
          "15 18",
          ""
        ],
        "expected_output": "1 6\n8 10\n15 18"
      },
      {
        "input": [
          "1 4",
          "4 5",
          ""
        ],
        "expected_output": "1 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_163",
    "title": "Insert Interval",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of non-overlapping intervals `intervals` sorted by their start times, and a new interval `newInterval`. Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `start_i` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary). Return `intervals` after the insertion.\n\n**Constraints**\nInput format:\nFirst, lines representing existing `intervals` (`start end`), ending with a blank line.\nThen, a line representing `newInterval` (`start end`).\n\nOutput format:\nEach resulting interval on a new line, formatted as `start end`.",
    "starter_code": "# Insert a new interval into a list of non-overlapping intervals and merge if necessary.",
    "test_cases": [
      {
        "input": [
          "1 3",
          "6 9",
          "",
          "2 5"
        ],
        "expected_output": "1 5\n6 9"
      },
      {
        "input": [
          "1 2",
          "3 5",
          "6 7",
          "8 10",
          "12 16",
          "",
          "4 8"
        ],
        "expected_output": "1 2\n3 10\n12 16"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_164",
    "title": "Queue Reconstruction by Height",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of people `people`, where `people[i] = [h_i, k_i]` represents the `i`th person. `h_i` is the height of the `i`th person, and `k_i` is the number of people standing in front of the `i`th person who have a height greater than or equal to `h_i`. Reconstruct and return the queue that is represented by this array of people.\n\n**Constraints**\nInput format:\nEach line represents a person `h k`. Input ends with a blank line.\n\nOutput format:\nEach person `h k` on a new line, representing the reconstructed queue.",
    "starter_code": "# Reconstruct a queue of people given their heights and number of people in front.",
    "test_cases": [
      {
        "input": [
          "7 0",
          "4 4",
          "7 1",
          "5 0",
          "6 1",
          "5 2",
          ""
        ],
        "expected_output": "5 0\n7 0\n5 2\n6 1\n4 4\n7 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_165",
    "title": "Task Scheduler",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU can either finish one task or be idle.\nHowever, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is, between two executions of the same task, there must be at least `n` units of time. Return the least number of units of time that the CPU will take to finish all the given tasks.\n\n**Constraints**\nInput format:\nFirst line: A string representing `tasks` (e.g., \"AAABBC\").\nSecond line: An integer `n`.\n\nOutput format:\nA single integer, the least number of units of time.",
    "starter_code": "# Find the least number of intervals the CPU will take to finish all given tasks.",
    "test_cases": [
      {
        "input": [
          "AAABBC",
          "2"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "AAACCC",
          "1"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_166",
    "title": "Kth Largest Element in an Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return the `k`th largest element in the array. Note that it is the `k`th largest element in the sorted order, not the `k`th distinct element.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the `k`th largest element.",
    "starter_code": "# Find the Kth largest element in an unsorted array.",
    "test_cases": [
      {
        "input": [
          "3 2 1 5 6 4",
          "2"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "3 2 3 1 2 4 5 5 6",
          "4"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_167",
    "title": "Sort Colors (Dutch National Flag Problem)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function.\n\n**Constraints**\nInput format:\nA single line of space-separated integers (0, 1, or 2).\n\nOutput format:\nA single line of space-separated integers, the sorted array.",
    "starter_code": "# Sort an array with 0s, 1s, and 2s in-place.",
    "test_cases": [
      {
        "input": [
          "2 0 2 1 1 0"
        ],
        "expected_output": "0 0 1 1 2 2"
      },
      {
        "input": [
          "2 0 1"
        ],
        "expected_output": "0 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_168",
    "title": "Daily Temperatures",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `temperatures` represents the daily temperatures, return an array `answer` such that `answer[i]` is the number of days you have to wait after the `i`th day to get a warmer temperature. If there is no future day for which this is possible, keep `answer[i] == 0` instead.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `temperatures`.\n\nOutput format:\nA single line of space-separated integers, the `answer` array.",
    "starter_code": "# For each day, calculate how many days to wait until a warmer temperature.",
    "test_cases": [
      {
        "input": [
          "73 74 75 71 69 72 76 73"
        ],
        "expected_output": "1 1 4 2 1 1 0 0"
      },
      {
        "input": [
          "30 40 50 60"
        ],
        "expected_output": "1 1 1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_169",
    "title": "Subarray Sum Equals K",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals `k`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the total number of subarrays.",
    "starter_code": "# Find the total number of continuous subarrays whose sum equals K.",
    "test_cases": [
      {
        "input": [
          "1 1 1",
          "2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1 2 3",
          "3"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_170",
    "title": "Find Peak Element",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA peak element is an element that is strictly greater than its neighbors. Given a 0-indexed integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that `nums[-1] = nums[n] = -infinity`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the index of a peak element.",
    "starter_code": "# Find a peak element in an array.",
    "test_cases": [
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "1 2 1 3 5 6 4"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_171",
    "title": "Find Minimum in Rotated Sorted Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nSuppose an array of length `n` sorted in ascending order is rotated an unknown number of times. Given the sorted rotated array `nums` of unique elements, return the minimum element of this array. You must write an algorithm that runs in `O(log n)` time.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the minimum element.",
    "starter_code": "# Find the minimum element in a rotated sorted array.",
    "test_cases": [
      {
        "input": [
          "3 4 5 1 2"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4 5 6 7 0 1 2"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_172",
    "title": "Find Minimum in Rotated Sorted Array II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nSuppose an array of length `n` sorted in ascending order is rotated an unknown number of times. Given the sorted rotated array `nums` that may contain duplicates, return the minimum element of this array. You must write an algorithm that runs in `O(log n)` time.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the minimum element.",
    "starter_code": "# Find the minimum element in a rotated sorted array with duplicates.",
    "test_cases": [
      {
        "input": [
          "1 3 5"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "2 2 2 0 1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_173",
    "title": "Search in Rotated Sorted Array",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is an integer array `nums` sorted in ascending order (with distinct values). Prior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k` (0 <= k < nums.length) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]`. Given the array `nums` and an integer `target`, return the index of `target` if it is in `nums`, or -1 otherwise. You must write an algorithm with `O(log n)` runtime complexity.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `target`.\n\nOutput format:\nA single integer, the index of `target` or -1.",
    "starter_code": "# Search for a target value in a rotated sorted array.",
    "test_cases": [
      {
        "input": [
          "4 5 6 7 0 1 2",
          "0"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "4 5 6 7 0 1 2",
          "3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_174",
    "title": "Search a 2D Matrix",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite an efficient algorithm that searches for a `target` value in an `m x n` integer matrix. This matrix has the following properties:\n- Integers in each row are sorted in ascending order.\n- The first integer of each row is greater than the last integer of the previous row.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for matrix dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers.\nLast line: An integer `target`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Search for a target value in an m x n integer matrix with sorted rows and increasing first elements.",
    "test_cases": [
      {
        "input": [
          "3 4",
          "1 3 5 7",
          "10 11 16 20",
          "23 30 34 60",
          "3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 4",
          "1 3 5 7",
          "10 11 16 20",
          "23 30 34 60",
          "13"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_175",
    "title": "Search a 2D Matrix II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite an efficient algorithm that searches for a `target` value in an `m x n` integer matrix. This matrix has the following properties:\n- Integers in each row are sorted in ascending order.\n- Integers in each column are sorted in ascending order.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for matrix dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers.\nLast line: An integer `target`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Search for a target value in an m x n integer matrix where rows and columns are sorted.",
    "test_cases": [
      {
        "input": [
          "5 5",
          "1 4 7 11 15",
          "2 5 8 12 19",
          "3 6 9 16 22",
          "10 13 14 17 24",
          "18 21 23 26 30",
          "5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5 5",
          "1 4 7 11 15",
          "2 5 8 12 19",
          "3 6 9 16 22",
          "10 13 14 17 24",
          "18 21 23 26 30",
          "20"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_176",
    "title": "Longest Consecutive Sequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in `O(n)` time.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the length of the longest consecutive sequence.",
    "starter_code": "# Find the length of the longest consecutive elements sequence.",
    "test_cases": [
      {
        "input": [
          "100 4 200 1 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 3 7 2 5 8 4 6 0 1"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_177",
    "title": "Group Anagrams",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of strings `strs`, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format:\nA single line of space-separated strings for `strs`.\n\nOutput format:\nEach group of anagrams on a new line, with words space-separated (order within groups and of groups does not matter, but words in a group should be sorted alphabetically).",
    "starter_code": "# Group anagrams together.",
    "test_cases": [
      {
        "input": [
          "eat tea tan ate nat bat"
        ],
        "expected_output": "bat\neat tea ate\nnat tan"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_178",
    "title": "Set Matrix Zeroes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` integer matrix, if an element is 0, set its entire row and column to 0's. You must do it in-place.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for matrix dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers.\n\nOutput format:\nThe modified matrix, with each row on a new line and elements space-separated.",
    "starter_code": "# If an element is 0, set its entire row and column to 0.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 1 1",
          "1 0 1",
          "1 1 1"
        ],
        "expected_output": "1 0 1\n0 0 0\n1 0 1"
      },
      {
        "input": [
          "3 4",
          "0 1 2 0",
          "3 4 5 2",
          "1 3 1 5"
        ],
        "expected_output": "0 0 0 0\n0 4 5 0\n0 3 1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_179",
    "title": "Spiral Matrix",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` matrix, return all elements of the matrix in spiral order.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for matrix dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers.\n\nOutput format:\nA single line of space-separated integers, the elements in spiral order.",
    "starter_code": "# Traverse a matrix in spiral order.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "1 2 3 6 9 8 7 4 5"
      },
      {
        "input": [
          "3 4",
          "1 2 3 4",
          "5 6 7 8",
          "9 10 11 12"
        ],
        "expected_output": "1 2 3 4 8 12 11 10 9 5 6 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_180",
    "title": "Spiral Matrix II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a positive integer `n`, generate an `n x n` matrix filled with elements from 1 to `n^2` in spiral order.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\nThe generated matrix, with each row on a new line and elements space-separated.",
    "starter_code": "# Generate an n x n matrix filled with elements in spiral order.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 3\n8 9 4\n7 6 5"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_181",
    "title": "Jump Game",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums`. You are initially positioned at the array's first index, and each element in `nums` represents your maximum jump length at that position. Return `true` if you can reach the last index, or `false` otherwise.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if you can reach the last index in a jump game.",
    "test_cases": [
      {
        "input": [
          "2 3 1 1 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 2 1 0 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_182",
    "title": "Jump Game II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of non-negative integers `nums`, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. You can assume that you can always reach the last index.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the minimum number of jumps.",
    "starter_code": "# Find the minimum number of jumps to reach the last index.",
    "test_cases": [
      {
        "input": [
          "2 3 1 1 4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 3 0 1 4"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_183",
    "title": "Gas Station",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are `n` gas stations along a circular route, where the amount of gas at the `i`th station is `gas[i]`. You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `i`th station to the `(i + 1)`th station. You begin the journey with an empty tank at one of the gas stations. Return the starting gas station's index if you can travel all around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `gas`.\nSecond line: Space-separated integers for `cost`.\n\nOutput format:\nA single integer, the starting gas station's index or -1.",
    "starter_code": "# Find a starting gas station such that you can travel all around the circuit once.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3 4 5 1 2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 3 4",
          "3 4 3"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_184",
    "title": "Candy",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are `n` children standing in a line. Each child is assigned a `rating` value. You are giving candies to these children subjected to the following requirements:\n1. Each child must have at least one candy.\n2. Children with a higher `rating` get more candies than their neighbors.\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `ratings`.\n\nOutput format:\nA single integer, the minimum number of candies required.",
    "starter_code": "# Calculate the minimum candies needed to distribute to children based on ratings.",
    "test_cases": [
      {
        "input": [
          "1 0 2"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1 2 2"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_185",
    "title": "Trapping Rain Water",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven `n` non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\n**Constraints**\nInput format:\nA single line of space-separated non-negative integers for `height`.\n\nOutput format:\nA single integer, the total amount of water trapped.",
    "starter_code": "# Compute how much water can be trapped after raining.",
    "test_cases": [
      {
        "input": [
          "0 1 0 2 1 0 1 3 2 1 2 1"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "4 2 0 3 2 5"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_186",
    "title": "Container With Most Water",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`. Find two such lines that, together with the x-axis, form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container.\n\n**Constraints**\nInput format:\nA single line of space-separated non-negative integers for `height`.\n\nOutput format:\nA single integer, the maximum amount of water the container can store.",
    "starter_code": "# Find two lines that form a container with the most water.",
    "test_cases": [
      {
        "input": [
          "1 8 6 2 5 4 8 3 7"
        ],
        "expected_output": "49"
      },
      {
        "input": [
          "1 1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_187",
    "title": "Product of Array Except Self",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. You must write an algorithm that runs in `O(n)` time and without using the division operation.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single line of space-separated integers, the `answer` array.",
    "starter_code": "# Return an array where each element is the product of all other elements.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "24 12 8 6"
      },
      {
        "input": [
          "-1 1 0 -3 3"
        ],
        "expected_output": "0 0 9 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_188",
    "title": "Majority Element",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` of size `n`, return the majority element. The majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the majority element.",
    "starter_code": "# Find the majority element in an array.",
    "test_cases": [
      {
        "input": [
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2 2 1 1 1 2 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_189",
    "title": "Majority Element II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array of size `n`, find all elements that appear more than `\u230an / 3\u230b` times. The algorithm should run in linear time and in `O(1)` space.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single line of space-separated integers, the majority elements (sorted in ascending order).",
    "starter_code": "# Find all elements that appear more than n/3 times.",
    "test_cases": [
      {
        "input": [
          "3 2 3"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 2"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_190",
    "title": "Missing Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the missing number.",
    "starter_code": "# Find the missing number in an array.",
    "test_cases": [
      {
        "input": [
          "3 0 1"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "9 6 4 2 3 5 7 0 1"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_191",
    "title": "Find the Duplicate Number",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one duplicate number in `nums`, return this duplicate number. You must solve this problem without modifying the array `nums` and uses only constant extra space.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the duplicate number.",
    "starter_code": "# Find the duplicate number in an array.",
    "test_cases": [
      {
        "input": [
          "1 3 4 2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3 1 3 4 2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_192",
    "title": "Game of Life",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` binary grid `board` representing a game of life. The game has four rules:\n1. Any live cell with fewer than two live neighbors dies as if by under-population.\n2. Any live cell with two or three live neighbors lives on to the next generation.\n3. Any live cell with more than three live neighbors dies as if by over-population.\n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nImplement the function to compute the next state of the `board` (in-place). Use `0` for dead and `1` for live. You must do this in-place and in `O(1)` extra space.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the grid as space-separated integers (0s and 1s).\n\nOutput format:\nThe modified grid representing the next state, with each row on a new line and elements space-separated.",
    "starter_code": "# Implement Conway's Game of Life in-place.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "0 1 0",
          "0 0 1",
          "1 1 1"
        ],
        "expected_output": "0 0 0\n1 0 1\n0 1 1"
      },
      {
        "input": [
          "4 3",
          "1 1 1",
          "1 0 1",
          "1 1 1",
          "0 0 0"
        ],
        "expected_output": "1 0 1\n0 0 0\n1 0 1\n0 0 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_193",
    "title": "Palindrome Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, return `true` if it is a palindrome or `false` otherwise.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the linked list nodes (ending with -1 for null).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a singly linked list is a palindrome.",
    "test_cases": [
      {
        "input": [
          "1 2 2 1 -1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 -1"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_194",
    "title": "Odd Even Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. The first node is considered odd, and the second node is even, and so on. You should try to do it in `O(1)` space complexity and `O(n)` time complexity.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the reordered linked list.",
    "starter_code": "# Group all odd nodes together followed by the even nodes in a linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1"
        ],
        "expected_output": "1 3 5 2 4"
      },
      {
        "input": [
          "2 1 3 5 6 4 7 -1"
        ],
        "expected_output": "2 3 6 7 1 5 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_195",
    "title": "Reverse Linked List II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to `right`, and return the reversed list.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the linked list nodes (ending with -1 for null).\nSecond line: An integer `left`.\nThird line: An integer `right`.\n\nOutput format:\nA single line of space-separated integers representing the modified linked list.",
    "starter_code": "# Reverse a linked list from position left to right.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1",
          "2",
          "4"
        ],
        "expected_output": "1 4 3 2 5"
      },
      {
        "input": [
          "5 -1",
          "1",
          "1"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_196",
    "title": "Reorder List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given the `head` of a singly linked list `L: L0 \u2192 L1 \u2192 \u2026 \u2192 Ln-1 \u2192 Ln`. Reorder the list to be on the form `L0 \u2192 Ln \u2192 L1 \u2192 Ln-1 \u2192 L2 \u2192 Ln-2 \u2192 \u2026`. You may not modify the values in the list's nodes. Only nodes themselves may be changed.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the reordered linked list.",
    "starter_code": "# Reorder a singly linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 -1"
        ],
        "expected_output": "1 4 2 3"
      },
      {
        "input": [
          "1 2 3 4 5 -1"
        ],
        "expected_output": "1 5 2 4 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_197",
    "title": "Copy List with Random Pointer",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`. Construct a deep copy of the list. The deep copy should consist of exactly `n` brand new nodes, where each new node has its `val` set to the `val` of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the deep copy. Return the head of the copied linked list.\n\n**Constraints**\nInput format:\nEach node `val` and `random` pointer target index. `random` index of -1 means null. Example: `1,2 2,0 3,null` means node 1 has value 1, its random points to node at index 2. Node 2 has value 2, its random points to node at index 0. Node 3 has value 3, its random points to null. Input ends with a blank line. Indices are 0-based.\n\nOutput format:\nA single line of space-separated integers representing the copied list (value and random target index, or -1 for null).",
    "starter_code": "# Copy a linked list with random pointers.",
    "test_cases": [
      {
        "input": [
          "7,null",
          "13,0",
          "11,4",
          "10,2",
          "1,0",
          ""
        ],
        "expected_output": "7,null 13,0 11,4 10,2 1,0"
      },
      {
        "input": [
          "1,1",
          "2,1",
          ""
        ],
        "expected_output": "1,1 2,1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_198",
    "title": "Add Two Numbers II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. You must not reverse the input lists.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing linked list `l1` nodes (ending with -1 for null).\nSecond line: Space-separated integers representing linked list `l2` nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the sum linked list.",
    "starter_code": "# Add two numbers represented as linked lists where most significant digit comes first.",
    "test_cases": [
      {
        "input": [
          "7 2 4 3 -1",
          "5 6 4 -1"
        ],
        "expected_output": "7 8 0 7"
      },
      {
        "input": [
          "2 4 3 -1",
          "5 6 4 -1"
        ],
        "expected_output": "8 0 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_199",
    "title": "Minimum Window Substring",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return an empty string. The test cases will be generated such that the answer is unique.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `t`.\n\nOutput format:\nA single string, the minimum window substring.",
    "starter_code": "# Find the smallest substring in s which contains all characters of t.",
    "test_cases": [
      {
        "input": [
          "ADOBECODEBANC",
          "ABC"
        ],
        "expected_output": "BANC"
      },
      {
        "input": [
          "a",
          "a"
        ],
        "expected_output": "a"
      },
      {
        "input": [
          "a",
          "aa"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_200",
    "title": "Longest Substring with At Most Two Distinct Characters",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the length of the longest substring `s` that contains at most two distinct characters.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the length of the longest substring.",
    "starter_code": "# Find the length of the longest substring with at most two distinct characters.",
    "test_cases": [
      {
        "input": [
          "eceba"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "ccaabbb"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_201",
    "title": "Permutation in String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s1` and `s2`, return `true` if `s2` contains a permutation of `s1`, or `false` otherwise. In other words, return `true` if one of `s1`'s permutations is the substring of `s2`.\n\n**Constraints**\nInput format:\nFirst line: String `s1`.\nSecond line: String `s2`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if s2 contains a permutation of s1.",
    "test_cases": [
      {
        "input": [
          "ab",
          "eidbaooo"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "ab",
          "eidboaoo"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_202",
    "title": "Find All Anagrams in a String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `p`, return an array of all the start indices of `p`'s anagrams in `s`. You may return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `p`.\n\nOutput format:\nA single line of space-separated integers, the start indices (sorted in ascending order).",
    "starter_code": "# Find all the start indices of p's anagrams in s.",
    "test_cases": [
      {
        "input": [
          "cbaebabacd",
          "abc"
        ],
        "expected_output": "0 6"
      },
      {
        "input": [
          "abab",
          "ab"
        ],
        "expected_output": "0 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_203",
    "title": "Sliding Window Maximum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\nA single line of space-separated integers, the maximums in each sliding window.",
    "starter_code": "# Find the maximum in each sliding window.",
    "test_cases": [
      {
        "input": [
          "1 3 -1 -3 5 3 6 7",
          "3"
        ],
        "expected_output": "3 3 5 5 6 7"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_204",
    "title": "Longest Substring with At Most K Distinct Characters",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the length of the longest substring.",
    "starter_code": "# Find the length of the longest substring with at most K distinct characters.",
    "test_cases": [
      {
        "input": [
          "eceba",
          "2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "aa",
          "1"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_205",
    "title": "Subarrays with K Different Integers",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return the number of good subarrays of `nums`. A good subarray is a subarray where the number of unique integers in it is exactly `k`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the number of good subarrays.",
    "starter_code": "# Find the number of subarrays with exactly K different integers.",
    "test_cases": [
      {
        "input": [
          "1 2 1 2 3",
          "2"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "1 2 1 3 4",
          "3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_206",
    "title": "Shortest Subarray with Sum at Least K",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nReturn the length of the shortest, non-empty subarray of `nums` with a sum of at least `k`. If there is no such subarray, return -1.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the length of the shortest subarray or -1.",
    "starter_code": "# Find the length of the shortest, non-empty subarray with a sum of at least K.",
    "test_cases": [
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 2",
          "4"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "2 -1 2",
          "3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_207",
    "title": "Maximal Square",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a `m x n` binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for matrix dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers (0s and 1s).\n\nOutput format:\nA single integer, the area of the largest square.",
    "starter_code": "# Find the largest square containing only '1's in a 2D binary matrix.",
    "test_cases": [
      {
        "input": [
          "4 5",
          "1 0 1 0 0",
          "1 0 1 1 1",
          "1 1 1 1 1",
          "1 0 0 1 0"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2 2",
          "0 1",
          "1 0"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_208",
    "title": "Perfect Squares",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the least number of perfect square numbers that sum to `n`. A perfect square is an integer that is the square of an integer; for example, 1, 4, 9, and 16 are perfect squares.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\nA single integer, the least number of perfect square numbers.",
    "starter_code": "# Find the least number of perfect square numbers which sum to N.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "13"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_209",
    "title": "Range Sum Query - Immutable",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, handle multiple queries of the following type:\nCalculate the sum of the elements of `nums` between indices `left` and `right` inclusive where `left <= right`.\nImplement the `NumArray` class:\n`NumArray(int[] nums)` initializes the object with the integer array `nums`.\n`int sumRange(int left, int right)` returns the sum of the elements of `nums` between indices `left` and `right` inclusive (i.e., `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nNext lines: Queries, each with two integers `left` and `right`. End input with a blank line.\n\nOutput format:\nEach query result on a new line.",
    "starter_code": "# Implement NumArray for range sum query.",
    "test_cases": [
      {
        "input": [
          "-2 0 3 -5 2 -1",
          "0 2",
          "2 5",
          "0 5",
          ""
        ],
        "expected_output": "1\n-1\n-3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_210",
    "title": "Range Sum Query 2D - Immutable",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a 2D matrix `matrix`, handle multiple queries of the following type:\nCalculate the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.\nImplement the `NumMatrix` class:\n`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.\n`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements inside the rectangle defined by `(row1, col1)` and `(row2, col2)`.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for matrix dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers.\nNext lines: Queries, each with four integers `row1 col1 row2 col2`. End input with a blank line.\n\nOutput format:\nEach query result on a new line.",
    "starter_code": "# Implement NumMatrix for 2D range sum query.",
    "test_cases": [
      {
        "input": [
          "5 5",
          "3 0 1 4 2",
          "5 6 3 2 1",
          "1 2 0 1 5",
          "4 1 0 1 7",
          "1 0 3 0 5",
          "2 1 4 3",
          "1 1 2 2",
          "1 2 2 4",
          ""
        ],
        "expected_output": "8\n11\n12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_211",
    "title": "House Robber",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses are broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\n**Constraints**\nInput format:\nA single line of space-separated non-negative integers for `nums`.\n\nOutput format:\nA single integer, the maximum amount of money you can rob.",
    "starter_code": "# Maximize the amount of money you can rob from houses without robbing adjacent ones.",
    "test_cases": [
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "2 7 9 3 1"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_212",
    "title": "House Robber II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security systems connected, and it will automatically contact the police if two adjacent houses are broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\n**Constraints**\nInput format:\nA single line of space-separated non-negative integers for `nums`.\n\nOutput format:\nA single integer, the maximum amount of money you can rob.",
    "starter_code": "# Maximize the amount of money you can rob from houses arranged in a circle.",
    "test_cases": [
      {
        "input": [
          "2 3 2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 2 3 1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_213",
    "title": "House Robber III",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`. Besides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night. Given the `root` of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the maximum amount of money the thief can rob.",
    "starter_code": "# Maximize the amount of money you can rob from houses arranged in a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 2 3 null 3 null 1"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "3 4 5 1 3 null 1"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_214",
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n- After you sell your stock, you cannot buy stock on the next day (i.e., cooldown period is one day).\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `prices`.\n\nOutput format:\nA single integer, the maximum profit.",
    "starter_code": "# Maximize profit from stock transactions with a cooldown period.",
    "test_cases": [
      {
        "input": [
          "1 2 3 0 2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_215",
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `i`th day, and an integer `fee` representing a transaction fee. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). Find the maximum profit you can achieve.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `prices`.\nSecond line: An integer `fee`.\n\nOutput format:\nA single integer, the maximum profit.",
    "starter_code": "# Maximize profit from stock transactions with a transaction fee.",
    "test_cases": [
      {
        "input": [
          "1 3 2 8 4 9",
          "2"
        ],
        "expected_output": "8"
      },
      {
        "input": [
          "1 3 7 5 10 3",
          "3"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_216",
    "title": "Count Numbers with Unique Digits",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10^n`.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\nA single integer, the count of numbers with unique digits.",
    "starter_code": "# Count the number of positive integers less than 10^n that have unique digits.",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "91"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_217",
    "title": "Smallest Subtree with All the Deepest Nodes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the smallest subtree that contains all the deepest nodes in the tree.\nA node is deepest if it has the largest depth possible among any node in the entire tree.\nThe depth of a node is the number of nodes from the root to that node. The value of `root.val` will be returned (since it's a node, this is a proxy for the actual node).\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the value of the root of the smallest subtree containing all deepest nodes.",
    "starter_code": "# Find the smallest subtree that contains all the deepest nodes.",
    "test_cases": [
      {
        "input": [
          "3 5 1 6 2 0 8 null null 7 4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "0 1 3 null 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_218",
    "title": "Convert BST to Greater Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every node's value is changed to the original value plus the sum of all nodes' original values that are greater than or equal to the original node's value. The `root.val` of the converted tree will be returned (since it's a node, this is a proxy for the actual node).\n\n**Constraints**\nInput format:\nLevel-order traversal of the BST, with 'null' for missing nodes (space-separated).\n\nOutput format:\nLevel-order traversal of the converted Greater Tree, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Convert a BST to a Greater Tree.",
    "test_cases": [
      {
        "input": [
          "4 1 6 0 2 5 7 null null null 3 null null null 8"
        ],
        "expected_output": "30 36 21 36 35 26 15 null null null 33 null null null 8"
      },
      {
        "input": [
          "0 null 1"
        ],
        "expected_output": "1 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_219",
    "title": "Validate Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if a binary tree is a valid BST.",
    "test_cases": [
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5 1 4 null null 3 6"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_220",
    "title": "Convert Sorted List to Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\nReturn the root of the constructed BST. The value of `root.val` will be returned.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the sorted linked list nodes (ending with -1 for null).\n\nOutput format:\nLevel-order traversal of the constructed BST, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Convert a sorted singly-linked list to a height-balanced BST.",
    "test_cases": [
      {
        "input": [
          "-10 -3 0 5 9 -1"
        ],
        "expected_output": "0 -3 9 -10 null 5 null"
      },
      {
        "input": [
          " -1 -1"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_221",
    "title": "Convert Sorted Array to Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\nReturn the root of the constructed BST. The value of `root.val` will be returned.\n\n**Constraints**\nInput format:\nA single line of space-separated sorted integers for `nums`.\n\nOutput format:\nLevel-order traversal of the constructed BST, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Convert a sorted array to a height-balanced BST.",
    "test_cases": [
      {
        "input": [
          "-10 -3 0 5 9"
        ],
        "expected_output": "0 -3 9 -10 null 5 null"
      },
      {
        "input": [
          "1 3"
        ],
        "expected_output": "3 1 null"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_222",
    "title": "Path Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`. A leaf is a node with no children.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\nSecond line: An integer `targetSum`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if there exists a root-to-leaf path that sums to targetSum.",
    "test_cases": [
      {
        "input": [
          "5 4 8 11 null 13 4 7 2 null null null 1",
          "22"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3",
          "5"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_223",
    "title": "Path Sum II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where the sum of the node values in the path equals `targetSum`. Each path should be returned as a list of the node values, not node references. A leaf is a node with no children.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\nSecond line: An integer `targetSum`.\n\nOutput format:\nEach path on a new line, with node values space-separated. Paths should be sorted by their first element, then second, and so on.",
    "starter_code": "# Find all root-to-leaf paths where each path's sum equals a given target sum.",
    "test_cases": [
      {
        "input": [
          "5 4 8 11 null 13 4 7 2 null null 5 1",
          "22"
        ],
        "expected_output": "5 4 11 2\n5 8 4 5"
      },
      {
        "input": [
          "1 2 3",
          "5"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_224",
    "title": "Path Sum III",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree and an integer `targetSum`, return the number of paths that sum to `targetSum`. A path does not need to start at the root or end at a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\nSecond line: An integer `targetSum`.\n\nOutput format:\nA single integer, the number of paths.",
    "starter_code": "# Find the number of paths that sum to a given value in a binary tree.",
    "test_cases": [
      {
        "input": [
          "10 5 -3 3 2 null 11 3 -2 null 1",
          "8"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "5 4 8 11 null 13 4 7 2 null null null 1",
          "22"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_225",
    "title": "Sum Root to Leaf Numbers",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given the `root` of a binary tree containing digits from 0 to 9 only. Each root-to-leaf path in the tree represents a number. For example, if the path is `1 -> 2 -> 3`, then the number represented is `123`. Return the total sum of all root-to-leaf numbers.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the total sum of all root-to-leaf numbers.",
    "starter_code": "# Find the total sum of all root-to-leaf numbers in a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "25"
      },
      {
        "input": [
          "4 9 0 5 1"
        ],
        "expected_output": "1026"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_226",
    "title": "Minimum Depth of Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. A leaf node is a node with no children.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the minimum depth of the binary tree.",
    "starter_code": "# Find the minimum depth of a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 null 3 null 4 null 5 null 6"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_227",
    "title": "Maximum Depth of Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the maximum depth of the binary tree.",
    "starter_code": "# Find the maximum depth of a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 null 2"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_228",
    "title": "Symmetric Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check whether a binary tree is symmetric around its center.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 4 4 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 2 null 3 null 3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_229",
    "title": "Invert Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, invert the tree, and return its root. The value of `root.val` will be returned.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nLevel-order traversal of the inverted tree, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Invert a binary tree.",
    "test_cases": [
      {
        "input": [
          "4 2 7 1 3 6 9"
        ],
        "expected_output": "4 7 2 9 6 3 1"
      },
      {
        "input": [
          "2 1 3"
        ],
        "expected_output": "2 3 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_230",
    "title": "Binary Tree Right Side View",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single line of space-separated integers, the right side view of the tree.",
    "starter_code": "# Return the values of the nodes you can see from the right side of a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3 null 5 null 4"
        ],
        "expected_output": "1 3 4"
      },
      {
        "input": [
          "1 null 3"
        ],
        "expected_output": "1 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_231",
    "title": "Cousins in Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree with unique node values, and two integers `x` and `y`, return `true` if `x` and `y` are cousins, or `false` otherwise. Two nodes of a binary tree are cousins if they have the same depth with different parents.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\nSecond line: An integer `x`.\nThird line: An integer `y`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if two nodes are cousins in a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "4",
          "3"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1 2 3 null 4 null 5",
          "5",
          "4"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_232",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).\nReturn the value of the LCA node.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\nSecond line: An integer `p_val` (value of node p).\nThird line: An integer `q_val` (value of node q).\n\nOutput format:\nA single integer, the value of the LCA.",
    "starter_code": "# Find the lowest common ancestor of two given nodes in a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 5 1 6 2 0 8 null null 7 4",
          "5",
          "1"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "3 5 1 6 2 0 8 null null 7 4",
          "5",
          "4"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_233",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a Binary Search Tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `BST` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).\nReturn the value of the LCA node.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the BST, with 'null' for missing nodes (space-separated).\nSecond line: An integer `p_val` (value of node p).\nThird line: An integer `q_val` (value of node q).\n\nOutput format:\nA single integer, the value of the LCA.",
    "starter_code": "# Find the lowest common ancestor of two given nodes in a BST.",
    "test_cases": [
      {
        "input": [
          "6 2 8 0 4 7 9 null null 3 5",
          "2",
          "8"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "6 2 8 0 4 7 9 null null 3 5",
          "2",
          "4"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_234",
    "title": "Implement Trie (Prefix Tree)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement a Trie (Prefix Tree) with the following methods:\n- `Trie()`: Initializes the trie object.\n- `void insert(String word)`: Inserts the string `word` into the trie.\n- `boolean search(String word)`: Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.\n- `boolean startsWith(String prefix)`: Returns `true` if there is a previously inserted string `word` that has the `prefix`, and `false` otherwise.\n\n**Constraints**\nInput format:\nEach line represents an operation: `insert word`, `search word`, or `startsWith prefix`. End input with a blank line.\n\nOutput format:\nFor `search` and `startsWith` operations, output 'True' or 'False' on a new line.",
    "starter_code": "# Implement a Trie (Prefix Tree).",
    "test_cases": [
      {
        "input": [
          "insert apple",
          "search apple",
          "search app",
          "startsWith app",
          "insert app",
          "search app",
          ""
        ],
        "expected_output": "True\nFalse\nTrue\nTrue"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_235",
    "title": "Add and Search Word - Data structure design",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign a data structure that supports adding new words and searching a dictionary for words that match a given pattern.\nImplement the `WordDictionary` class:\n- `WordDictionary()` Initializes the object.\n- `void addWord(String word)` Adds `word` to the data structure, it may contain dots '.'.\n- `boolean search(String word)` Returns `true` if there is any word in the data structure that matches `word` or `false` otherwise. A `.` can represent any one letter.\n\n**Constraints**\nInput format:\nEach line represents an operation: `addWord word` or `search pattern`. End input with a blank line.\n\nOutput format:\nFor `search` operations, output 'True' or 'False' on a new line.",
    "starter_code": "# Design a data structure that supports adding new words and searching a dictionary for words that match a given pattern.",
    "test_cases": [
      {
        "input": [
          "addWord bad",
          "addWord dad",
          "addWord mad",
          "search pad",
          "search bad",
          "search .ad",
          "search b..",
          ""
        ],
        "expected_output": "False\nTrue\nTrue\nTrue"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_236",
    "title": "Design HashMap",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign a HashMap without using any built-in hash map library. Implement the `MyHashMap` class:\n- `MyHashMap()`: Initializes the object with an empty map.\n- `void put(int key, int value)`: Inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the value.\n- `int get(int key)`: Returns the value to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.\n- `void remove(int key)`: Removes the `key` and its corresponding value if the map contains the `key`.\n\n**Constraints**\nInput format:\nEach line represents an operation: `put key value`, `get key`, or `remove key`. End input with a blank line.\n\nOutput format:\nFor `get` operations, output the result on a new line.",
    "starter_code": "# Design a HashMap without using any built-in hash map library.",
    "test_cases": [
      {
        "input": [
          "put 1 1",
          "put 2 2",
          "get 1",
          "get 3",
          "put 2 1",
          "get 2",
          "remove 2",
          "get 2",
          ""
        ],
        "expected_output": "1\n-1\n1\n-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_237",
    "title": "Design HashSet",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign a HashSet without using any built-in hash table libraries. Implement the `MyHashSet` class:\n- `MyHashSet()`: Initializes the object with an empty hash set.\n- `void add(int key)`: Inserts the value `key` into the HashSet.\n- `boolean contains(int key)`: Returns `true` if this set contains the specified element `key`, `false` otherwise.\n- `void remove(int key)`: Removes the specified value `key` in the HashSet. If `key` does not exist in the set, do nothing.\n\n**Constraints**\nInput format:\nEach line represents an operation: `add key`, `contains key`, or `remove key`. End input with a blank line.\n\nOutput format:\nFor `contains` operations, output 'True' or 'False' on a new line.",
    "starter_code": "# Design a HashSet without using any built-in hash set library.",
    "test_cases": [
      {
        "input": [
          "add 1",
          "add 2",
          "contains 1",
          "contains 3",
          "add 2",
          "contains 2",
          "remove 2",
          "contains 2",
          ""
        ],
        "expected_output": "True\nFalse\nTrue\nFalse"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_238",
    "title": "Number of Islands",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` 2D binary grid `grid` which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the grid as space-separated characters ('0' or '1').\n\nOutput format:\nA single integer, the number of islands.",
    "starter_code": "# Given a 2D binary grid, return the number of islands.",
    "test_cases": [
      {
        "input": [
          "4 5",
          "1 1 1 1 0",
          "1 1 0 1 0",
          "1 1 0 0 0",
          "0 0 0 0 0"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4 5",
          "1 1 0 0 0",
          "1 1 0 0 0",
          "0 0 1 0 0",
          "0 0 0 1 1"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_239",
    "title": "Walls and Gates",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an `m x n` grid `rooms` initialized with three possible values:\n- `-1` which means a wall or an obstacle.\n- `0` which means a gate.\n- `INF` (represented by `2147483647`) which means an empty room.\nFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, leave `INF` as the value. The distance is calculated using Manhattan distance.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the grid as space-separated integers (-1, 0, or 2147483647).\n\nOutput format:\nThe modified grid, with each row on a new line and elements space-separated.",
    "starter_code": "# Fill each empty room with the distance to its nearest gate.",
    "test_cases": [
      {
        "input": [
          "4 4",
          "2147483647 -1 0 2147483647",
          "2147483647 2147483647 2147483647 -1",
          "2147483647 -1 2147483647 -1",
          "0 -1 2147483647 2147483647"
        ],
        "expected_output": "3 -1 0 1\n2 2 1 -1\n1 -1 2 -1\n0 -1 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_240",
    "title": "Course Schedule",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. For example, the pair `[0, 1]` indicates that to take course 0 you have to first take course 1.\nReturn `true` if you can finish all courses. Otherwise, return `false`.\n\n**Constraints**\nInput format:\nFirst line: An integer `numCourses`.\nNext lines: Each line represents a prerequisite `ai bi`. End input with a blank line.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if it is possible to finish all courses given prerequisites.",
    "test_cases": [
      {
        "input": [
          "2",
          "1 0",
          ""
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2",
          "1 0",
          "0 1",
          ""
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_241",
    "title": "Course Schedule II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. Return the ordering of courses you should take to finish all courses. If there are multiple valid orderings, return any of them. If it is impossible to finish all courses, return an empty array.\n\n**Constraints**\nInput format:\nFirst line: An integer `numCourses`.\nNext lines: Each line represents a prerequisite `ai bi`. End input with a blank line.\n\nOutput format:\nA single line of space-separated integers, the course order, or an empty line if impossible.",
    "starter_code": "# Return the ordering of courses to take, or an empty array if impossible.",
    "test_cases": [
      {
        "input": [
          "2",
          "1 0",
          ""
        ],
        "expected_output": "0 1"
      },
      {
        "input": [
          "4",
          "1 0",
          "2 0",
          "3 1",
          "3 2",
          ""
        ],
        "expected_output": "0 1 2 3"
      },
      {
        "input": [
          "2",
          "1 0",
          "0 1",
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_242",
    "title": "Alien Dictionary",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you. You are given a list of strings `words` from the alien language's dictionary, where the strings are sorted lexicographically by the rules of this new language. This means that if `word1` comes before `word2` in the given `words` list, then either `word1` is a prefix of `word2`, or at the first index where `word1` and `word2` differ, the character in `word1` comes before the character in `word2` in the alien language.\nReturn a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return an empty string. If there are multiple solutions, return any of them. A character is an alien character only if it appears in one of the `words`.\n\n**Constraints**\nInput format:\nEach line represents a word. End input with a blank line.\n\nOutput format:\nA single string, the lexicographically sorted unique letters, or an empty string.",
    "starter_code": "# Reconstruct the alien alphabet from a sorted list of words.",
    "test_cases": [
      {
        "input": [
          "wrt",
          "wrf",
          "er",
          "ett",
          "rftt",
          ""
        ],
        "expected_output": "wertf"
      },
      {
        "input": [
          "z",
          "x",
          "z",
          ""
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_243",
    "title": "Minimum Height Trees",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree. Given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree. Return a list of all MHTs' root labels. You can return the answer in any order. The height of a rooted tree is the number of edges on the longest downward path from the root to a leaf.\n\n**Constraints**\nInput format:\nFirst line: An integer `n`.\nNext lines: Each line represents an edge `ai bi`. End input with a blank line.\n\nOutput format:\nA single line of space-separated integers, the root labels of all MHTs (sorted in ascending order).",
    "starter_code": "# Find the root labels of all Minimum Height Trees.",
    "test_cases": [
      {
        "input": [
          "4",
          "1 0",
          "1 2",
          "1 3",
          ""
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "6",
          "3 0",
          "3 1",
          "3 2",
          "3 4",
          "5 4",
          ""
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_244",
    "title": "Graph Valid Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer `n` and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi`. Return `true` if the given graph is a valid tree, and `false` otherwise.\n\n**Constraints**\nInput format:\nFirst line: An integer `n`.\nNext lines: Each line represents an edge `ai bi`. End input with a blank line.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a given graph is a valid tree.",
    "test_cases": [
      {
        "input": [
          "5",
          "0 1",
          "0 2",
          "0 3",
          "1 4",
          ""
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5",
          "0 1",
          "1 2",
          "2 3",
          "1 3",
          "1 4",
          ""
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_245",
    "title": "Number of Connected Components in an Undirected Graph",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer `n` and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi`. Return the number of connected components in the graph.\n\n**Constraints**\nInput format:\nFirst line: An integer `n`.\nNext lines: Each line represents an edge `ai bi`. End input with a blank line.\n\nOutput format:\nA single integer, the number of connected components.",
    "starter_code": "# Count the number of connected components in an undirected graph.",
    "test_cases": [
      {
        "input": [
          "5",
          "0 1",
          "1 2",
          "3 4",
          ""
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "5",
          "0 1",
          "1 2",
          "2 3",
          "3 4",
          ""
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_246",
    "title": "Clone Graph",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a reference of a node in a connected undirected graph. Return a deep copy (clone) of the graph. Each node in the graph contains a `val` (int) and a list (List[Node]) of its `neighbors`. For simplicity, each node's value is the same as its index (1-indexed). For example, if `val = 1`, then it is the first node. The graph is represented in the input by its adjacency list. You will return the cloned graph starting from node 1. The output will be the adjacency list of the cloned graph.\n\n**Constraints**\nInput format:\nEach line represents a node's value and its neighbors, space-separated. Example: `1 2 4` means node 1 has neighbors 2 and 4. Input ends with a blank line.\n\nOutput format:\nEach line represents a node's value and its neighbors in the cloned graph, space-separated, in ascending order of node value.",
    "starter_code": "# Clone an undirected graph.",
    "test_cases": [
      {
        "input": [
          "1 2 4",
          "2 1 3",
          "3 2 4",
          "4 1 3",
          ""
        ],
        "expected_output": "1 2 4\n2 1 3\n3 2 4\n4 1 3"
      },
      {
        "input": [
          "1",
          ""
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_247",
    "title": "Longest Increasing Path in a Matrix",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` integers `matrix`, return the length of the longest increasing path in the `matrix`.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., no wrap-around or diagonal move).\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for matrix dimensions.\nNext `m` lines: Each row of the matrix as space-separated integers.\n\nOutput format:\nA single integer, the length of the longest increasing path.",
    "starter_code": "# Find the length of the longest increasing path in a matrix.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "9 9 4",
          "6 6 8",
          "2 1 1"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "3 3",
          "3 4 5",
          "3 2 6",
          "2 2 1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_248",
    "title": "Word Search",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for board dimensions.\nNext `m` lines: Each row of the board as space-separated characters.\nLast line: String `word`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a word exists in a grid.",
    "test_cases": [
      {
        "input": [
          "3 4",
          "A B C E",
          "S F C S",
          "A D E E",
          "ABCCED"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 4",
          "A B C E",
          "S F C S",
          "A D E E",
          "SEE"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 4",
          "A B C E",
          "S F C S",
          "A D E E",
          "ABCB"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_249",
    "title": "Word Search II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` `board` of characters and a list of strings `words`, return all words in `words` that can be found in the `board`. Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in the same word.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for board dimensions.\nNext `m` lines: Each row of the board as space-separated characters.\nNext line: Space-separated strings for `words`.\n\nOutput format:\nA single line of space-separated strings, the found words (sorted alphabetically).",
    "starter_code": "# Find all words from a list that can be found in a board.",
    "test_cases": [
      {
        "input": [
          "4 4",
          "o a a n",
          "e t a e",
          "i h k r",
          "i f l v",
          "oath pea eat rain"
        ],
        "expected_output": "eat oath"
      },
      {
        "input": [
          "1 1",
          "a",
          "a"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_250",
    "title": "Longest Common Prefix",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string `\"\"`.\n\n**Constraints**\nInput format:\nA single line of space-separated strings for `strs`.\n\nOutput format:\nA single string, the longest common prefix.",
    "starter_code": "# Find the longest common prefix string amongst an array of strings.",
    "test_cases": [
      {
        "input": [
          "flower flow flight"
        ],
        "expected_output": "fl"
      },
      {
        "input": [
          "dog racecar car"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_251",
    "title": "Implement strStr()",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `haystack` and `needle`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`.\n\n**Constraints**\nInput format:\nFirst line: String `haystack`.\nSecond line: String `needle`.\n\nOutput format:\nA single integer, the index of the first occurrence, or -1.",
    "starter_code": "# Find the first occurrence of needle in haystack.",
    "test_cases": [
      {
        "input": [
          "hello",
          "ll"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "aaaaa",
          "bba"
        ],
        "expected_output": "-1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_252",
    "title": "Count and Say",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n- `countAndSay(1) = \"1\"`\n- `countAndSay(n)` is the way you would \"say\" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.\nTo determine how you \"say\" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. Finally, concatenate every said digit and character.\nGiven a positive integer `n`, return the `n`th term of the count-and-say sequence.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\nA single string, the `n`th term of the count-and-say sequence.",
    "starter_code": "# Generate the nth term of the count-and-say sequence.",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "4"
        ],
        "expected_output": "1211"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_253",
    "title": "Group Anagrams",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of strings `strs`, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format:\nA single line of space-separated strings for `strs`.\n\nOutput format:\nEach group of anagrams on a new line, with strings space-separated within the group. Groups and strings within groups should be sorted alphabetically.",
    "starter_code": "# Group anagrams from a list of strings.",
    "test_cases": [
      {
        "input": [
          "eat tea tan ate nat bat"
        ],
        "expected_output": "bat\neat tea ate\nnat tan"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_254",
    "title": "Longest Palindromic Substring",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the longest palindromic substring in `s`.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single string, the longest palindromic substring.",
    "starter_code": "# Find the longest palindromic substring in a given string.",
    "test_cases": [
      {
        "input": [
          "babad"
        ],
        "expected_output": "bab"
      },
      {
        "input": [
          "cbbd"
        ],
        "expected_output": "bb"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_255",
    "title": "Palindromic Substrings",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the number of palindromic substrings in it. A string is a palindrome when it reads the same backward as forward. A substring is a contiguous sequence of characters within the string.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the number of palindromic substrings.",
    "starter_code": "# Count the number of palindromic substrings in a given string.",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "aaa"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_256",
    "title": "Decode Ways",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA message containing letters from `A-Z` is being encoded to numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\nTo decode an encoded message, all the digits must be mapped back into letters. The grouping of digits can be `'1'` digit (`'1'` -> `A`) or `'2'` digits (`'12'` -> `L`). A grouping like `\"06\"` is invalid because `\"0\"` cannot be mapped to a letter and `\"6\"` is not a valid single-digit code. Given a string `s` containing only digits, return the number of ways to decode it.\n\n**Constraints**\nInput format:\nA single string `s` containing only digits.\n\nOutput format:\nA single integer, the number of ways to decode it.",
    "starter_code": "# Find the number of ways to decode an encoded message.",
    "test_cases": [
      {
        "input": [
          "12"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "226"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_257",
    "title": "Unique Paths",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is a robot on an `m x n` grid. The robot is initially located at the top-left corner (i.e., `grid[0][0]`). The robot tries to move to the bottom-right corner (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. Given the two integers `m` and `n`, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\n\n**Constraints**\nInput format:\nTwo integers `m` and `n`.\n\nOutput format:\nA single integer, the number of unique paths.",
    "starter_code": "# Find the number of unique paths for a robot on a grid.",
    "test_cases": [
      {
        "input": [
          "3 7"
        ],
        "expected_output": "28"
      },
      {
        "input": [
          "3 2"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_258",
    "title": "Unique Paths II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an `m x n` integer array `obstacleGrid`. There is a robot initially located at the top-left corner (`obstacleGrid[0][0]`). The robot tries to move to the bottom-right corner (`obstacleGrid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. An obstacle and space are marked as `1` or `0` respectively in `obstacleGrid`. A path that the robot takes cannot include any square that has an obstacle.\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the number of unique paths will not exceed `2 * 10^9`.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the grid as space-separated integers (0s and 1s).\n\nOutput format:\nA single integer, the number of unique paths.",
    "starter_code": "# Find the number of unique paths for a robot on a grid with obstacles.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "0 0 0",
          "0 1 0",
          "0 0 0"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 2",
          "0 1",
          "0 0"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_259",
    "title": "Minimum Path Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for grid dimensions.\nNext `m` lines: Each row of the grid as space-separated integers.\n\nOutput format:\nA single integer, the minimum path sum.",
    "starter_code": "# Find the minimum path sum from top left to bottom right in a grid.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "1 3 1",
          "1 5 1",
          "4 2 1"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "2 3",
          "1 2 3",
          "4 5 6"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_260",
    "title": "Triangle",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a `triangle` array, return the minimum path sum from top to bottom. For each step, you may move to an adjacent number of the row below. More specifically, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.\n\n**Constraints**\nInput format:\nEach line represents a row of the triangle, with integers space-separated. End input with a blank line.\n\nOutput format:\nA single integer, the minimum path sum.",
    "starter_code": "# Find the minimum path sum from top to bottom in a triangle.",
    "test_cases": [
      {
        "input": [
          "2",
          "3 4",
          "6 5 7",
          "4 1 8 3",
          ""
        ],
        "expected_output": "11"
      },
      {
        "input": [
          "-10",
          ""
        ],
        "expected_output": "-10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_261",
    "title": "Longest Common Subsequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return `0`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \"ace\" is a subsequence of \"abcde\". A common subsequence of two strings is a subsequence that is common to both strings.\n\n**Constraints**\nInput format:\nFirst line: String `text1`.\nSecond line: String `text2`.\n\nOutput format:\nA single integer, the length of the longest common subsequence.",
    "starter_code": "# Find the length of the longest common subsequence of two strings.",
    "test_cases": [
      {
        "input": [
          "abcde",
          "ace"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "abc",
          "abc"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "abc",
          "def"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_262",
    "title": "Edit Distance",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. You have the following three operations permitted on a word:\n1. Insert a character\n2. Delete a character\n3. Replace a character\n\n**Constraints**\nInput format:\nFirst line: String `word1`.\nSecond line: String `word2`.\n\nOutput format:\nA single integer, the minimum number of operations.",
    "starter_code": "# Find the minimum number of operations to convert word1 to word2.",
    "test_cases": [
      {
        "input": [
          "horse",
          "ros"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "intention",
          "execution"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_263",
    "title": "Longest Increasing Subsequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the length of the longest strictly increasing subsequence. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the length of the longest increasing subsequence.",
    "starter_code": "# Find the length of the longest strictly increasing subsequence.",
    "test_cases": [
      {
        "input": [
          "10 9 2 5 3 7 101 18"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 1 0 3 2 3"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "7 7 7 7 7 7 7"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_264",
    "title": "Coin Change",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return `-1`. You may assume that you have an infinite number of each kind of coin.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `coins`.\nSecond line: An integer `amount`.\n\nOutput format:\nA single integer, the fewest number of coins, or -1.",
    "starter_code": "# Find the fewest number of coins to make up a given amount.",
    "test_cases": [
      {
        "input": [
          "1 2 5",
          "11"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "-1"
      },
      {
        "input": [
          "1",
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_265",
    "title": "Combination Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order. The same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `candidates`.\nSecond line: An integer `target`.\n\nOutput format:\nEach combination on a new line, with numbers space-separated. Combinations and numbers within combinations should be sorted in ascending order.",
    "starter_code": "# Find all unique combinations of candidates that sum to target.",
    "test_cases": [
      {
        "input": [
          "2 3 6 7",
          "7"
        ],
        "expected_output": "7\n2 2 3"
      },
      {
        "input": [
          "2 3 5",
          "8"
        ],
        "expected_output": "3 5\n2 2 2 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_266",
    "title": "Combination Sum II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`. Each number in `candidates` may only be used once in the combination. The solution set must not contain duplicate combinations.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `candidates`.\nSecond line: An integer `target`.\n\nOutput format:\nEach combination on a new line, with numbers space-separated. Combinations and numbers within combinations should be sorted in ascending order.",
    "starter_code": "# Find all unique combinations in candidates that sum to target, each number used once.",
    "test_cases": [
      {
        "input": [
          "10 1 2 7 6 1 5",
          "8"
        ],
        "expected_output": "1 1 6\n1 2 5\n1 7\n2 6"
      },
      {
        "input": [
          "2 5 2 1 2",
          "5"
        ],
        "expected_output": "1 2 2\n5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_267",
    "title": "Combination Sum III",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nFind all valid combinations of `k` numbers that sum up to `n` such that only numbers from `1` to `9` can be used and each combination should be a unique set of numbers. The solution set must not contain duplicate combinations.\n\n**Constraints**\nInput format:\nFirst line: An integer `k`.\nSecond line: An integer `n`.\n\nOutput format:\nEach combination on a new line, with numbers space-separated. Combinations and numbers within combinations should be sorted in ascending order.",
    "starter_code": "# Find all valid combinations of K numbers that sum up to N using digits 1-9.",
    "test_cases": [
      {
        "input": [
          "3",
          "7"
        ],
        "expected_output": "1 2 4"
      },
      {
        "input": [
          "3",
          "9"
        ],
        "expected_output": "1 2 6\n1 3 5\n1 4 4\n2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_268",
    "title": "Perfect Sum Problem",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an array `arr` of non-negative integers and an integer `sum`, find the count of all subsets of the given array with a sum equal to the given `sum`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `arr`.\nSecond line: An integer `sum`.\n\nOutput format:\nA single integer, the count of subsets.",
    "starter_code": "# Find the count of all subsets with a given sum.",
    "test_cases": [
      {
        "input": [
          "2 3 5 8 10",
          "10"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 1 1 1",
          "1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_269",
    "title": "Target Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` and an integer `target`. You want to build an expression out of `nums` by adding one of the symbols `'+'` or `'-'` before each integer in `nums` and then concatenating all the integers. For example, if `nums = [2, 1]`, you can add a `'+'` before `2` and a `'-'` before `1` to make `+2-1 = 1`. Return the number of different expressions that you can build, which evaluates to `target`.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `target`.\n\nOutput format:\nA single integer, the number of different expressions.",
    "starter_code": "# Find the number of expressions that evaluate to target.",
    "test_cases": [
      {
        "input": [
          "1 1 1 1 1",
          "3"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_270",
    "title": "Partition Equal Subset Sum",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an array can be partitioned into two subsets with equal sums.",
    "test_cases": [
      {
        "input": [
          "1 5 11 5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 5"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_271",
    "title": "Longest Palindrome",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` which consists of lowercase or uppercase Latin letters, return the length of the longest palindrome that can be built with those letters. Letters are case sensitive, for example, \"Aa\" is not considered a palindrome here.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the length of the longest palindrome.",
    "starter_code": "# Find the length of the longest palindrome that can be built with given letters.",
    "test_cases": [
      {
        "input": [
          "abccccdd"
        ],
        "expected_output": "7"
      },
      {
        "input": [
          "a"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_272",
    "title": "First Unique Character in a String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the index of the first unique character, or -1.",
    "starter_code": "# Find the index of the first unique character in a string.",
    "test_cases": [
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "loveleetcode"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_273",
    "title": "Find the Difference",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two strings `s` and `t`. String `t` is generated by random shuffling string `s` and then add one more letter at a random position. Return the letter that was added to `t`.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `t`.\n\nOutput format:\nA single character, the added letter.",
    "starter_code": "# Find the letter that was added to string t.",
    "test_cases": [
      {
        "input": [
          "abcd",
          "abcde"
        ],
        "expected_output": "e"
      },
      {
        "input": [
          "",
          "y"
        ],
        "expected_output": "y"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_274",
    "title": "String to Integer (atoi)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nImplement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\nThe algorithm for `myAtoi(string s)` is as follows:\n1. Read in and ignore any leading whitespace.\n2. Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines the sign of the integer. If the next character is neither `'-'` nor `'+'`, no sign is assumed.\n3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4. Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).\n5. If the integer is out of the 32-bit signed integer range `[-2^31, 2^31 - 1]`, then clamp the integer to stay in the range. Specifically, integers less than `-2^31` should be clamped to `-2^31`, and integers greater than `2^31 - 1` should be clamped to `2^31 - 1`.\n6. Return the integer.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the converted integer.",
    "starter_code": "# Implement the string to integer (atoi) function.",
    "test_cases": [
      {
        "input": [
          "42"
        ],
        "expected_output": "42"
      },
      {
        "input": [
          "   -42"
        ],
        "expected_output": "-42"
      },
      {
        "input": [
          "4193 with words"
        ],
        "expected_output": "4193"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_275",
    "title": "Zigzag Conversion",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\". Write the code that will take a string and make this conversion given a number of rows.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: An integer `numRows`.\n\nOutput format:\nA single string, the zigzag converted string.",
    "starter_code": "# Convert a string into a zigzag pattern.",
    "test_cases": [
      {
        "input": [
          "PAYPALISHIRING",
          "3"
        ],
        "expected_output": "PAHNAPLSIIGYIR"
      },
      {
        "input": [
          "PAYPALISHIRING",
          "4"
        ],
        "expected_output": "PINALSIGYAHRPI"
      },
      {
        "input": [
          "A",
          "1"
        ],
        "expected_output": "A"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_276",
    "title": "Reverse Words in a String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an input string `s`, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single string, with words reversed and single spaces.",
    "starter_code": "# Reverse the order of words in a string.",
    "test_cases": [
      {
        "input": [
          "the sky is blue"
        ],
        "expected_output": "blue is sky the"
      },
      {
        "input": [
          "  hello world  "
        ],
        "expected_output": "world hello"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_277",
    "title": "Reverse Words in a String III",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single string, with characters in each word reversed.",
    "starter_code": "# Reverse the order of characters in each word within a sentence.",
    "test_cases": [
      {
        "input": [
          "Let's take LeetCode contest"
        ],
        "expected_output": "s'teL ekat edoCteeL tsetnoc"
      },
      {
        "input": [
          "God Ding"
        ],
        "expected_output": "doG gniD"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_278",
    "title": "Valid Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` containing just the characters `'(', ')', '{', '}', '[' and ']'`, determine if the input string is valid. An input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if the input string has valid parentheses.",
    "test_cases": [
      {
        "input": [
          "()"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "()[]{}"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "(]"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_279",
    "title": "Generate Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\nEach combination on a new line. Combinations should be sorted lexicographically.",
    "starter_code": "# Generate all combinations of well-formed parentheses.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "((()))\n(()())\n(())()\n()(())\n()()()"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "()"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_280",
    "title": "Longest Valid Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` containing just the characters `'(', ')'`, return the length of the longest valid (well-formed) parentheses substring.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the length of the longest valid parentheses substring.",
    "starter_code": "# Find the length of the longest valid parentheses substring.",
    "test_cases": [
      {
        "input": [
          "(()"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          ")()())"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_281",
    "title": "Minimum Add to Make Parentheses Valid",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA parentheses string is valid if and only if:\n- It is the empty string,\n- It can be written as `AB` (A concatenated with B), where A and B are valid strings, or\n- It can be written as `(A)`, where A is a valid string.\nYou are given a parentheses string `s`. In one move, you can add either `(` or `)` at any position of the string. Return the minimum number of moves required to make `s` valid.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the minimum number of moves.",
    "starter_code": "# Find the minimum number of moves to make parentheses valid.",
    "test_cases": [
      {
        "input": [
          "())"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "((("
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "()"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_282",
    "title": "Score of Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a balanced parentheses string `s`, return the score of the string. The score of a balanced parentheses string is defined as follows:\n- `()` has score 1.\n- `AB` has score `A + B`, where `A` and `B` are balanced parentheses strings.\n- `(A)` has score `2 * A`, where `A` is a balanced parentheses string.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the score of the string.",
    "starter_code": "# Calculate the score of a balanced parentheses string.",
    "test_cases": [
      {
        "input": [
          "()"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "(())"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "()()"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_283",
    "title": "Remove Outermost Parentheses",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA primitive `parentheses string` is a valid parentheses string that has no nonempty valid parentheses string `s` that is a substring of `s` (i.e., `s` cannot be written as `A+B`, where A and B are nonempty valid parentheses strings). Given a valid parentheses string `s`, consider its primitive decomposition: `s = P1 + P2 + ... + Pk`, where `Pi` are primitive valid parentheses strings. Return `s` after removing the outermost parentheses of every primitive string in the decomposition.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single string, the result after removing outermost parentheses.",
    "starter_code": "# Remove the outermost parentheses of every primitive string in a valid parentheses string.",
    "test_cases": [
      {
        "input": [
          "(()())(())"
        ],
        "expected_output": "()()()"
      },
      {
        "input": [
          "(()())(())(()(()))"
        ],
        "expected_output": "()()()()"
      },
      {
        "input": [
          "()"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_284",
    "title": "Backspace String Compare",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, return `true` if they are equal when both are typed into empty text editors. `'#'` means a backspace character.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `t`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Compare two strings after applying backspaces.",
    "test_cases": [
      {
        "input": [
          "ab#c",
          "ad#c"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "ab##",
          "c#d#"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "a#c",
          "b"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_285",
    "title": "Valid Palindrome II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return `true` if the `s` can be a palindrome after deleting at most one character from it.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a string can be a palindrome after deleting at most one character.",
    "test_cases": [
      {
        "input": [
          "aba"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abca"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "abc"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_286",
    "title": "Longest Palindromic Subsequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, find the longest palindromic subsequence's length in `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the length of the longest palindromic subsequence.",
    "starter_code": "# Find the length of the longest palindromic subsequence.",
    "test_cases": [
      {
        "input": [
          "bbbab"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "cbbd"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_287",
    "title": "Count Palindromic Subsequences",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, return the number of palindromic subsequences of `length 3`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the number of palindromic subsequences of length 3.",
    "starter_code": "# Count the number of palindromic subsequences of length 3.",
    "test_cases": [
      {
        "input": [
          "aabca"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "aba"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_288",
    "title": "Minimum Window Subsequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven strings `s1` and `s2`, return the shortest contiguous substring of `s1` that contains `s2` as a subsequence. If there is no such window, return an empty string. If there are multiple such windows, return the one with the smallest starting index.\n\n**Constraints**\nInput format:\nFirst line: String `s1`.\nSecond line: String `s2`.\n\nOutput format:\nA single string, the shortest window subsequence.",
    "starter_code": "# Find the shortest contiguous substring of s1 that contains s2 as a subsequence.",
    "test_cases": [
      {
        "input": [
          "abcdebdde",
          "bde"
        ],
        "expected_output": "bcde"
      },
      {
        "input": [
          "jmeqksfrsdcmsiwvaovztaqenprpvnbstl",
          "u"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_289",
    "title": "Shortest Supersequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two arrays, `big` and `small`, of integers. You are required to find the shortest subarray of `big` that contains all the elements of `small`. If there are multiple such subarrays, return the one that starts at the earliest index. Return an empty array if no such subarray exists.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `big`.\nSecond line: Space-separated integers for `small`.\n\nOutput format:\nA single line of space-separated integers, the shortest supersequence, or an empty line.",
    "starter_code": "# Find the shortest subarray of big that contains all elements of small.",
    "test_cases": [
      {
        "input": [
          "7 5 9 0 2 1 3 5 7 9 1 1 5 8 8 9 7",
          "1 5 9"
        ],
        "expected_output": "7 9 1 1 5"
      },
      {
        "input": [
          "1 2 3",
          "4 5"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_290",
    "title": "Longest Duplicate Substring",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, consider all duplicate substrings: (contiguous) substrings of `s` that occur 2 or more times. The occurrences may overlap. Return any longest duplicate substring that appears in `s`. If no duplicate substring exists, return an empty string `\"\"`.\n\n**Constraints**\nInput format:\nA single string `s` consisting of lowercase English letters.\n\nOutput format:\nA single string, the longest duplicate substring.",
    "starter_code": "# Find the longest duplicate substring in a string.",
    "test_cases": [
      {
        "input": [
          "banana"
        ],
        "expected_output": "ana"
      },
      {
        "input": [
          "abcd"
        ],
        "expected_output": ""
      },
      {
        "input": [
          "ababa"
        ],
        "expected_output": "aba"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_291",
    "title": "Shortest Distance to Character",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a character `c` that is also in `s`, return an array of integers representing the shortest distance from each character in `s` to the character `c`.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: Character `c`.\n\nOutput format:\nA single line of space-separated integers, the shortest distances.",
    "starter_code": "# Find the shortest distance from each character in s to character c.",
    "test_cases": [
      {
        "input": [
          "loveleetcode",
          "e"
        ],
        "expected_output": "3 2 1 0 1 0 0 1 2 2 1 0"
      },
      {
        "input": [
          "aaab",
          "b"
        ],
        "expected_output": "3 2 1 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_292",
    "title": "Length of Last Word",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single integer, the length of the last word.",
    "starter_code": "# Find the length of the last word in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "   fly me   to   the moon  "
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_293",
    "title": "Reverse Vowels of a String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s`, reverse only all the vowels in the string and return it. The vowels are 'a', 'e', 'i', 'o', 'u', and they can appear in both lower and upper cases.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single string, with vowels reversed.",
    "starter_code": "# Reverse only the vowels in a string.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "holle"
      },
      {
        "input": [
          "leetcode"
        ],
        "expected_output": "leotcede"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_294",
    "title": "Valid Anagram",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: String `t`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if two strings are anagrams.",
    "test_cases": [
      {
        "input": [
          "anagram",
          "nagaram"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "rat",
          "car"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_295",
    "title": "First Bad Version",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one. You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (total versions).\nSecond line: An integer `first_bad_version` (the actual first bad version).\n\nOutput format:\nA single integer, the first bad version found.",
    "starter_code": "# Find the first bad version using a given API.",
    "test_cases": [
      {
        "input": [
          "5",
          "4"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "1",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_296",
    "title": "Intersection of Two Arrays",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums1`.\nSecond line: Space-separated integers for `nums2`.\n\nOutput format:\nA single line of space-separated integers, the intersection (sorted in ascending order).",
    "starter_code": "# Find the intersection of two arrays.",
    "test_cases": [
      {
        "input": [
          "1 2 2 1",
          "2 2"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "4 9 5",
          "9 4 9 8 4"
        ],
        "expected_output": "4 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_297",
    "title": "Intersection of Two Arrays II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums1`.\nSecond line: Space-separated integers for `nums2`.\n\nOutput format:\nA single line of space-separated integers, the intersection (sorted in ascending order).",
    "starter_code": "# Find the intersection of two arrays, keeping duplicates.",
    "test_cases": [
      {
        "input": [
          "1 2 2 1",
          "2 2"
        ],
        "expected_output": "2 2"
      },
      {
        "input": [
          "4 9 5",
          "9 4 9 8 4"
        ],
        "expected_output": "4 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_298",
    "title": "Island Perimeter",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water. Grid cells are connected horizontally/vertically (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. Return the perimeter of the island.\n\n**Constraints**\nInput format:\nFirst line: Two integers `row` and `col` for grid dimensions.\nNext `row` lines: Each row of the grid as space-separated integers (0s and 1s).\n\nOutput format:\nA single integer, the perimeter of the island.",
    "starter_code": "# Calculate the perimeter of an island in a grid.",
    "test_cases": [
      {
        "input": [
          "4 4",
          "0 1 0 0",
          "1 1 1 0",
          "0 1 0 0",
          "1 1 0 0"
        ],
        "expected_output": "16"
      },
      {
        "input": [
          "1 1",
          "1"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_299",
    "title": "Hamming Distance",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThe Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers `x` and `y`, return the Hamming distance between them.\n\n**Constraints**\nInput format:\nTwo integers `x` and `y`.\n\nOutput format:\nA single integer, the Hamming distance.",
    "starter_code": "# Calculate the Hamming distance between two integers.",
    "test_cases": [
      {
        "input": [
          "1",
          "4"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "3",
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_300",
    "title": "Number of 1 Bits",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function that takes an unsigned integer `n` and returns the number of '1' bits it has (also known as the Hamming weight).\n\n**Constraints**\nInput format:\nAn unsigned integer `n`.\n\nOutput format:\nA single integer, the number of '1' bits.",
    "starter_code": "# Count the number of '1' bits in an unsigned integer.",
    "test_cases": [
      {
        "input": [
          "11"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "128"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_301",
    "title": "Sum of Two Integers",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.\n\n**Constraints**\nInput format:\nTwo integers `a` and `b`.\n\nOutput format:\nA single integer, the sum of the two integers.",
    "starter_code": "# Sum two integers without using + or - operators.",
    "test_cases": [
      {
        "input": [
          "1",
          "2"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_302",
    "title": "Reverse Bits",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nReverse bits of a given 32-bit unsigned integer.\n\n**Constraints**\nInput format:\nAn unsigned 32-bit integer `n`.\n\nOutput format:\nAn unsigned 32-bit integer, with bits reversed.",
    "starter_code": "# Reverse the bits of a 32-bit unsigned integer.",
    "test_cases": [
      {
        "input": [
          "43261596"
        ],
        "expected_output": "964176192"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "2147483648"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_303",
    "title": "Power of Two",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `true` if it is a power of two. Otherwise, return `false`. An integer `n` is a power of two, if there exists an integer `x` such that `n == 2^x`.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an integer is a power of two.",
    "test_cases": [
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_304",
    "title": "Power of Three",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `true` if it is a power of three. Otherwise, return `false`. An integer `n` is a power of three, if there exists an integer `x` such that `n == 3^x`.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an integer is a power of three.",
    "test_cases": [
      {
        "input": [
          "27"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "9"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_305",
    "title": "Power of Four",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer `n`, return `true` if it is a power of four. Otherwise, return `false`. An integer `n` is a power of four, if there exists an integer `x` such that `n == 4^x`.\n\n**Constraints**\nInput format:\nA single integer `n`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an integer is a power of four.",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_306",
    "title": "Sum of Left Leaves",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the sum of all left leaves. A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the sum of all left leaves.",
    "starter_code": "# Calculate the sum of all left leaves in a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "24"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_307",
    "title": "Average of Levels in Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within `10^-5` of the actual answer will be accepted.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single line of space-separated floats, the average values of nodes on each level (rounded to 5 decimal places).",
    "starter_code": "# Calculate the average of levels in a binary tree.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "3.00000 14.50000 11.00000"
      },
      {
        "input": [
          "3 9 20 15 7"
        ],
        "expected_output": "3.00000 14.50000 11.00000"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_308",
    "title": "Merge Two Binary Trees",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two binary trees `root1` and `root2`. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values as the new node's value. Otherwise, the non-null node will be the new node. Return the merged tree's root. The value of `root.val` will be returned. Note that the merge process must start from the root nodes of both trees.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of binary tree `root1`, with 'null' for missing nodes (space-separated).\nSecond line: Level-order traversal of binary tree `root2`, with 'null' for missing nodes (space-separated).\n\nOutput format:\nLevel-order traversal of the merged binary tree, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Merge two binary trees.",
    "test_cases": [
      {
        "input": [
          "1 3 2 5",
          "2 1 3 null 4 null 7"
        ],
        "expected_output": "3 4 5 5 4 null 7"
      },
      {
        "input": [
          "1",
          "1 2"
        ],
        "expected_output": "2 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_309",
    "title": "Diameter of Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is the number of edges between them.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the diameter of the binary tree.",
    "starter_code": "# Find the diameter of a binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 2"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_310",
    "title": "Subtree of Another Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `roots` of two binary trees `root` and `subRoot`, return `true` if `subRoot` is a subtree of `root`. A subtree of a binary tree `root` is a tree that consists of `root` and all of its descendants, or it can also be any tree that can be obtained from `root` by cutting off some nodes (from the root down to the leaves) and keeping the remaining as a tree. Return `true` if `subRoot` is a subtree of `root` or `false` otherwise.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of binary tree `root`, with 'null' for missing nodes (space-separated).\nSecond line: Level-order traversal of binary tree `subRoot`, with 'null' for missing nodes (space-separated).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if subRoot is a subtree of root.",
    "test_cases": [
      {
        "input": [
          "3 4 5 1 2",
          "4 1 2"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3 4 5 1 2 null null null null 0",
          "4 1 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_311",
    "title": "Kth Smallest Element in a BST",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary search tree, and an integer `k`, return the `k`th smallest value (1-indexed) of all the values of the nodes in the tree.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the BST, with 'null' for missing nodes (space-separated).\nSecond line: An integer `k`.\n\nOutput format:\nA single integer, the kth smallest value.",
    "starter_code": "# Find the Kth smallest element in a BST.",
    "test_cases": [
      {
        "input": [
          "3 1 4 null 2",
          "1"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "5 3 6 2 4 null null 1",
          "3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_312",
    "title": "Delete Node in a BST",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary search tree (BST) and a `key`, delete the node with the given `key` in the BST. Return the root node of the BST. If the `key` does not exist in the BST, return the original root. The value of `root.val` will be returned.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the BST, with 'null' for missing nodes (space-separated).\nSecond line: An integer `key`.\n\nOutput format:\nLevel-order traversal of the modified BST, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Delete a node with a given key from a BST.",
    "test_cases": [
      {
        "input": [
          "5 3 6 2 4 null 7",
          "3"
        ],
        "expected_output": "5 4 6 2 null null 7"
      },
      {
        "input": [
          "5 3 6 2 4 null 7",
          "0"
        ],
        "expected_output": "5 3 6 2 4 null 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_313",
    "title": "Insert into a Binary Search Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given the `root` of a Binary Search Tree (BST) and a value `val` to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST. There may exist multiple valid ways for the insertion, as long as the tree remains a BST. You can return any of them. The value of `root.val` will be returned.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the BST, with 'null' for missing nodes (space-separated).\nSecond line: An integer `val`.\n\nOutput format:\nLevel-order traversal of the modified BST, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Insert a value into a Binary Search Tree.",
    "test_cases": [
      {
        "input": [
          "4 2 7 1 3",
          "5"
        ],
        "expected_output": "4 2 7 1 3 5 null"
      },
      {
        "input": [
          "40 20 60 10 30 50 70",
          "25"
        ],
        "expected_output": "40 20 60 10 30 50 70 null null 25 null"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_314",
    "title": "Balanced Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as:\nA binary tree in which the left and right subtrees of every node differ in height by no more than 1.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if a binary tree is height-balanced.",
    "test_cases": [
      {
        "input": [
          "3 9 20 null null 15 7"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 2 3 null null 3 4 null null 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_315",
    "title": "Count Complete Tree Nodes",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a complete binary tree, return the number of the nodes in the tree. In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and `2^h` nodes inclusive at the last level `h`.\n\n**Constraints**\nInput format:\nLevel-order traversal of the complete binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the number of nodes.",
    "starter_code": "# Count the number of nodes in a complete binary tree.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          ""
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_316",
    "title": "Minimum Absolute Difference in BST",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\n**Constraints**\nInput format:\nLevel-order traversal of the BST, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single integer, the minimum absolute difference.",
    "starter_code": "# Find the minimum absolute difference between the values of any two different nodes in a BST.",
    "test_cases": [
      {
        "input": [
          "4 2 6 1 3"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "1 0 48 null null 12 49"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_317",
    "title": "Two Sum IV - Input is a BST",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a Binary Search Tree (BST) and an integer `k`, return `true` if there exist two elements in the BST such that their sum is equal to `k`, or `false` otherwise.\n\n**Constraints**\nInput format:\nFirst line: Level-order traversal of the BST, with 'null' for missing nodes (space-separated).\nSecond line: An integer `k`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if there exist two elements in a BST such that their sum is equal to K.",
    "test_cases": [
      {
        "input": [
          "5 3 6 2 4 null 7",
          "9"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "2 1 3",
          "4"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_318",
    "title": "Construct String from Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `root` of a binary tree, construct a string in `preorder` traversal. Each node's value is in the string. If there is a null child, you must omit the empty parentheses pair for that child. However, if a node has a right child but no left child, you must include an empty parentheses pair to denote the absence of the left child. The value of `root.val` will be returned.\n\n**Constraints**\nInput format:\nLevel-order traversal of the binary tree, with 'null' for missing nodes (space-separated).\n\nOutput format:\nA single string, the constructed string.",
    "starter_code": "# Construct a string from a binary tree in preorder traversal.",
    "test_cases": [
      {
        "input": [
          "1 2 3 null 4"
        ],
        "expected_output": "1(2(4))(3)"
      },
      {
        "input": [
          "1 2 3 null null null 4"
        ],
        "expected_output": "1(2()(4))(3)"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_319",
    "title": "Maximum Binary Tree",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` with no duplicates. A maximum tree can be built recursively from `nums` using the following algorithm:\n1. The root is the maximum number in `nums`.\n2. The left subtree is the maximum tree constructed from the left part subarray that is to the left of the maximum number.\n3. The right subtree is the maximum tree constructed from the right part subarray that is to the right of the maximum number.\nReturn the root of the maximum tree. The value of `root.val` will be returned.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nLevel-order traversal of the maximum tree, with 'null' for missing nodes (space-separated).",
    "starter_code": "# Construct a maximum binary tree from an array.",
    "test_cases": [
      {
        "input": [
          "3 2 1 6 0 5"
        ],
        "expected_output": "6 3 5 null 2 0 null null 1"
      },
      {
        "input": [
          "3 4 5"
        ],
        "expected_output": "5 4 null 3 null"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_320",
    "title": "All Paths From Source to Target",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a directed acyclic graph (DAG) of `n` nodes labeled from `0` to `n - 1`, find all possible paths from node `0` to node `n - 1` and return them in any order. The graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).\n\n**Constraints**\nInput format:\nFirst line: An integer `n`.\nNext `n` lines: Each line represents a list of neighbors for a node, space-separated. 'null' for no neighbors. Indices are 0-based.\n\nOutput format:\nEach path on a new line, with nodes space-separated. Paths should be sorted lexicographically.",
    "starter_code": "# Find all paths from source to target in a DAG.",
    "test_cases": [
      {
        "input": [
          "4",
          "1 2",
          "3",
          "3",
          "null"
        ],
        "expected_output": "0 1 3\n0 2 3"
      },
      {
        "input": [
          "2",
          "1",
          "null"
        ],
        "expected_output": "0 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_321",
    "title": "Is Graph Bipartite?",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere is an undirected graph with `n` nodes, where each node is numbered from `0` to `n - 1`. You are given a 2D array `graph`, where `graph[i]` is a list of all the nodes connected with node `i` by an edge. Return `true` if and only if it is possible to partition this graph into two independent sets `A` and `B`, such that every edge in the graph connects a node in `A` and a node in `B`.\n\n**Constraints**\nInput format:\nFirst line: An integer `n`.\nNext `n` lines: Each line represents a list of neighbors for a node, space-separated. 'null' for no neighbors. Indices are 0-based.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an undirected graph is bipartite.",
    "test_cases": [
      {
        "input": [
          "4",
          "1 3",
          "0 2",
          "1 3",
          "0 2"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1 2 3",
          "0",
          "0",
          "0"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_322",
    "title": "Find Eventual Safe States",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWe start with a directed graph, and every node has two states: `safe` or `unsafe`. A node is a `terminal` node (i.e., it has no outgoing edges) or all its outgoing edges lead to `safe` nodes. Otherwise, it is `unsafe`. Given a directed graph `graph`, return a list of all `safe` nodes. The answer should be sorted in ascending order.\n\n**Constraints**\nInput format:\nFirst line: An integer `n`.\nNext `n` lines: Each line represents a list of outgoing neighbors for a node, space-separated. 'null' for no outgoing edges. Indices are 0-based.\n\nOutput format:\nA single line of space-separated integers, the safe nodes (sorted in ascending order).",
    "starter_code": "# Find all eventual safe states in a directed graph.",
    "test_cases": [
      {
        "input": [
          "4",
          "1",
          "null",
          "null",
          "0 1"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "7",
          "1 2",
          "2 3",
          "5",
          "0",
          "5",
          "null",
          "null"
        ],
        "expected_output": "5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_323",
    "title": "Minimum Spanning Tree (Prim's Algorithm)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a weighted, undirected graph, find the sum of weights of the edges of a Minimum Spanning Tree (MST) using Prim's algorithm. The graph is represented by its adjacency list, where each entry is `node: neighbor1_node,weight1 neighbor2_node,weight2 ...`\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (number of nodes).\nNext `n` lines: Each line represents a node's edges: `node_id: neighbor_id,weight ...`. Use a blank line to terminate the graph input. Node IDs are 0-based.\n\nOutput format:\nA single integer, the sum of weights of the MST edges.",
    "starter_code": "# Find the sum of weights of the MST edges using Prim's algorithm.",
    "test_cases": [
      {
        "input": [
          "5",
          "0: 1,2 3,6",
          "1: 0,2 2,3 3,8 4,5",
          "2: 1,3 4,7",
          "3: 0,6 1,8",
          "4: 1,5 2,7",
          ""
        ],
        "expected_output": "15"
      },
      {
        "input": [
          "3",
          "0: 1,1 2,5",
          "1: 0,1 2,2",
          "2: 0,5 1,2",
          ""
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_324",
    "title": "Minimum Spanning Tree (Kruskal's Algorithm)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a weighted, undirected graph, find the sum of weights of the edges of a Minimum Spanning Tree (MST) using Kruskal's algorithm. The graph is represented by a list of edges, where each edge is `u v w` (node `u`, node `v`, weight `w`).\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (number of nodes).\nNext lines: Each line represents an edge `u v w`. End input with a blank line. Node IDs are 0-based.\n\nOutput format:\nA single integer, the sum of weights of the MST edges.",
    "starter_code": "# Find the sum of weights of the MST edges using Kruskal's algorithm.",
    "test_cases": [
      {
        "input": [
          "4",
          "0 1 1",
          "0 2 3",
          "1 2 1",
          "1 3 5",
          "2 3 4",
          ""
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "3",
          "0 1 10",
          "1 2 5",
          "0 2 1",
          ""
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_325",
    "title": "Single-Source Shortest Path (Dijkstra's Algorithm)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a weighted, directed graph and a source node, find the shortest path from the source to all other nodes using Dijkstra's algorithm. The graph is represented by its adjacency list, where each entry is `node: neighbor1_node,weight1 neighbor2_node,weight2 ...`\n\n**Constraints**\nInput format:\nFirst line: Two integers `n` (number of nodes) and `start_node`.\nNext `n` lines: Each line represents a node's outgoing edges: `node_id: neighbor_id,weight ...`. Use a blank line to terminate the graph input. Node IDs are 0-based.\n\nOutput format:\nA single line of space-separated integers, the shortest distances from the `start_node` to all nodes (or -1 if unreachable). Output order should be by node ID.",
    "starter_code": "# Find the shortest paths from a source node using Dijkstra's algorithm.",
    "test_cases": [
      {
        "input": [
          "5 0",
          "0: 1,10 2,3",
          "1: 2,1 3,2",
          "2: 1,4 3,8 4,2",
          "3: 4,7",
          "4:",
          ""
        ],
        "expected_output": "0 7 3 9 5"
      },
      {
        "input": [
          "3 0",
          "0: 1,4 2,1",
          "1: 2,2",
          "2: null",
          ""
        ],
        "expected_output": "0 3 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_326",
    "title": "All-Pairs Shortest Path (Floyd-Warshall Algorithm)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a weighted, directed graph, find the shortest path between all pairs of vertices using the Floyd-Warshall algorithm. The graph is represented by its adjacency matrix, where `matrix[i][j]` is the weight of the edge from `i` to `j`, or `INF` (represented by `9999999`) if there is no direct edge. The diagonal elements `matrix[i][i]` will be 0.\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (number of nodes).\nNext `n` lines: Each row of the adjacency matrix as space-separated integers (weights or 9999999).\n\nOutput format:\nEach row of the shortest path distance matrix on a new line, with elements space-separated. Use 9999999 for unreachable pairs.",
    "starter_code": "# Find all-pairs shortest paths using Floyd-Warshall algorithm.",
    "test_cases": [
      {
        "input": [
          "4",
          "0 5 9999999 10",
          "9999999 0 3 9999999",
          "9999999 9999999 0 1",
          "9999999 9999999 9999999 0"
        ],
        "expected_output": "0 5 8 9\n9999999 0 3 4\n9999999 9999999 0 1\n9999999 9999999 9999999 0"
      },
      {
        "input": [
          "3",
          "0 1 9999999",
          "9999999 0 2",
          "3 9999999 0"
        ],
        "expected_output": "0 1 3\n5 0 2\n3 4 0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_327",
    "title": "Detect Cycle in a Directed Graph",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a directed graph, determine if it contains a cycle. The graph is represented by its adjacency list, where `graph[i]` is a list of its neighbors.\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (number of nodes).\nNext `n` lines: Each line represents a node's outgoing neighbors, space-separated. 'null' for no outgoing edges. Indices are 0-based.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Detect if a directed graph contains a cycle.",
    "test_cases": [
      {
        "input": [
          "4",
          "1",
          "2",
          "3",
          "1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "4",
          "1",
          "2",
          "3",
          "null"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_328",
    "title": "Detect Cycle in an Undirected Graph",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an undirected graph, determine if it contains a cycle. The graph is represented by its adjacency list, where `graph[i]` is a list of its neighbors.\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (number of nodes).\nNext `n` lines: Each line represents a node's neighbors, space-separated. 'null' for no neighbors. Indices are 0-based.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Detect if an undirected graph contains a cycle.",
    "test_cases": [
      {
        "input": [
          "5",
          "1 4",
          "0 2",
          "1 3",
          "2 4",
          "0 3"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "3",
          "1",
          "0 2",
          "1"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_329",
    "title": "Topological Sort (Kahn's Algorithm)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a directed acyclic graph (DAG), return a topological sorting of its vertices. If there are multiple valid topological sorts, return any one of them. If the graph contains a cycle, return an empty array.\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (number of nodes).\nNext `n` lines: Each line represents a node's outgoing neighbors, space-separated. 'null' for no outgoing edges. Indices are 0-based.\n\nOutput format:\nA single line of space-separated integers, the topological sort, or an empty line if a cycle exists.",
    "starter_code": "# Perform topological sort using Kahn's algorithm.",
    "test_cases": [
      {
        "input": [
          "6",
          "null",
          "null",
          "3",
          "1",
          "0 1",
          "0 2"
        ],
        "expected_output": "4 5 0 2 3 1"
      },
      {
        "input": [
          "2",
          "1",
          "0"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_330",
    "title": "Topological Sort (DFS)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a directed acyclic graph (DAG), return a topological sorting of its vertices. If there are multiple valid topological sorts, return any one of them. If the graph contains a cycle, return an empty array.\n\n**Constraints**\nInput format:\nFirst line: An integer `n` (number of nodes).\nNext `n` lines: Each line represents a node's outgoing neighbors, space-separated. 'null' for no outgoing edges. Indices are 0-based.\n\nOutput format:\nA single line of space-separated integers, the topological sort, or an empty line if a cycle exists.",
    "starter_code": "# Perform topological sort using DFS.",
    "test_cases": [
      {
        "input": [
          "6",
          "null",
          "null",
          "3",
          "1",
          "0 1",
          "0 2"
        ],
        "expected_output": "5 4 0 2 3 1"
      },
      {
        "input": [
          "2",
          "1",
          "0"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_331",
    "title": "Longest Consecutive Sequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in `O(n)` time.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the length of the longest consecutive elements sequence.",
    "starter_code": "# Find the length of the longest consecutive elements sequence.",
    "test_cases": [
      {
        "input": [
          "100 4 200 1 3 2"
        ],
        "expected_output": "4"
      },
      {
        "input": [
          "0 3 7 2 5 8 4 6 0 1"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_332",
    "title": "Word Ladder",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA transformation sequence from `word_start` to `word_end` using a dictionary `wordList` is a sequence of words `word_start -> word1 -> word2 -> ... -> word_end` such that:\n- Every adjacent pair of words differs by a single letter.\n- Every `word_i` in the sequence is in `wordList`.\nGiven two words, `word_start` and `word_end`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `word_start` to `word_end`, or 0 if no such sequence exists.\n\n**Constraints**\nInput format:\nFirst line: String `word_start`.\nSecond line: String `word_end`.\nThird line: Space-separated strings for `wordList`.\n\nOutput format:\nA single integer, the length of the shortest transformation sequence, or 0.",
    "starter_code": "# Find the length of the shortest word ladder.",
    "test_cases": [
      {
        "input": [
          "hit",
          "cog",
          "hot dot dog lot log cog"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "hit",
          "cog",
          "hot dot dog lot log"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_333",
    "title": "Word Ladder II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA transformation sequence from `word_start` to `word_end` using a dictionary `wordList` is a sequence of words `word_start -> word1 -> word2 -> ... -> word_end` such that:\n- Every adjacent pair of words differs by a single letter.\n- Every `word_i` in the sequence is in `wordList`.\nGiven two words, `word_start` and `word_end`, and a dictionary `wordList`, return all the shortest transformation sequences from `word_start` to `word_end`. If there are no such sequences, return an empty list.\n\n**Constraints**\nInput format:\nFirst line: String `word_start`.\nSecond line: String `word_end`.\nThird line: Space-separated strings for `wordList`.\n\nOutput format:\nEach shortest transformation sequence on a new line, with words space-separated. Sequences should be sorted lexicographically, and words within sequences should be in order.",
    "starter_code": "# Find all shortest word ladder transformation sequences.",
    "test_cases": [
      {
        "input": [
          "hit",
          "cog",
          "hot dot dog lot log cog"
        ],
        "expected_output": "hit hot dot dog cog\nhit hot lot log cog"
      },
      {
        "input": [
          "a",
          "c",
          "a b c"
        ],
        "expected_output": "a b c"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_334",
    "title": "Cheapest Flights Within K Stops",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nThere are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [from_i, to_i, price_i]` indicates that there is a flight from city `from_i` to city `to_i` with cost `price_i`. You are also given three integers `src`, `dst`, and `k`, return the cheapest price from `src` to `dst` with at most `k` stops. If there is no such route, return -1.\n\n**Constraints**\nInput format:\nFirst line: Three integers `n src dst`.\nSecond line: An integer `k`.\nNext lines: Each line represents a flight `from_i to_i price_i`. End input with a blank line.\n\nOutput format:\nA single integer, the cheapest price, or -1.",
    "starter_code": "# Find the cheapest flights within K stops.",
    "test_cases": [
      {
        "input": [
          "3 0 2",
          "1",
          "0 1 100",
          "1 2 100",
          "0 2 500",
          ""
        ],
        "expected_output": "200"
      },
      {
        "input": [
          "3 0 2",
          "0",
          "0 1 100",
          "1 2 100",
          "0 2 500",
          ""
        ],
        "expected_output": "500"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_335",
    "title": "Network Delay Time",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from `ui` to `vi`. We will send a signal from a given node `k`. Return the minimum time it takes for all `n` nodes to receive the signal. If it is impossible for all `n` nodes to receive the signal, return -1.\n\n**Constraints**\nInput format:\nFirst line: Two integers `n` (number of nodes) and `k` (start node).\nNext lines: Each line represents a travel time `u v w`. End input with a blank line.\n\nOutput format:\nA single integer, the minimum time, or -1.",
    "starter_code": "# Calculate the minimum time for all nodes to receive a signal in a network.",
    "test_cases": [
      {
        "input": [
          "4 2",
          "2 1 1",
          "2 3 1",
          "3 4 1",
          ""
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 1",
          "1 2 1",
          ""
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_336",
    "title": "Minimum Genetic Mutation",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nA gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', 'T'. Suppose we need to mutate a gene from `startGene` to `endGene` where each mutation takes one step. We are given a `bank` of valid gene mutations. A gene string can be mutated to another gene string if they differ by only one character, and the mutated gene string is in the `bank`. Given the `startGene`, `endGene`, and `bank`, return the minimum number of mutations needed to mutate from `startGene` to `endGene`. If there is no such mutation, return -1. Note that the `startGene` is not necessarily in the `bank`.\n\n**Constraints**\nInput format:\nFirst line: String `startGene`.\nSecond line: String `endGene`.\nThird line: Space-separated strings for `bank`.\n\nOutput format:\nA single integer, the minimum number of mutations, or -1.",
    "starter_code": "# Find the minimum number of genetic mutations.",
    "test_cases": [
      {
        "input": [
          "AACCGGTT",
          "AACCGGTA",
          "AACCGGTA"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "AACCGGTT",
          "AAACGGTA",
          "AACCGGTA AACCGCTA AAACGGTA"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_337",
    "title": "Word Break",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: Space-separated strings for `wordDict`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if a string can be segmented into a space-separated sequence of dictionary words.",
    "test_cases": [
      {
        "input": [
          "leetcode",
          "leet code"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "applepenapple",
          "apple pen"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_338",
    "title": "Word Break II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `wordDict`, return all such `valid` sentences that can be formed by breaking `s` into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words. The solution set must not contain duplicate sentences.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: Space-separated strings for `wordDict`.\n\nOutput format:\nEach valid sentence on a new line. Sentences should be sorted lexicographically.",
    "starter_code": "# Find all valid sentences that can be formed by breaking s into dictionary words.",
    "test_cases": [
      {
        "input": [
          "catsanddog",
          "cat cats and sand dog"
        ],
        "expected_output": "cat sand dog\ncats and dog"
      },
      {
        "input": [
          "pineapplepenapple",
          "apple pen applepen pine pineapple"
        ],
        "expected_output": "pine apple pen apple\npineapple pen apple\npine applepen apple"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_339",
    "title": "Decode String",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an encoded string, return its decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated `k` times. `k` is guaranteed to be a positive integer. You may assume that the input string is always valid; no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, `there won't be input like 3a or 2[4]`. The decoded string should not contain any digits and should only contain lowercase English letters.\n\n**Constraints**\nInput format:\nA single string `s`.\n\nOutput format:\nA single string, the decoded string.",
    "starter_code": "# Decode a given encoded string.",
    "test_cases": [
      {
        "input": [
          "3[a]2[bc]"
        ],
        "expected_output": "aaabcbc"
      },
      {
        "input": [
          "3[a2[c]]"
        ],
        "expected_output": "accaccacc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_340",
    "title": "Longest Absolute File Path",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nSuppose we have a file system represented in a string, where:\n- The string `\"dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext\"` represents:\n  `dir`\n  `  subdir1`\n  `  subdir2`\n  `    file.ext`\n- The directory `\"dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext\"` represents:\n  `dir`\n  `  subdir1`\n  `    file1.ext`\n  `    subsubdir1`\n  `  subdir2`\n  `    subsubdir2`\n  `      file2.ext`\n\nWe are interested in finding the length of the longest absolute path (file or directory) in a file system represented as a string. Return the length of the longest absolute path to a file (not a directory). If there is no file in the system, return 0.\n\n**Constraints**\nInput format:\nA single string `input` representing the file system.\n\nOutput format:\nA single integer, the length of the longest absolute file path.",
    "starter_code": "# Find the length of the longest absolute file path in a file system represented as a string.",
    "test_cases": [
      {
        "input": [
          "dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext"
        ],
        "expected_output": "20"
      },
      {
        "input": [
          "dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext"
        ],
        "expected_output": "32"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_341",
    "title": "Battleships in a Board",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an `m x n` `board` where `board[i][j]` is 'X' (a battleship) or '.' (empty), return the number of the battleships on `board`. Battleships can only be placed horizontally or vertically on `board`. In other words, they can only be made of the cells `1xN` (1 row, N columns) or `Nx1` (N rows, 1 column) cells. For example, the following is not a valid battleship: `X.X`. Battleships are separated by at least one empty cell. This means there are no adjacent battleships horizontally or vertically.\n\n**Constraints**\nInput format:\nFirst line: Two integers `m` and `n` for board dimensions.\nNext `m` lines: Each row of the board as space-separated characters ('X' or '.').\n\nOutput format:\nA single integer, the number of battleships.",
    "starter_code": "# Count the number of battleships on a board.",
    "test_cases": [
      {
        "input": [
          "3 3",
          "X . X",
          ". X .",
          "X . X"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "1 3",
          "X . X"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_342",
    "title": "Validate IP Address",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `IP`, return \"IPv4\" if the IP is a valid IPv4 address, \"IPv6\" if the IP is a valid IPv6 address, or \"Neither\" otherwise. A valid IPv4 address has the form \"X.X.X.X\" where each X is a number from 0 to 255. X cannot have leading zeros unless X is the number 0 itself. A valid IPv6 address has the form \"X:X:X:X:X:X:X:X\" where each X is a hexadecimal string (0-9, a-f, A-F) up to 4 digits long. It must not have leading zeros (unless it's just '0').\n\n**Constraints**\nInput format:\nA single string `IP`.\n\nOutput format:\nA single string: \"IPv4\", \"IPv6\", or \"Neither\".",
    "starter_code": "# Validate an IP address (IPv4 or IPv6).",
    "test_cases": [
      {
        "input": [
          "172.16.254.1"
        ],
        "expected_output": "IPv4"
      },
      {
        "input": [
          "2001:0db8:85a3:0:0:8A2E:0370:7334"
        ],
        "expected_output": "IPv6"
      },
      {
        "input": [
          "256.256.256.256"
        ],
        "expected_output": "Neither"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_343",
    "title": "Optimal Division",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given `n` integers, `nums[0], nums[1], ..., nums[n - 1]`, and `nums[0]` will always be greater than or equal to `nums[i]` where `i > 0`. You need to form expressions using these integers with division `/` as the only operator, such that the result of the expression is maximized. The number of expressions possible is exponential. Return the expression that gives the maximum result.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single string, the optimal division expression.",
    "starter_code": "# Find the optimal division expression to maximize the result.",
    "test_cases": [
      {
        "input": [
          "1000 100 10 2"
        ],
        "expected_output": "1000/(100/10/2)"
      },
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "2/3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_344",
    "title": "Delete Operation for Two Strings",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same. In one step, you can delete exactly one character in either string.\n\n**Constraints**\nInput format:\nFirst line: String `word1`.\nSecond line: String `word2`.\n\nOutput format:\nA single integer, the minimum number of steps.",
    "starter_code": "# Find the minimum number of steps to make two strings the same by deleting characters.",
    "test_cases": [
      {
        "input": [
          "sea",
          "eat"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "leetcode",
          "etco"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_345",
    "title": "Maximum Length of Pair Chain",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an array of `n` pairs `pairs` where `pairs[i] = [start_i, end_i]` and `start_i < end_i`. A pair `(c, d)` follows a pair `(a, b)` if `b < c`. Return the length of the longest chain which can be formed in this manner.\n\n**Constraints**\nInput format:\nEach line represents a pair `start end`. End input with a blank line.\n\nOutput format:\nA single integer, the length of the longest chain.",
    "starter_code": "# Find the length of the longest chain of pairs.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "2 3",
          "3 4",
          ""
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 2",
          "7 8",
          "4 5",
          ""
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_346",
    "title": "Number of Longest Increasing Subsequence",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums`, return the number of longest increasing subsequences. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\nA single integer, the number of longest increasing subsequences.",
    "starter_code": "# Count the number of longest increasing subsequences.",
    "test_cases": [
      {
        "input": [
          "1 3 5 4 7"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "2 2 2 2 2"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_347",
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven two strings `s1` and `s2`, return the lowest ASCII sum of deleted characters to make two strings equal. If two strings are equal, then all their characters are common. The ASCII sum of deleted characters is the sum of ASCII values of all characters that are deleted.\n\n**Constraints**\nInput format:\nFirst line: String `s1`.\nSecond line: String `s2`.\n\nOutput format:\nA single integer, the lowest ASCII sum of deleted characters.",
    "starter_code": "# Find the minimum ASCII delete sum to make two strings equal.",
    "test_cases": [
      {
        "input": [
          "sea",
          "eat"
        ],
        "expected_output": "231"
      },
      {
        "input": [
          "delete",
          "leet"
        ],
        "expected_output": "403"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_348",
    "title": "Partition to K Equal Sum Subsets",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal. Duplicates in `nums` should be handled correctly.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an array can be partitioned into K equal sum subsets.",
    "test_cases": [
      {
        "input": [
          "4 3 2 3 5 2 1",
          "4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 4",
          "3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_349",
    "title": "Can Partition K Subsets (Recursive with Memoization)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal. Implement this using recursion with memoization. Duplicates in `nums` should be handled correctly.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums`.\nSecond line: An integer `k`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Check if an array can be partitioned into K equal sum subsets using recursion with memoization.",
    "test_cases": [
      {
        "input": [
          "4 3 2 3 5 2 1",
          "4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 4",
          "3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_350",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given two integer arrays `nums1` and `nums2` of equal length `n`. We can swap `nums1[i]` and `nums2[i]` at every index `i`. Return the minimum number of swaps to make both `nums1` and `nums2` strictly increasing. The test cases are generated so that the answer will always exist.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `nums1`.\nSecond line: Space-separated integers for `nums2`.\n\nOutput format:\nA single integer, the minimum number of swaps.",
    "starter_code": "# Find the minimum number of swaps to make two sequences strictly increasing.",
    "test_cases": [
      {
        "input": [
          "1 3 5 4",
          "1 2 3 7"
        ],
        "expected_output": "1"
      },
      {
        "input": [
          "0 3 5 8 9",
          "2 1 4 6 9"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_351",
    "title": "Find K Closest Elements",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. An integer `a` is closer to `x` than an integer `b` if:\n- `|a - x| < |b - x|`, or\n- `|a - x| == |b - x|` and `a < b`\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers for `arr`.\nSecond line: An integer `k`.\nThird line: An integer `x`.\n\nOutput format:\nA single line of space-separated integers, the k closest elements.",
    "starter_code": "# Find the K closest elements to X in a sorted array.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "4",
          "3"
        ],
        "expected_output": "1 2 3 4"
      },
      {
        "input": [
          "1 2 3 4 5",
          "4",
          "-1"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_352",
    "title": "Split Array into Consecutive Subsequences",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given an integer array `nums` that is sorted in non-decreasing order. Determine if it is possible to split it into one or more subsequences such that each subsequence consists of consecutive integers and has a length of at least 3. Return `true` if you can obtain such a partitioning, otherwise return `false`.\n\n**Constraints**\nInput format:\nA single line of space-separated integers for `nums`.\n\nOutput format:\n'True' or 'False'.",
    "starter_code": "# Determine if an array can be split into consecutive subsequences of length at least 3.",
    "test_cases": [
      {
        "input": [
          "1 2 3 3 4 5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 3 4 4 5 5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 4 4 5"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_353",
    "title": "Longest Word in Dictionary through Deleting",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven a string `s` and a dictionary of strings `dictionary`, return the longest string in the `dictionary` that can be formed by deleting some characters from `s`. If there are multiple possible answers, return the longest word with the smallest lexicographical order. If there is no such string, return an empty string.\n\n**Constraints**\nInput format:\nFirst line: String `s`.\nSecond line: Space-separated strings for `dictionary`.\n\nOutput format:\nA single string, the longest word or an empty string.",
    "starter_code": "# Find the longest word in a dictionary that can be formed by deleting characters from a string.",
    "test_cases": [
      {
        "input": [
          "abpcplea",
          "ale apple monkey plea"
        ],
        "expected_output": "apple"
      },
      {
        "input": [
          "abpcplea",
          "a b c"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_354",
    "title": "Reverse Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, reverse the list, and return the reversed list.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the reversed linked list.",
    "starter_code": "# Reverse a singly linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "1 2 -1"
        ],
        "expected_output": "2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_355",
    "title": "Reverse Linked List (Recursive)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, reverse the list, and return the reversed list. Implement this recursively.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the reversed linked list.",
    "starter_code": "# Reverse a singly linked list recursively.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1"
        ],
        "expected_output": "5 4 3 2 1"
      },
      {
        "input": [
          "1 -1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_356",
    "title": "Middle of the Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a singly linked list, return the middle node of the list. If there are two middle nodes, return the second middle node.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the linked list from the middle node to the end.",
    "starter_code": "# Find the middle node of a singly linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1"
        ],
        "expected_output": "3 4 5"
      },
      {
        "input": [
          "1 2 3 4 5 6 -1"
        ],
        "expected_output": "4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_357",
    "title": "Delete Node in a Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead, you will be given access to the node to be deleted directly. It is guaranteed that the node to be deleted is not a tail node in the list.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the linked list nodes (ending with -1 for null).\nSecond line: An integer `node_val_to_delete` (value of the node to be deleted).\n\nOutput format:\nA single line of space-separated integers representing the modified linked list.",
    "starter_code": "# Delete a node in a singly-linked list given the node to be deleted (not head).",
    "test_cases": [
      {
        "input": [
          "4 5 1 9 -1",
          "5"
        ],
        "expected_output": "4 1 9"
      },
      {
        "input": [
          "4 5 1 9 -1",
          "1"
        ],
        "expected_output": "4 5 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_358",
    "title": "Remove Duplicates from Sorted List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the sorted linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the modified linked list.",
    "starter_code": "# Remove duplicates from a sorted linked list.",
    "test_cases": [
      {
        "input": [
          "1 1 2 -1"
        ],
        "expected_output": "1 2"
      },
      {
        "input": [
          "1 1 2 3 3 -1"
        ],
        "expected_output": "1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_359",
    "title": "Remove Duplicates from Sorted List II",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n\n**Constraints**\nInput format:\nSpace-separated integers representing the sorted linked list nodes (ending with -1 for null).\n\nOutput format:\nA single line of space-separated integers representing the modified linked list.",
    "starter_code": "# Remove all nodes that have duplicate numbers from a sorted linked list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 3 4 4 5 -1"
        ],
        "expected_output": "1 2 5"
      },
      {
        "input": [
          "1 1 1 2 3 -1"
        ],
        "expected_output": "2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_360",
    "title": "Partition List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before nodes greater than or equal to `x`. You should preserve the original relative order of the nodes in each of the two partitions.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the linked list nodes (ending with -1 for null).\nSecond line: An integer `x`.\n\nOutput format:\nA single line of space-separated integers representing the partitioned linked list.",
    "starter_code": "# Partition a linked list around a value x.",
    "test_cases": [
      {
        "input": [
          "1 4 3 2 5 2 -1",
          "3"
        ],
        "expected_output": "1 2 2 4 3 5"
      },
      {
        "input": [
          "2 1 -1",
          "2"
        ],
        "expected_output": "1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_361",
    "title": "Rotate List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nGiven the `head` of a linked list, rotate the list to the right by `k` places.\n\n**Constraints**\nInput format:\nFirst line: Space-separated integers representing the linked list nodes (ending with -1 for null).\nSecond line: An integer `k`.\n\nOutput format:\nA single line of space-separated integers representing the rotated linked list.",
    "starter_code": "# Rotate a linked list to the right by k places.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 -1",
          "2"
        ],
        "expected_output": "4 5 1 2 3"
      },
      {
        "input": [
          "0 1 2 -1",
          "4"
        ],
        "expected_output": "2 0 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_362",
    "title": "Flatten a Multilevel Doubly Linked List",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nYou are given a doubly linked list, which contains nodes that have a `next` pointer, a `prev` pointer, and an additional `child` pointer (which may or may not be `null`). These pointers form a multilevel doubly linked list. Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the `head` of the first level of the list. The value of `head.val` will be returned. The result should be returned as a flattened doubly linked list. The nodes should be flattened in order: current level, then its child level, then the next node on the current level.\n\n**Constraints**\nInput format:\nEach line represents a level of the list. Nodes on a level are space-separated. 'null' indicates no child. 'next' is used for next node, 'child' for child node. Example: `1 next 2 child 3 next 4` means node 1 points to 2, node 2 has child 3, node 3 points to 4. Input ends with a blank line.\n\nOutput format:\nA single line of space-separated integers representing the flattened linked list.",
    "starter_code": "# Flatten a multilevel doubly linked list.",
    "test_cases": [
      {
        "input": [
          "1 null 2 3 4 null 5 null 6",
          "null",
          "7 8 9 null 10",
          "null",
          "11 12",
          ""
        ],
        "expected_output": "1 2 3 7 8 11 12 9 10 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_363",
    "title": "Design Circular Deque",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign your implementation of the circular deque (double-ended queue). Your implementation should support following operations:\n- `MyCircularDeque(k)`: Constructor, set the size of the deque to be `k`.\n- `boolean insertFront()`: Adds an item at the front of Deque. Return `true` if the operation is successful.\n- `boolean insertLast()`: Adds an item at the rear of Deque. Return `true` if the operation is successful.\n- `boolean deleteFront()`: Deletes an item from the front of Deque. Return `true` if the operation is successful.\n- `boolean deleteLast()`: Deletes an item from the rear of Deque. Return `true` if the operation is successful.\n- `int getFront()`: Get the front item from the Deque. If the deque is empty, return -1.\n- `int getRear()`: Get the last item from the Deque. If the deque is empty, return -1.\n- `boolean isEmpty()`: Checks whether the circular deque is empty or not.\n- `boolean isFull()`: Checks whether the circular deque is full or not.\n\n**Constraints**\nInput format:\nFirst line: Constructor call: `MyCircularDeque k`.\nNext lines: Operations: `insertFront value`, `insertLast value`, `deleteFront`, `deleteLast`, `getFront`, `getRear`, `isEmpty`, `isFull`. End input with a blank line.\n\nOutput format:\nOutput for each operation on a new line.",
    "starter_code": "# Design a circular deque.",
    "test_cases": [
      {
        "input": [
          "MyCircularDeque 3",
          "insertLast 1",
          "insertLast 2",
          "insertFront 3",
          "insertFront 4",
          "getRear",
          "isFull",
          "deleteLast",
          "insertFront 4",
          "getFront",
          ""
        ],
        "expected_output": "True\nTrue\nTrue\nFalse\n2\nTrue\nTrue\nTrue\n4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_364",
    "title": "Design Circular Queue",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\". Your implementation should support following operations:\n- `MyCircularQueue(k)`: Constructor, set the size of the queue to be `k`.\n- `boolean enQueue(value)`: Insert an element into the circular queue. Return `true` if the operation is successful.\n- `boolean deQueue()`: Delete an element from the circular queue. Return `true` if the operation is successful.\n- `int Front()`: Get the front item from the queue. If the queue is empty, return -1.\n- `int Rear()`: Get the last item from the queue. If the queue is empty, return -1.\n- `boolean isEmpty()`: Checks whether the circular queue is empty or not.\n- `boolean isFull()`: Checks whether the circular queue is full or not.\n\n**Constraints**\nInput format:\nFirst line: Constructor call: `MyCircularQueue k`.\nNext lines: Operations: `enQueue value`, `deQueue`, `Front`, `Rear`, `isEmpty`, `isFull`. End input with a blank line.\n\nOutput format:\nOutput for each operation on a new line.",
    "starter_code": "# Design a circular queue.",
    "test_cases": [
      {
        "input": [
          "MyCircularQueue 3",
          "enQueue 1",
          "enQueue 2",
          "enQueue 3",
          "enQueue 4",
          "Rear",
          "isFull",
          "deQueue",
          "enQueue 4",
          "Rear",
          ""
        ],
        "expected_output": "True\nTrue\nTrue\nFalse\n3\nTrue\nTrue\nTrue\n4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "ALGO_365",
    "title": "Design HashMap without using built-in hash map library (Linear Probing)",
    "category": "Algorithms",
    "input_type": "stdin",
    "description_md": "**Task**\nDesign a HashMap without using any built-in hash map library. Implement the `MyHashMap` class using linear probing for collision resolution. The `key` and `value` will be integers. Assume `key` and `value` are non-negative. Each method should implement the following:\n- `MyHashMap()`: Initializes the object with an empty map.\n- `void put(int key, int value)`: Inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the value.\n- `int get(int key)`: Returns the value to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.\n- `void remove(int key)`: Removes the `key` and its corresponding value if the map contains the `key`.\n\n**Constraints**\nInput format:\nEach line represents an operation: `put key value`, `get key`, or `remove key`. End input with a blank line.\n\nOutput format:\nFor `get` operations, output the result on a new line.",
    "starter_code": "# Design a HashMap using linear probing.",
    "test_cases": [
      {
        "input": [
          "put 1 1",
          "put 2 2",
          "get 1",
          "get 3",
          "put 2 1",
          "get 2",
          "remove 2",
          "get 2",
          ""
        ],
        "expected_output": "1\n-1\n1\n-1"
      }
    ],
    "from": "AI"
  }
]