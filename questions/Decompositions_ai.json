[
  {
    "id": "decom_001",
    "title": "Reverse a String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single word as input and outputs the word in reverse order.\n\n**Constraints**\nThe input will be a single string consisting of alphabetic characters.\n\nInput format:\nA string.\n\nOutput format:\nA string (reversed).",
    "starter_code": "# Write a program that takes a single word as input and outputs the word in reverse order.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "olleh"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_002",
    "title": "Count Vowels",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of vowels (a, e, i, o, u, case-insensitive) in that string.\n\n**Constraints**\nThe input will be a single string. Only alphabetic characters will be considered for vowel counting.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a string as input and outputs the total count of vowels (a, e, i, o, u, case-insensitive) in that string.",
    "test_cases": [
      {
        "input": [
          "Programming"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_003",
    "title": "Check Palindrome",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single word as input and determines if it is a palindrome (reads the same forwards and backwards). Output `True` if it is a palindrome, otherwise `False`.\n\n**Constraints**\nThe input will be a single string consisting of alphabetic characters.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a single word as input and determines if it is a palindrome.",
    "test_cases": [
      {
        "input": [
          "madam"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_004",
    "title": "String Length",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs its length.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a string as input and outputs its length.",
    "test_cases": [
      {
        "input": [
          "challenge"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_005",
    "title": "Capitalize First Letter",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the string with its first letter capitalized and the rest in lowercase.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string as input and outputs the string with its first letter capitalized and the rest in lowercase.",
    "test_cases": [
      {
        "input": [
          "python"
        ],
        "expected_output": "Python"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_006",
    "title": "Concatenate Two Strings",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and outputs a single string that is the concatenation of the two inputs.\n\n**Constraints**\nInput format:\nTwo strings on separate lines.\n\nOutput format:\nA single string.",
    "starter_code": "# Write a program that takes two strings as input and outputs a single string that is the concatenation of the two inputs.",
    "test_cases": [
      {
        "input": [
          "Hello",
          "World"
        ],
        "expected_output": "HelloWorld"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_007",
    "title": "Remove Spaces from String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs a new string with all spaces removed.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string as input and outputs a new string with all spaces removed.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "helloworld"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_008",
    "title": "First Character of String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs its first character.\n\n**Constraints**\nThe input will be a non-empty string.\n\nInput format:\nA string.\n\nOutput format:\nA character.",
    "starter_code": "# Write a program that takes a string as input and outputs its first character.",
    "test_cases": [
      {
        "input": [
          "apple"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_009",
    "title": "Last Character of String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs its last character.\n\n**Constraints**\nThe input will be a non-empty string.\n\nInput format:\nA string.\n\nOutput format:\nA character.",
    "starter_code": "# Write a program that takes a string as input and outputs its last character.",
    "test_cases": [
      {
        "input": [
          "banana"
        ],
        "expected_output": "a"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_010",
    "title": "Is String Empty?",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if the string is empty, otherwise `False`.\n\n**Constraints**\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a string as input and outputs True if the string is empty, otherwise False.",
    "test_cases": [
      {
        "input": [
          ""
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_011",
    "title": "Sum of Array Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of all its elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the sum of all its elements.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_012",
    "title": "Average of Array Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the average of its elements. Assume the list will not be empty.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA floating-point number.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the average of its elements.",
    "test_cases": [
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "20.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_013",
    "title": "Find Maximum in Array",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the maximum value in the list.\n\n**Constraints**\nThe input will be a non-empty, space-separated string of integers.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the maximum value in the list.",
    "test_cases": [
      {
        "input": [
          "5 12 3 8 9"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_014",
    "title": "Find Minimum in Array",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the minimum value in the list.\n\n**Constraints**\nThe input will be a non-empty, space-separated string of integers.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the minimum value in the list.",
    "test_cases": [
      {
        "input": [
          "5 12 3 8 9"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_015",
    "title": "Filter Positive Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list containing only the positive numbers from the original list, in the same order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs a new list containing only the positive numbers from the original list.",
    "test_cases": [
      {
        "input": [
          "-1 2 -3 4 0 5"
        ],
        "expected_output": "2 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_016",
    "title": "Array Length",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of items as input and outputs the number of elements in the list.\n\n**Constraints**\nInput format:\nA space-separated string of items.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of items as input and outputs the number of elements in the list.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_017",
    "title": "Access Array Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings and an integer index as input. Output the element at the specified index.\n\n**Constraints**\nThe index will be valid (within the bounds of the list).\nInput format:\nLine 1: A space-separated string of strings.\nLine 2: An integer (index).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a list of strings and an integer index as input. Output the element at the specified index.",
    "test_cases": [
      {
        "input": [
          "red green blue",
          "1"
        ],
        "expected_output": "green"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_018",
    "title": "Append to List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a new integer as input. Output a new list with the new integer appended to the end.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers and a new integer as input. Output a new list with the new integer appended to the end.",
    "test_cases": [
      {
        "input": [
          "10 20",
          "30"
        ],
        "expected_output": "10 20 30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_019",
    "title": "Merge Two Arrays",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and outputs a single new list containing all elements from both lists, in the order they appeared.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: A space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes two lists of integers as input and outputs a single new list containing all elements from both lists.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_020",
    "title": "Count Occurrences in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings and a target string as input. Output the number of times the target string appears in the list.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of strings.\nLine 2: A string (target).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of strings and a target string as input. Output the number of times the target string appears in the list.",
    "test_cases": [
      {
        "input": [
          "apple orange apple banana",
          "apple"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_021",
    "title": "Simple Greeting Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `greet` that takes a string (name) as a parameter and returns a personalized greeting message in the format \"Hello, [name]!\".\n\n**Constraints**\nThe input `name` will be a string.\n\nInput (function call):\n`greet(\"Alice\")`\n\nOutput (return value):\nA string.",
    "starter_code": "def greet(name):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "Alice"
        ],
        "expected_output": "Hello, Alice!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_022",
    "title": "Add Two Numbers Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `add_numbers` that takes two integers as parameters and returns their sum.\n\n**Constraints**\nInput parameters will be integers.\n\nInput (function call):\n`add_numbers(5, 3)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def add_numbers(a, b):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5",
          "3"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_023",
    "title": "Is Even Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_even` that takes an integer as a parameter and returns `True` if the number is even, otherwise `False`.\n\n**Constraints**\nInput parameter will be an integer.\n\nInput (function call):\n`is_even(4)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_even(number):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_024",
    "title": "Convert Celsius to Fahrenheit Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `celsius_to_fahrenheit` that takes a temperature in Celsius as a float parameter and returns the equivalent temperature in Fahrenheit. The formula is $F = C * 9/5 + 32$.\n\n**Constraints**\nInput parameter will be a float.\n\nInput (function call):\n`celsius_to_fahrenheit(25.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def celsius_to_fahrenheit(celsius):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "25.0"
        ],
        "expected_output": "77.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_025",
    "title": "Calculate Rectangle Area Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_rectangle_area` that takes two float parameters, `length` and `width`, and returns the area of the rectangle.\n\n**Constraints**\nInput parameters will be floats.\n\nInput (function call):\n`calculate_rectangle_area(5.0, 4.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def calculate_rectangle_area(length, width):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5.0",
          "4.0"
        ],
        "expected_output": "20.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_026",
    "title": "Simple Calculator Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculator` that takes three parameters: two numbers (`num1`, `num2`) and an operator string (`op`, which can be \"+\", \"-\", \"*\", \"/\"). The function should return the result of applying the operator to the two numbers. For division, assume `num2` will not be zero.\n\n**Constraints**\n`num1` and `num2` will be integers or floats. `op` will be one of the specified strings.\n\nInput (function call):\n`calculator(10, 5, \"+\")`\n\nOutput (return value):\nAn integer or float.",
    "starter_code": "def calculator(num1, num2, op):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "10",
          "5",
          "+"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_027",
    "title": "Is Positive Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_positive` that takes an integer as a parameter and returns `True` if the number is positive, otherwise `False`.\n\n**Constraints**\nInput parameter will be an integer.\n\nInput (function call):\n`is_positive(-7)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_positive(number):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "-7"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_028",
    "title": "Get Max of Two Numbers Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `get_max` that takes two numbers as parameters and returns the larger of the two.\n\n**Constraints**\nInput parameters will be integers or floats.\n\nInput (function call):\n`get_max(15, 20)`\n\nOutput (return value):\nAn integer or float.",
    "starter_code": "def get_max(a, b):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "15",
          "20"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_029",
    "title": "Return First Element of List Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `get_first_element` that takes a list as a parameter and returns its first element. Assume the list will not be empty.\n\n**Constraints**\nInput parameter will be a non-empty list.\n\nInput (function call):\n`get_first_element([\"apple\", \"banana\", \"cherry\"])`\n\nOutput (return value):\nAny data type.",
    "starter_code": "def get_first_element(my_list):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[\"apple\", \"banana\", \"cherry\"]"
        ],
        "expected_output": "apple"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_030",
    "title": "Power Calculation Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `power` that takes two integer parameters, `base` and `exponent`, and returns `base` raised to the power of `exponent`.\n\n**Constraints**\nInput parameters will be non-negative integers.\n\nInput (function call):\n`power(2, 3)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def power(base, exponent):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_031",
    "title": "Perimeter of Square",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the side length of a square as input and outputs its perimeter.\n\n**Constraints**\nThe input will be a positive integer or float.\n\nInput format:\nA number.\n\nOutput format:\nA number.",
    "starter_code": "# Write a program that takes the side length of a square as input and outputs its perimeter.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "28"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_032",
    "title": "Area of Circle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the radius of a circle as input and outputs its area. Use $3.14159$ for Pi.\n\n**Constraints**\nThe input will be a positive integer or float.\n\nInput format:\nA number.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes the radius of a circle as input and outputs its area.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "78.53975"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_033",
    "title": "Miles to Kilometers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a distance in miles as input and outputs the equivalent distance in kilometers. Use the conversion factor: $1 \text{ mile} = 1.60934 \text{ kilometers}$.\n\n**Constraints**\nThe input will be a positive integer or float.\n\nInput format:\nA number.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes a distance in miles as input and outputs the equivalent distance in kilometers.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "16.0934"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_034",
    "title": "Currency Converter",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an amount in USD and an exchange rate (USD to EUR) as input, then outputs the equivalent amount in EUR.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: A float (USD amount).\nLine 2: A float (exchange rate, e.g., 0.85 for 1 USD = 0.85 EUR).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes an amount in USD and an exchange rate (USD to EUR) as input, then outputs the equivalent amount in EUR.",
    "test_cases": [
      {
        "input": [
          "100.0",
          "0.92"
        ],
        "expected_output": "92.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_035",
    "title": "Simple Interest Calculator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that calculates simple interest. It takes three inputs: principal amount, annual interest rate (as a decimal), and time (in years). Output the calculated simple interest. Formula: $I = P \times R \times T$.\n\n**Constraints**\nAll inputs will be positive numbers.\nInput format:\nLine 1: Principal (float).\nLine 2: Rate (float).\nLine 3: Time (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates simple interest. It takes three inputs: principal amount, annual interest rate (as a decimal), and time (in years).",
    "test_cases": [
      {
        "input": [
          "1000",
          "0.05",
          "2"
        ],
        "expected_output": "100.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_036",
    "title": "BMI Calculator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a person's weight in kilograms and height in meters as input. Calculate and output their Body Mass Index (BMI). Formula: $BMI = \text{weight} / (\text{height}^2)$.\n\n**Constraints**\nWeight and height will be positive numbers.\nInput format:\nLine 1: Weight (float).\nLine 2: Height (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes a person's weight in kilograms and height in meters as input. Calculate and output their Body Mass Index (BMI).",
    "test_cases": [
      {
        "input": [
          "70.0",
          "1.75"
        ],
        "expected_output": "22.857142857142858"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_037",
    "title": "Temperature Classifier",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a temperature (integer) as input and outputs 'Freezing' if it's 0 or below, 'Cold' if it's between 1 and 10, 'Moderate' if between 11 and 20, and 'Hot' if above 20.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a temperature (integer) as input and outputs 'Freezing', 'Cold', 'Moderate', or 'Hot'.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "Cold"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_038",
    "title": "Check if Number is in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `num` and two integers `lower_bound` and `upper_bound` as input. Output `True` if `num` is within the inclusive range [`lower_bound`, `upper_bound`], otherwise `False`.\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: num (integer).\nLine 2: lower_bound (integer).\nLine 3: upper_bound (integer).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes an integer num and two integers lower_bound and upper_bound as input. Output True if num is within the inclusive range [lower_bound, upper_bound], otherwise False.",
    "test_cases": [
      {
        "input": [
          "7",
          "5",
          "10"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_039",
    "title": "Leap Year Checker",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a year (integer) as input and outputs `True` if it's a leap year, otherwise `False`. A year is a leap year if it is divisible by 4, but not by 100 unless it is also divisible by 400.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer (year).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a year (integer) as input and outputs True if it's a leap year, otherwise False.",
    "test_cases": [
      {
        "input": [
          "2000"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_040",
    "title": "Voting Eligibility",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an age (integer) as input and outputs 'Eligible' if the age is 18 or older, otherwise 'Not Eligible'.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer (age).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes an age (integer) as input and outputs 'Eligible' or 'Not Eligible'.",
    "test_cases": [
      {
        "input": [
          "17"
        ],
        "expected_output": "Not Eligible"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_041",
    "title": "Pass/Fail Grade",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a numerical grade (integer) as input. If the grade is 50 or above, output 'Pass'; otherwise, output 'Fail'.\n\n**Constraints**\nInput will be an integer between 0 and 100.\n\nInput format:\nAn integer (grade).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a numerical grade (integer) as input. If the grade is 50 or above, output 'Pass'; otherwise, output 'Fail'.",
    "test_cases": [
      {
        "input": [
          "49"
        ],
        "expected_output": "Fail"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_042",
    "title": "Positive, Negative or Zero",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and outputs 'Positive' if it's greater than 0, 'Negative' if it's less than 0, and 'Zero' if it's equal to 0.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes an integer as input and outputs 'Positive', 'Negative', or 'Zero'.",
    "test_cases": [
      {
        "input": [
          "0"
        ],
        "expected_output": "Zero"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_043",
    "title": "Triangle Type by Sides",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers representing the lengths of a triangle's sides as input. Output 'Equilateral' if all sides are equal, 'Isosceles' if exactly two sides are equal, and 'Scalene' if no sides are equal.\n\n**Constraints**\nInputs will be positive integers. Assume valid triangle inequalities (sum of any two sides is greater than the third) are met.\nInput format:\nThree integers on separate lines.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes three integers representing the lengths of a triangle's sides as input. Output 'Equilateral', 'Isosceles', or 'Scalene'.",
    "test_cases": [
      {
        "input": [
          "3",
          "3",
          "5"
        ],
        "expected_output": "Isosceles"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_044",
    "title": "Simple Login Check",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a username and a password as input. If the username is \"admin\" AND the password is \"password123\", output 'Login Successful'; otherwise, output 'Login Failed'.\n\n**Constraints**\nInputs will be strings.\nInput format:\nLine 1: Username (string).\nLine 2: Password (string).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a username and a password as input. If the username is \"admin\" AND the password is \"password123\", output 'Login Successful'; otherwise, output 'Login Failed'.",
    "test_cases": [
      {
        "input": [
          "admin",
          "wrongpass"
        ],
        "expected_output": "Login Failed"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_045",
    "title": "Movie Ticket Price",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a person's age as input and outputs the movie ticket price: 'Child Price' (age < 12), 'Teen Price' (12 <= age < 18), 'Adult Price' (age >= 18).\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer (age).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a person's age as input and outputs the movie ticket price.",
    "test_cases": [
      {
        "input": [
          "15"
        ],
        "expected_output": "Teen Price"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_046",
    "title": "Traffic Light Logic",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string representing a traffic light color ('red', 'yellow', 'green') as input. Output 'Stop' for 'red', 'Caution' for 'yellow', and 'Go' for 'green'.\n\n**Constraints**\nInput will be one of the three specified strings, all lowercase.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string representing a traffic light color ('red', 'yellow', 'green') as input. Output 'Stop', 'Caution', or 'Go'.",
    "test_cases": [
      {
        "input": [
          "yellow"
        ],
        "expected_output": "Caution"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_047",
    "title": "Print Numbers 1 to N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer $N$ as input and prints all numbers from 1 to $N$, each on a new line.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that takes a positive integer N as input and prints all numbers from 1 to N.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1\n2\n3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_048",
    "title": "Sum of First N Integers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer $N$ as input and calculates the sum of all integers from 1 to $N$. Output the sum.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a positive integer N as input and calculates the sum of all integers from 1 to N.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_049",
    "title": "Print Even Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer $N$ as input and prints all even numbers from 1 to $N$, each on a new line.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that takes a positive integer N as input and prints all even numbers from 1 to N.",
    "test_cases": [
      {
        "input": [
          "6"
        ],
        "expected_output": "2\n4\n6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_050",
    "title": "Multiplication Table",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `num` as input and prints its multiplication table from 1 to 5. Each line should be in the format: `num x i = result`.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of strings.",
    "starter_code": "# Write a program that takes an integer num as input and prints its multiplication table from 1 to 5.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_051",
    "title": "Countdown Timer",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer $N$ as input and prints numbers from $N$ down to 1, each on a new line, followed by \"Go!\" on the last line.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of integers and a final string.",
    "starter_code": "# Write a program that takes a positive integer N as input and prints numbers from N down to 1, followed by \"Go!\".",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "3\n2\n1\nGo!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_052",
    "title": "Count Characters in String (Loop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a character as input. Using a loop, count and output how many times the character appears in the string (case-sensitive).\n\n**Constraints**\nInput format:\nLine 1: A string.\nLine 2: A single character string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a string and a character as input. Using a loop, count how many times the character appears in the string.",
    "test_cases": [
      {
        "input": [
          "programming",
          "m"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_053",
    "title": "Print Stars in a Square",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer $N$ as input and prints a solid square of stars with $N$ rows and $N$ columns.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that takes an integer N as input and prints a solid square of stars with N rows and N columns.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "***\n***\n***"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_054",
    "title": "Print Right-Angled Triangle (Stars)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `height` as input and prints a right-angled triangle pattern of stars with that height. The triangle should have its right angle at the bottom-left.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that takes an integer height as input and prints a right-angled triangle pattern of stars with that height.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "*\n**\n***\n****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_055",
    "title": "Inverted Right-Angled Triangle (Stars)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `height` as input and prints an inverted right-angled triangle pattern of stars with that height. The triangle should have its right angle at the top-left.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that takes an integer height as input and prints an inverted right-angled triangle pattern of stars with that height.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "****\n***\n**\n*"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_056",
    "title": "Hollow Square of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer $N$ as input and prints a hollow square of stars with $N$ rows and $N$ columns. For $N=1$ or $N=2$, print a solid square.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that takes an integer N as input and prints a hollow square of stars with N rows and N columns.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "****\n* *\n* *\n****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_057",
    "title": "Pyramid of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `height` as input and prints a full pyramid of stars with that height.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that takes an integer height as input and prints a full pyramid of stars with that height.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "  *\n ***\n*****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_058",
    "title": "Number Pattern (Increasing)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer $N$ as input and prints a number pattern where the $i$-th row contains numbers from 1 to $i$.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers.",
    "starter_code": "# Write a program that takes an integer N as input and prints a number pattern.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1\n1 2\n1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_059",
    "title": "Simple FizzBuzz-like",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nFor numbers from 1 to 10 (inclusive), write a program that prints 'Code' for multiples of 3, 'Challenge' for multiples of 5, and 'CodeChallenge' for multiples of both 3 and 5. Otherwise, print the number. Each output should be on a new line.\n\n**Constraints**\nNo direct input, range is fixed from 1 to 10.\n\nInput format:\nNone (implicitly 1 to 10).\n\nOutput format:\nMultiple lines of strings or integers.",
    "starter_code": "# Write a program for a simplified FizzBuzz problem.",
    "test_cases": [
      {
        "input": [
          ""
        ],
        "expected_output": "1\n2\nCode\n4\nChallenge\nCode\n7\n8\nCode\nChallenge"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_060",
    "title": "Count Evens in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the count of even numbers within the list.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the count of even numbers.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_061",
    "title": "Sum of Digits",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and outputs the sum of its digits.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a non-negative integer as input and outputs the sum of its digits.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_062",
    "title": "Smallest of Three",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers as input and outputs the smallest among them.\n\n**Constraints**\nInputs will be integers.\nInput format:\nThree integers on separate lines.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes three integers as input and outputs the smallest among them.",
    "test_cases": [
      {
        "input": [
          "10",
          "5",
          "8"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_063",
    "title": "Swap Two Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers as input and outputs them in swapped order. You can use a temporary variable or arithmetic operations for swapping.\n\n**Constraints**\nInputs will be integers.\nInput format:\nTwo integers on separate lines.\n\nOutput format:\nTwo integers on separate lines, swapped.",
    "starter_code": "# Write a program that takes two integers as input and outputs them in swapped order.",
    "test_cases": [
      {
        "input": [
          "5",
          "10"
        ],
        "expected_output": "10\n5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_064",
    "title": "Number to Word (1-3)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer from 1 to 3 as input and outputs its corresponding word ('One', 'Two', 'Three'). If the number is outside this range, output 'Invalid input'.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes an integer from 1 to 3 as input and outputs its corresponding word.",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "Two"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_065",
    "title": "Simple Grade Classifier",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a numerical grade (integer) as input and outputs 'A' for 90-100, 'B' for 80-89, 'C' for 70-79, 'D' for 60-69, and 'F' for anything below 60.\n\n**Constraints**\nInput will be an integer between 0 and 100.\n\nInput format:\nAn integer (grade).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a numerical grade (integer) as input and outputs its letter grade.",
    "test_cases": [
      {
        "input": [
          "85"
        ],
        "expected_output": "B"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_066",
    "title": "Sum of Even Numbers in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Calculate and output the sum of all even numbers within that inclusive range.\n\n**Constraints**\nInputs will be integers, `start` <= `end`.\nInput format:\nLine 1: start (integer).\nLine 2: end (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes two integers, start and end, as input. Calculate and output the sum of all even numbers within that inclusive range.",
    "test_cases": [
      {
        "input": [
          "1",
          "6"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_067",
    "title": "Find Longest Word in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of words (strings) as input and outputs the longest word in the list. If there are multiple words of the same longest length, return the first one encountered.\n\n**Constraints**\nInput format:\nA space-separated string of words.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a list of words (strings) as input and outputs the longest word in the list.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry"
        ],
        "expected_output": "banana"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_068",
    "title": "Remove First Occurrence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a target integer as input. Output a new list with the *first* occurrence of the target integer removed. If the target is not found, return the original list unchanged.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (target).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers and a target integer as input. Output a new list with the first occurrence of the target integer removed.",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4",
          "2"
        ],
        "expected_output": "1 3 2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_069",
    "title": "Reverse a List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list with the elements in reverse order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs a new list with the elements in reverse order.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_070",
    "title": "Print Diamond of Stars (Small)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer `size` as input and prints a diamond shape of stars. The size represents the width of the widest part of the diamond. Assume `size` is 3 or 5 for simplicity.\n\n**Constraints**\nInput will be an odd integer (3 or 5).\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that takes an odd integer size as input and prints a diamond shape of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": " *\n***\n *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_071",
    "title": "Factorial Calculation (Loop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer $N$ as input and calculates its factorial (product of all positive integers up to $N$). Output the factorial.\n\n**Constraints**\nInput will be a non-negative integer (0 to 10 for simplicity).\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a non-negative integer N as input and calculates its factorial.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_072",
    "title": "Check if List is Sorted (Ascending)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if the list is sorted in non-decreasing (ascending) order, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a list of integers as input and outputs True if the list is sorted in non-decreasing order, otherwise False.",
    "test_cases": [
      {
        "input": [
          "1 3 2 4"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_073",
    "title": "Count Words in Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input and outputs the number of words in the sentence. Assume words are separated by single spaces.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a sentence (string) as input and outputs the number of words in the sentence.",
    "test_cases": [
      {
        "input": [
          "This is a sample sentence"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_074",
    "title": "Find Index of Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings and a target string as input. Output the 0-based index of the *first* occurrence of the target string in the list. If the target is not found, output -1.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of strings.\nLine 2: A string (target).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of strings and a target string as input. Output the 0-based index of the first occurrence of the target string in the list.",
    "test_cases": [
      {
        "input": [
          "apple orange grape apple",
          "grape"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_075",
    "title": "Filter Negative Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list containing only the negative numbers from the original list, in the same order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs a new list containing only the negative numbers from the original list.",
    "test_cases": [
      {
        "input": [
          "1 -2 3 -4 0 5"
        ],
        "expected_output": "-2 -4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_076",
    "title": "Simple List Rotation (Left by 1)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list where the elements are rotated one position to the left. The first element should move to the end.\n\n**Constraints**\nInput list will have at least one element.\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs a new list where the elements are rotated one position to the left.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "2 3 4 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_077",
    "title": "Acronym Generator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a multi-word string (e.g., \"Daily Coding Challenge\") as input and returns its acronym (e.g., \"DCC\"). The acronym should be formed by taking the first letter of each word and converting it to uppercase.\n\n**Constraints**\nInput will be a string with words separated by single spaces. Words will consist of alphabetic characters.\n\nInput format:\nA string.\n\nOutput format:\nA string (acronym).",
    "starter_code": "# Write a program that takes a multi-word string as input and returns its acronym.",
    "test_cases": [
      {
        "input": [
          "Hyper Text Markup Language"
        ],
        "expected_output": "HTML"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_078",
    "title": "Convert String to Uppercase",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the entire string in uppercase.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string as input and outputs the entire string in uppercase.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "HELLO WORLD"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_079",
    "title": "Simple Data Type Conversion (String to Int)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string representation of an integer as input and outputs its integer equivalent.\n\n**Constraints**\nInput will be a string consisting only of digits.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a string representation of an integer as input and outputs its integer equivalent.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "123"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_080",
    "title": "Print Numbers and Squares",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer $N$ as input and for each number from 1 to $N$, prints the number and its square, separated by a space, on a new line.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of \"number square\" strings.",
    "starter_code": "# Write a program that takes a positive integer N as input and for each number from 1 to N, prints the number and its square.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 1\n2 4\n3 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_081",
    "title": "Check if All Elements are Positive",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if all elements in the list are positive, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a list of integers as input and outputs True if all elements in the list are positive, otherwise False.",
    "test_cases": [
      {
        "input": [
          "1 5 8 -2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_082",
    "title": "Vowel or Consonant Checker",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single lowercase alphabetic character as input and outputs 'Vowel' if it's a vowel (a, e, i, o, u), otherwise 'Consonant'.\n\n**Constraints**\nInput will be a single lowercase alphabetic character.\n\nInput format:\nA string (single character).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a single lowercase alphabetic character as input and outputs 'Vowel' or 'Consonant'.",
    "test_cases": [
      {
        "input": [
          "c"
        ],
        "expected_output": "Consonant"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_083",
    "title": "Sum of Elements at Even Indices",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of elements located at even indices (0, 2, 4, ...).\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the sum of elements located at even indices.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "90"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_084",
    "title": "Print Characters of String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and prints each character of the string on a new line.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nMultiple lines of characters.",
    "starter_code": "# Write a program that takes a string as input and prints each character of the string on a new line.",
    "test_cases": [
      {
        "input": [
          "code"
        ],
        "expected_output": "c\no\nd\ne"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_085",
    "title": "Calculate Hypotenuse",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the lengths of the two shorter sides of a right-angled triangle (`a` and `b`) as input. Calculate and output the length of the hypotenuse (`c`). Formula: $c = \\sqrt{a^2 + b^2}$. Round the output to two decimal places.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: side a (float).\nLine 2: side b (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes the lengths of the two shorter sides of a right-angled triangle (a and b) as input. Calculate and output the length of the hypotenuse (c).",
    "test_cases": [
      {
        "input": [
          "3.0",
          "4.0"
        ],
        "expected_output": "5.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_086",
    "title": "Basic Unit Converter (Feet to Inches)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a length in feet as input and outputs the equivalent length in inches. (1 foot = 12 inches).\n\n**Constraints**\nInput will be a non-negative number.\n\nInput format:\nA number.\n\nOutput format:\nA number.",
    "starter_code": "# Write a program that takes a length in feet as input and outputs the equivalent length in inches.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "60"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_087",
    "title": "Check if Number is Prime (Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer $N$ as input and outputs `True` if $N$ is a prime number, otherwise `False`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For simplicity, consider numbers up to 20.\n\n**Constraints**\nInput will be an integer between 1 and 20.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes an integer N as input and outputs True if N is a prime number, otherwise False.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_088",
    "title": "Calculate GCD of Two Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers as input and outputs their Greatest Common Divisor (GCD) using the Euclidean algorithm.\n\n**Constraints**\nInputs will be positive integers.\nInput format:\nLine 1: Integer 1.\nLine 2: Integer 2.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes two positive integers as input and outputs their Greatest Common Divisor (GCD).",
    "test_cases": [
      {
        "input": [
          "48",
          "18"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_089",
    "title": "Find Second Largest in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers as input and outputs the second largest number in the list.\n\n**Constraints**\nThe list will contain at least two distinct integers.\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of distinct integers as input and outputs the second largest number in the list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 15"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_090",
    "title": "Reverse Words in a Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the sentence with the order of words reversed. (e.g., \"hello world\" becomes \"world hello\").\n\n**Constraints**\nWords are separated by single spaces.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a sentence as input and outputs the sentence with the order of words reversed.",
    "test_cases": [
      {
        "input": [
          "python is fun"
        ],
        "expected_output": "fun is python"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_091",
    "title": "Count Words Starting with Specific Letter",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and a single character (letter) as input. Output the count of words in the sentence that start with that specific letter (case-insensitive).\n\n**Constraints**\nInput format:\nLine 1: A string (sentence).\nLine 2: A string (single letter).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a sentence and a single character (letter) as input. Output the count of words in the sentence that start with that specific letter.",
    "test_cases": [
      {
        "input": [
          "Apple banana cherry Apple",
          "a"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_092",
    "title": "Generate Fibonacci Sequence (N terms)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer $N$ as input and outputs the first $N$ terms of the Fibonacci sequence, separated by spaces. The sequence starts with 0 and 1.\n\n**Constraints**\nInput will be a positive integer up to 10.\n\nInput format:\nAn integer.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a positive integer N as input and outputs the first N terms of the Fibonacci sequence.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "0 1 1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_093",
    "title": "Calculate Sum of Even Numbers in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of all the even numbers in that list.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the sum of all the even numbers in that list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_094",
    "title": "Find Common Elements in Two Lists",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and outputs a new list containing only the elements that are common to both lists, maintaining the order from the first list and without duplicates.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: A space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes two lists of integers as input and outputs a new list containing only the elements that are common to both lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6"
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_095",
    "title": "String Contains Substring",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input: a main string and a substring. Output `True` if the main string contains the substring, otherwise `False` (case-sensitive).\n\n**Constraints**\nInput format:\nLine 1: Main string.\nLine 2: Substring.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes two strings as input: a main string and a substring. Output True if the main string contains the substring, otherwise False.",
    "test_cases": [
      {
        "input": [
          "programming",
          "gram"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_096",
    "title": "Calculate Product of List Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the product of all its elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the product of all its elements.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_097",
    "title": "Replace Character in String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string, an old character, and a new character as input. Output a new string where all occurrences of the old character are replaced with the new character.\n\n**Constraints**\nInput format:\nLine 1: Original string.\nLine 2: Old character (single char string).\nLine 3: New character (single char string).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string, an old character, and a new character as input. Output a new string where all occurrences of the old character are replaced with the new character.",
    "test_cases": [
      {
        "input": [
          "apple",
          "p",
          "b"
        ],
        "expected_output": "abble"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_098",
    "title": "Print Square of Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer $N$ as input and prints an $N \times N$ square where each row contains numbers from 1 to $N$.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of space-separated numbers.",
    "starter_code": "# Write a program that takes an integer N as input and prints an N x N square where each row contains numbers from 1 to N.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 3\n1 2 3\n1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_099",
    "title": "Calculate Triangle Area (Base & Height)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the base and height of a triangle as input. Calculate and output its area. Formula: $Area = 0.5 \times \text{base} \times \text{height}$.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Base (float).\nLine 2: Height (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes the base and height of a triangle as input. Calculate and output its area.",
    "test_cases": [
      {
        "input": [
          "10.0",
          "5.0"
        ],
        "expected_output": "25.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_100",
    "title": "Count Vowels Using Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `count_vowels` that takes a string as input and returns the total count of vowels (a, e, i, o, u, case-insensitive) in that string.\n\n**Constraints**\nInput will be a single string. Only alphabetic characters will be considered for vowel counting.\n\nInput (function call):\n`count_vowels(\"Elephant\")`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def count_vowels(text):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "Elephant"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_101",
    "title": "Filter Odd Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list containing only the odd numbers from the original list, in the same order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs a new list containing only the odd numbers from the original list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "1 3 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_102",
    "title": "Concatenate List Elements to String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings as input and outputs a single concatenated string of all elements, without any separators.\n\n**Constraints**\nInput format:\nA space-separated string of words.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a list of strings as input and outputs a single concatenated string of all elements.",
    "test_cases": [
      {
        "input": [
          "hello world python"
        ],
        "expected_output": "helloworldpython"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_103",
    "title": "Count Elements Greater Than N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and an integer `N` as input. Output the count of elements in the list that are strictly greater than `N`.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer N.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers and an integer N as input. Output the count of elements in the list that are strictly greater than N.",
    "test_cases": [
      {
        "input": [
          "10 20 30 5 15",
          "15"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_104",
    "title": "Calculate Sum of Squares of List Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of the squares of all its elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the sum of the squares of all its elements.",
    "test_cases": [
      {
        "input": [
          "1 2 3"
        ],
        "expected_output": "14"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_105",
    "title": "Remove Duplicates from Sorted List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers as input and outputs a new list with all duplicate elements removed, preserving the order.\n\n**Constraints**\nInput format:\nA space-separated string of sorted integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a sorted list of integers as input and outputs a new list with all duplicate elements removed.",
    "test_cases": [
      {
        "input": [
          "1 1 2 3 3 3 4"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_106",
    "title": "Swap First and Last Elements of List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list with the first and last elements swapped. Assume the list has at least two elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs a new list with the first and last elements swapped.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 2 3 4 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_107",
    "title": "Check if Element Exists in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings and a target string as input. Output `True` if the target string exists anywhere in the list, otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of strings.\nLine 2: A string (target).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a list of strings and a target string as input. Output True if the target string exists anywhere in the list, otherwise False.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry",
          "banana"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_108",
    "title": "Remove Nth Occurrence of Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers, a target integer, and an integer `n` (occurrence) as input. Output a new list with the `n`-th occurrence of the target integer removed. If the `n`-th occurrence doesn't exist, return the original list.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (target).\nLine 3: An integer (n-th occurrence).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers, a target integer, and an integer n (occurrence) as input. Output a new list with the n-th occurrence of the target integer removed.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 2 4",
          "2",
          "2"
        ],
        "expected_output": "1 2 3 2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_109",
    "title": "Count Uppercase Letters in String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of uppercase letters in it.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a string as input and outputs the total count of uppercase letters in it.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_110",
    "title": "Check if String Contains Only Digits",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if the string contains only digits, otherwise `False`.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a string as input and outputs True if the string contains only digits, otherwise False.",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_111",
    "title": "Remove All Occurrences of Character",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a character as input. Output a new string with all occurrences of the character removed.\n\n**Constraints**\nInput format:\nLine 1: Original string.\nLine 2: Character to remove (single char string).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string and a character as input. Output a new string with all occurrences of the character removed.",
    "test_cases": [
      {
        "input": [
          "programming",
          "g"
        ],
        "expected_output": "programmin"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_112",
    "title": "Reverse Words with Same Case",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the sentence with each word reversed, but keeping the original case of each character. For example, \"Hello World\" -> \"olleH dlroW\".\n\n**Constraints**\nWords are separated by single spaces.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a sentence as input and outputs the sentence with each word reversed, keeping original case.",
    "test_cases": [
      {
        "input": [
          "Python Is Fun"
        ],
        "expected_output": "nohtyP sI nuF"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_113",
    "title": "Count Words Longer Than N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and an integer `N` as input. Output the count of words in the sentence that have a length greater than `N`.\n\n**Constraints**\nInput format:\nLine 1: A string (sentence).\nLine 2: An integer N.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a sentence and an integer N as input. Output the count of words in the sentence that have a length greater than N.",
    "test_cases": [
      {
        "input": [
          "This is a sample sentence",
          "4"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_114",
    "title": "Check Anagrams (Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two words as input and outputs `True` if they are anagrams of each other (contain the same characters, same count, regardless of order), otherwise `False`. Assume inputs are lowercase alphabetic characters.\n\n**Constraints**\nInput format:\nLine 1: Word 1 (string).\nLine 2: Word 2 (string).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes two words as input and outputs True if they are anagrams of each other.",
    "test_cases": [
      {
        "input": [
          "listen",
          "silent"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_115",
    "title": "Remove First and Last Character",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs a new string with its first and last characters removed. Assume the input string has at least two characters.\n\n**Constraints**\nThe input will be a string with length >= 2.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string as input and outputs a new string with its first and last characters removed.",
    "test_cases": [
      {
        "input": [
          "example"
        ],
        "expected_output": "xampl"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_116",
    "title": "Average of Numbers Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_average` that takes a list of numbers as a parameter and returns their average. Assume the list will not be empty.\n\n**Constraints**\nInput parameter will be a non-empty list of numbers.\n\nInput (function call):\n`calculate_average([10, 20, 30])`\n\nOutput (return value):\nA float.",
    "starter_code": "def calculate_average(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[10, 20, 30]"
        ],
        "expected_output": "20.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_117",
    "title": "Max of List Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `find_max` that takes a list of integers as a parameter and returns the maximum value in the list. Assume the list will not be empty.\n\n**Constraints**\nInput parameter will be a non-empty list of integers.\n\nInput (function call):\n`find_max([5, 12, 3, 8])`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def find_max(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[5, 12, 3, 8]"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_118",
    "title": "Area of Triangle Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_triangle_area` that takes two float parameters, `base` and `height`, and returns the area of the triangle. Formula: $Area = 0.5 \\times \\text{base} \\times \\text{height}$.\n\n**Constraints**\nInput parameters will be floats.\n\nInput (function call):\n`calculate_triangle_area(10.0, 5.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def calculate_triangle_area(base, height):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "10.0",
          "5.0"
        ],
        "expected_output": "25.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_119",
    "title": "Is Palindrome Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_palindrome` that takes a single word (string) as input and returns `True` if it is a palindrome, otherwise `False`.\n\n**Constraints**\nInput will be a string consisting of alphabetic characters.\n\nInput (function call):\n`is_palindrome(\"level\")`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_palindrome(word):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "level"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_120",
    "title": "Fahrenheit to Celsius Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `fahrenheit_to_celsius` that takes a temperature in Fahrenheit as a float parameter and returns the equivalent temperature in Celsius. The formula is $C = (F - 32) \\times 5/9$.\n\n**Constraints**\nInput parameter will be a float.\n\nInput (function call):\n`fahrenheit_to_celsius(68.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def fahrenheit_to_celsius(fahrenheit):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "68.0"
        ],
        "expected_output": "20.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_121",
    "title": "Get List Length Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `get_list_length` that takes a list as a parameter and returns its number of elements.\n\n**Constraints**\nInput parameter will be a list.\n\nInput (function call):\n`get_list_length([1, 2, 3, 4])`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def get_list_length(my_list):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 3, 4]"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_122",
    "title": "Concatenate Two Lists Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `concatenate_lists` that takes two lists as parameters and returns a new list containing all elements from both lists, in order.\n\n**Constraints**\nInput parameters will be lists.\n\nInput (function call):\n`concatenate_lists([1, 2], [3, 4])`\n\nOutput (return value):\nA list (e.g., as a string representation).",
    "starter_code": "def concatenate_lists(list1, list2):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2]",
          "[3, 4]"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_123",
    "title": "Reverse String Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `reverse_string` that takes a string as a parameter and returns the string in reverse order.\n\n**Constraints**\nInput parameter will be a string.\n\nInput (function call):\n`reverse_string(\"abc\")`\n\nOutput (return value):\nA string.",
    "starter_code": "def reverse_string(s):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "cba"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_124",
    "title": "Check Age Group Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `check_age_group` that takes an integer `age` as input and returns 'Child' (age < 13), 'Teen' (13 <= age < 20), or 'Adult' (age >= 20).\n\n**Constraints**\nInput will be a positive integer.\n\nInput (function call):\n`check_age_group(16)`\n\nOutput (return value):\nA string.",
    "starter_code": "def check_age_group(age):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "Teen"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_125",
    "title": "Calculate Simple Sales Tax",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an item's price (float) and a sales tax rate (float, e.g., 0.05 for 5%) as input. Output the calculated sales tax amount. Round to two decimal places.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Price (float).\nLine 2: Tax Rate (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes an item's price and a sales tax rate as input. Output the calculated sales tax amount.",
    "test_cases": [
      {
        "input": [
          "100.0",
          "0.05"
        ],
        "expected_output": "5.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_126",
    "title": "Convert Days to Hours",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a number of days as input and outputs the equivalent number of hours.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a number of days as input and outputs the equivalent number of hours.",
    "test_cases": [
      {
        "input": [
          "2"
        ],
        "expected_output": "48"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_127",
    "title": "Travel Time Calculator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes distance (km) and average speed (km/h) as input. Output the estimated travel time in hours. Assume speed is always positive.\n\n**Constraints**\nInputs will be positive floats.\nInput format:\nLine 1: Distance (float).\nLine 2: Speed (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes distance (km) and average speed (km/h) as input. Output the estimated travel time in hours.",
    "test_cases": [
      {
        "input": [
          "100.0",
          "50.0"
        ],
        "expected_output": "2.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_128",
    "title": "Even or Odd Checker",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and outputs 'Even' if it's an even number, otherwise 'Odd'.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes an integer as input and outputs 'Even' or 'Odd'.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "Odd"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_129",
    "title": "Check if Character is Digit",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character (string) as input and outputs `True` if it is a digit ('0'-'9'), otherwise `False`.\n\n**Constraints**\nInput will be a single character string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a single character (string) as input and outputs True if it is a digit, otherwise False.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_130",
    "title": "Check for Uppercase Character",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character (string) as input and outputs `True` if it is an uppercase letter ('A'-'Z'), otherwise `False`.\n\n**Constraints**\nInput will be a single character string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a single character (string) as input and outputs True if it is an uppercase letter, otherwise False.",
    "test_cases": [
      {
        "input": [
          "Q"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_131",
    "title": "Divisible by 3 and 5",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input. Output `True` if the number is divisible by both 3 AND 5, otherwise `False`.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes an integer as input. Output True if the number is divisible by both 3 AND 5, otherwise False.",
    "test_cases": [
      {
        "input": [
          "15"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_132",
    "title": "Weekday or Weekend",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string representing a day of the week (e.g., 'Monday', 'Saturday') as input. Output 'Weekend' if it's 'Saturday' or 'Sunday', otherwise 'Weekday'.\n\n**Constraints**\nInput will be a string (case-sensitive as provided).\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string representing a day of the week as input. Output 'Weekend' or 'Weekday'.",
    "test_cases": [
      {
        "input": [
          "Sunday"
        ],
        "expected_output": "Weekend"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_133",
    "title": "Smallest of Four Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes four integers as input and outputs the smallest among them.\n\n**Constraints**\nInputs will be integers.\nInput format:\nFour integers on separate lines.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes four integers as input and outputs the smallest among them.",
    "test_cases": [
      {
        "input": [
          "10",
          "3",
          "15",
          "7"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_134",
    "title": "Print N Times String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a positive integer `N` as input. Print the string `N` times, each on a new line.\n\n**Constraints**\nInput format:\nLine 1: A string.\nLine 2: An integer N.\n\nOutput format:\nMultiple lines of strings.",
    "starter_code": "# Write a program that takes a string and a positive integer N as input. Print the string N times.",
    "test_cases": [
      {
        "input": [
          "Python",
          "3"
        ],
        "expected_output": "Python\nPython\nPython"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_135",
    "title": "Sum of Odd Numbers in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Calculate and output the sum of all odd numbers within that inclusive range.\n\n**Constraints**\nInputs will be integers, `start` <= `end`.\nInput format:\nLine 1: start (integer).\nLine 2: end (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes two integers, start and end, as input. Calculate and output the sum of all odd numbers within that inclusive range.",
    "test_cases": [
      {
        "input": [
          "1",
          "7"
        ],
        "expected_output": "16"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_136",
    "title": "Count Down By Step",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `start` and a positive integer `step` as input. Print numbers from `start` down to 1 (inclusive), decrementing by `step` each time. Each number should be on a new line.\n\n**Constraints**\nInputs will be positive integers.\nInput format:\nLine 1: start (integer).\nLine 2: step (integer).\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that takes a positive integer start and a positive integer step as input. Print numbers from start down to 1.",
    "test_cases": [
      {
        "input": [
          "10",
          "3"
        ],
        "expected_output": "10\n7\n4\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_137",
    "title": "Print Characters with Index",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input. For each character in the string, print its 0-based index followed by a colon and the character itself, each on a new line.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nMultiple lines of \"index: character\" strings.",
    "starter_code": "# Write a program that takes a string as input. For each character in the string, print its 0-based index followed by a colon and the character itself.",
    "test_cases": [
      {
        "input": [
          "word"
        ],
        "expected_output": "0: w\n1: o\n2: r\n3: d"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_138",
    "title": "Calculate Sum of Absolute Values in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of the absolute values of all its elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the sum of the absolute values of all its elements.",
    "test_cases": [
      {
        "input": [
          "-1 2 -3 4"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_139",
    "title": "Find Index of Smallest Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the 0-based index of the *first* occurrence of the smallest element in the list.\n\n**Constraints**\nThe input will be a non-empty, space-separated string of integers.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the 0-based index of the first occurrence of the smallest element in the list.",
    "test_cases": [
      {
        "input": [
          "5 12 3 8 3"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_140",
    "title": "Replace All Occurrences in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers, a `target` integer, and a `replacement` integer as input. Output a new list where all occurrences of the `target` integer are replaced with the `replacement` integer.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (target).\nLine 3: An integer (replacement).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers, a target integer, and a replacement integer as input. Output a new list where all occurrences of the target integer are replaced with the replacement integer.",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4",
          "2",
          "9"
        ],
        "expected_output": "1 9 3 9 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_141",
    "title": "Check if List is Empty",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of items as input and outputs `True` if the list is empty, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of items (can be empty).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a list of items as input and outputs True if the list is empty, otherwise False.",
    "test_cases": [
      {
        "input": [
          ""
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_142",
    "title": "Simple Chatbot Response",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string representing a user's command ('hello', 'bye', 'help') as input. Output a corresponding response: 'Hi there!' for 'hello', 'Goodbye!' for 'bye', and 'How can I assist you?' for 'help'. For any other input, output 'I don't understand.'.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that takes a string representing a user's command as input. Output a corresponding response.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "Hi there!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_143",
    "title": "Calculate Remainder",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `dividend` and `divisor`, as input. Output the remainder when `dividend` is divided by `divisor`.\n\n**Constraints**\n`divisor` will not be zero.\nInput format:\nLine 1: Dividend (integer).\nLine 2: Divisor (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes two integers, dividend and divisor, as input. Output the remainder.",
    "test_cases": [
      {
        "input": [
          "10",
          "3"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_144",
    "title": "Print Half Pyramid of Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a half pyramid of numbers. The $i$-th row should contain the number $i$ repeated $i$ times.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers.",
    "starter_code": "# Write a program that takes an integer rows as input and prints a half pyramid of numbers.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1\n22\n333"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_145",
    "title": "Inverted Half Pyramid of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints an inverted half pyramid of stars. The $i$-th row (from top, starting at 1) should have `rows - i + 1` stars.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that takes an integer rows as input and prints an inverted half pyramid of stars.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "****\n***\n**\n*"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_146",
    "title": "Basic Number Guessing Game Logic",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a single round of a number guessing game. It takes a `secret_number` and a `guess` (both integers) as input. Output 'Too high!' if `guess` > `secret_number`, 'Too low!' if `guess` < `secret_number`, and 'Correct!' if `guess` == `secret_number`.\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: Secret Number (integer).\nLine 2: Guess (integer).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that simulates a single round of a number guessing game.",
    "test_cases": [
      {
        "input": [
          "10",
          "7"
        ],
        "expected_output": "Too low!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_147",
    "title": "Calculate Simple Discount",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an original price (float) and a discount percentage (integer, e.g., 10 for 10%) as input. Output the final price after applying the discount. Round to two decimal places.\n\n**Constraints**\nOriginal price will be positive, discount percentage between 0 and 100.\nInput format:\nLine 1: Original price (float).\nLine 2: Discount percentage (integer).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes an original price and a discount percentage as input. Output the final price after applying the discount.",
    "test_cases": [
      {
        "input": [
          "200.0",
          "20"
        ],
        "expected_output": "160.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_148",
    "title": "Check if Number is Perfect Square (Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer $N$ as input and outputs `True` if $N$ is a perfect square, otherwise `False`. (A perfect square is an integer that is the square of an integer; e.g., 9 is a perfect square because 3*3 = 9).\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a positive integer N as input and outputs True if N is a perfect square, otherwise False.",
    "test_cases": [
      {
        "input": [
          "16"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_149",
    "title": "Sum of First and Last Element of List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of its first and last elements. Assume the list has at least two elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the sum of its first and last elements.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "60"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_150",
    "title": "Reverse a String with Spaces",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (which may contain spaces) as input and outputs the string in reverse order.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string (reversed).",
    "starter_code": "# Write a program that takes a string (which may contain spaces) as input and outputs the string in reverse order.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "dlrow olleh"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_151",
    "title": "Merge Two Sorted Lists",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two sorted lists of integers as input and outputs a single merged list, also sorted. Duplicates should be preserved.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of sorted integers for list 1.\nLine 2: Space-separated string of sorted integers for list 2.\n\nOutput format:\nA space-separated string of sorted integers.",
    "starter_code": "# Write a program that merges two sorted lists into a single sorted list.",
    "test_cases": [
      {
        "input": [
          "1 3 5",
          "2 4 6"
        ],
        "expected_output": "1 2 3 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_152",
    "title": "Rotate List Left by N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and an integer `N` as input. Output a new list that is the result of rotating the original list `N` positions to the left. `N` can be greater than the list's length.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers.\nLine 2: An integer N.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that rotates a list N positions to the left.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "2"
        ],
        "expected_output": "3 4 5 1 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_153",
    "title": "Find Common Elements in Two Lists",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and outputs a new list containing only the elements that are common to both lists. The order of common elements does not matter, and duplicates in the output list should be removed.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers for list 1.\nLine 2: Space-separated string of integers for list 2.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that finds common elements between two lists and outputs them.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6"
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_154",
    "title": "Check if List is a Subsequence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers, `main_list` and `sub_list`, as input. Output `True` if `sub_list` is a subsequence of `main_list`, otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers for main_list.\nLine 2: Space-separated string of integers for sub_list.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if one list is a subsequence of another.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6",
          "2 4 6"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_155",
    "title": "Sum of Elements at Even Indices",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of elements located at even indices (0-based) in the list.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that sums elements at even indices in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "90"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_156",
    "title": "Reverse Words in a Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the sentence with the order of words reversed. Punctuation should remain attached to words.\n\n**Constraints**\nWords are separated by single spaces. No leading/trailing spaces.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that reverses the order of words in a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello world, how are you?"
        ],
        "expected_output": "you? are how world, Hello"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_157",
    "title": "Count Frequency of Each Character",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the frequency of each character (case-sensitive, exclude spaces). The output should be key-value pairs separated by a colon, each on a new line, sorted alphabetically by character.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nMultiple lines of \"char: count\" strings.",
    "starter_code": "# Write a program that counts the frequency of each character in a string.",
    "test_cases": [
      {
        "input": [
          "banana"
        ],
        "expected_output": "a: 3\nb: 1\nn: 2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_158",
    "title": "Check if String is Pangram",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if it is a pangram (contains every letter of the alphabet at least once, case-insensitive), otherwise `False`.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string is a pangram.",
    "test_cases": [
      {
        "input": [
          "The quick brown fox jumps over the lazy dog"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_159",
    "title": "Remove Vowels from String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs a new string with all vowels (a, e, i, o, u, case-insensitive) removed.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that removes all vowels from a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "Hll Wrld"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_160",
    "title": "Capitalize First Letter of Each Word",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the sentence where the first letter of each word is capitalized, and the rest are lowercase.\n\n**Constraints**\nWords are separated by single spaces.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that capitalizes the first letter of each word in a sentence.",
    "test_cases": [
      {
        "input": [
          "this is a test sentence"
        ],
        "expected_output": "This Is A Test Sentence"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_161",
    "title": "Factorial Calculator Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_factorial` that takes a non-negative integer `n` as input and returns its factorial. The factorial of a non-negative integer `n`, denoted as $n!$, is the product of all positive integers less than or equal to $n$. Note: $0! = 1$.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput (function call):\n`calculate_factorial(5)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def calculate_factorial(n):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_162",
    "title": "Power Function (x to the power of y)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_power` that takes two integers, `base` and `exponent`, as input and returns `base` raised to the power of `exponent`.\n\n**Constraints**\n`exponent` will be non-negative. $0^0=1$.\n\nInput (function call):\n`calculate_power(2, 3)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def calculate_power(base, exponent):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "2",
          "3"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_163",
    "title": "Is Prime Number Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_prime` that takes a positive integer `num` as input and returns `True` if `num` is a prime number, otherwise `False`.\n\n**Constraints**\nInput will be a positive integer >= 1.\n\nInput (function call):\n`is_prime(7)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_prime(num):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_164",
    "title": "Sort List of Numbers Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `sort_numbers` that takes a list of integers as input and returns a new list containing the same numbers sorted in ascending order.\n\n**Constraints**\nInput will be a list of integers.\n\nInput (function call):\n`sort_numbers([5, 2, 8, 1])`\n\nOutput (return value):\nA list (e.g., as a string representation).",
    "starter_code": "def sort_numbers(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[5, 2, 8, 1]"
        ],
        "expected_output": "1 2 5 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_165",
    "title": "Filter Even Numbers Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `filter_even` that takes a list of integers as input and returns a new list containing only the even numbers from the original list, in the same order.\n\n**Constraints**\nInput will be a list of integers.\n\nInput (function call):\n`filter_even([1, 2, 3, 4, 5])`\n\nOutput (return value):\nA list (e.g., as a string representation).",
    "starter_code": "def filter_even(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 3, 4, 5]"
        ],
        "expected_output": "2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_166",
    "title": "Sum of Digits Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `sum_digits` that takes a positive integer as input and returns the sum of its digits.\n\n**Constraints**\nInput will be a positive integer.\n\nInput (function call):\n`sum_digits(123)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def sum_digits(n):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_167",
    "title": "Check Leap Year Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_leap_year` that takes an integer `year` as input and returns `True` if it's a leap year, otherwise `False`. A leap year is divisible by 4, but not by 100 unless it's also divisible by 400.\n\n**Constraints**\nInput will be an integer representing a year.\n\nInput (function call):\n`is_leap_year(2000)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_leap_year(year):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "2000"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_168",
    "title": "GCD of Two Numbers Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `find_gcd` that takes two positive integers `a` and `b` as input and returns their greatest common divisor (GCD).\n\n**Constraints**\nInputs will be positive integers.\n\nInput (function call):\n`find_gcd(48, 18)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def find_gcd(a, b):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "48",
          "18"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_169",
    "title": "Calculate Simple Interest",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes principal amount (float), interest rate (float, e.g., 0.05 for 5%), and time (years, integer) as input. Output the simple interest. Formula: $Interest = Principal \\times Rate \\times Time$. Round to two decimal places.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Principal (float).\nLine 2: Rate (float).\nLine 3: Time (integer).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to calculate simple interest.",
    "test_cases": [
      {
        "input": [
          "1000.0",
          "0.05",
          "2"
        ],
        "expected_output": "100.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_170",
    "title": "BMI Calculator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes weight (kg, float) and height (meters, float) as input. Calculate and output the Body Mass Index (BMI). Formula: $BMI = \\frac{\\text{weight}}{\\text{height}^2}$. Round to one decimal place.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Weight (float).\nLine 2: Height (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to calculate BMI.",
    "test_cases": [
      {
        "input": [
          "70.0",
          "1.75"
        ],
        "expected_output": "22.9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_171",
    "title": "Currency Converter (USD to EUR)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an amount in USD (float) and an exchange rate (float, USD to EUR, e.g., 0.85) as input. Output the equivalent amount in EUR. Round to two decimal places.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: USD Amount (float).\nLine 2: Exchange Rate (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to convert USD to EUR.",
    "test_cases": [
      {
        "input": [
          "100.0",
          "0.85"
        ],
        "expected_output": "85.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_172",
    "title": "Calculate Final Grade",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three assignment scores (integers, 0-100) as input. Calculate and output the average of these scores. Round to one decimal place.\n\n**Constraints**\nInputs will be integers between 0 and 100.\nInput format:\nThree integers on separate lines.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to calculate the average of three assignment scores.",
    "test_cases": [
      {
        "input": [
          "80",
          "90",
          "75"
        ],
        "expected_output": "81.7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_173",
    "title": "Temperature Converter (Celsius to Fahrenheit)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a temperature in Celsius (float) as input and outputs the equivalent temperature in Fahrenheit. Formula: $F = C \\times 9/5 + 32$. Round to two decimal places.\n\n**Constraints**\nInput will be a float.\n\nInput format:\nA float.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to convert Celsius to Fahrenheit.",
    "test_cases": [
      {
        "input": [
          "25.0"
        ],
        "expected_output": "77.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_174",
    "title": "Check if Number is Positive, Negative or Zero",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and outputs 'Positive' if it's greater than 0, 'Negative' if it's less than 0, and 'Zero' if it's 0.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that checks if a number is positive, negative, or zero.",
    "test_cases": [
      {
        "input": [
          "-5"
        ],
        "expected_output": "Negative"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_175",
    "title": "Check if Character is Vowel or Consonant",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single lowercase alphabetic character as input and outputs 'Vowel' if it's a vowel (a, e, i, o, u), otherwise 'Consonant'.\n\n**Constraints**\nInput will be a single lowercase letter.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that checks if a character is a vowel or consonant.",
    "test_cases": [
      {
        "input": [
          "b"
        ],
        "expected_output": "Consonant"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_176",
    "title": "Check if a Triangle is Valid",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three positive integers representing the lengths of the sides of a triangle as input. Output `True` if a triangle can be formed with these sides, otherwise `False`. (Triangle Inequality Theorem: The sum of the lengths of any two sides of a triangle must be greater than the length of the third side).\n\n**Constraints**\nInputs will be positive integers.\nInput format:\nThree integers on separate lines.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if three side lengths can form a valid triangle.",
    "test_cases": [
      {
        "input": [
          "3",
          "4",
          "5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_177",
    "title": "Check if Point is Inside Rectangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes four integers representing the top-left corner coordinates (x1, y1) and bottom-right corner coordinates (x2, y2) of a rectangle, and two more integers (px, py) representing a point. Output `True` if the point (px, py) is inside or on the boundary of the rectangle, otherwise `False`.\n\n**Constraints**\nx1 < x2, y1 < y2.\nInput format:\nLine 1: x1 y1\nLine 2: x2 y2\nLine 3: px py\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a point is inside a rectangle.",
    "test_cases": [
      {
        "input": [
          "0 0",
          "10 10",
          "5 5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_178",
    "title": "Determine Grade Based on Score",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer score (0-100) as input and outputs a letter grade: 'A' (90-100), 'B' (80-89), 'C' (70-79), 'D' (60-69), 'F' (0-59).\n\n**Constraints**\nInput will be an integer between 0 and 100.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that determines a letter grade based on a score.",
    "test_cases": [
      {
        "input": [
          "85"
        ],
        "expected_output": "B"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_179",
    "title": "Sum Even Numbers in a Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Calculate and output the sum of all even numbers within that inclusive range.\n\n**Constraints**\nInputs will be integers, `start` <= `end`.\nInput format:\nLine 1: start (integer).\nLine 2: end (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that sums all even numbers in a given range.",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output": "30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_180",
    "title": "Print Multiples of N Up to M",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers, `N` and `M`, as input. Print all multiples of `N` that are less than or equal to `M`, each on a new line.\n\n**Constraints**\nInputs will be positive integers.\nInput format:\nLine 1: N (integer).\nLine 2: M (integer).\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that prints multiples of N up to M.",
    "test_cases": [
      {
        "input": [
          "3",
          "10"
        ],
        "expected_output": "3\n6\n9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_181",
    "title": "Count Digits in an Integer",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and outputs the number of digits it contains.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts the number of digits in an integer.",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_182",
    "title": "Print Fibonacci Sequence Up to N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input. Print the Fibonacci sequence up to and including `N`. Each number should be on a new line. The sequence starts 0, 1, 1, 2, 3, ...\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that prints the Fibonacci sequence up to N.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "0\n1\n1\n2\n3\n5\n8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_183",
    "title": "Calculate Product of List Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the product of all its elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the product of all elements in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_184",
    "title": "Inverted Full Pyramid of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints an inverted full pyramid of stars. Each row should have `2 * (rows - i) - 1` stars and appropriate leading spaces.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that prints an inverted full pyramid of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "*****\n ***\n  *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_185",
    "title": "Hollow Square of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `side` as input and prints a hollow square of stars. The square should have `side` rows and `side` columns.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that prints a hollow square of stars.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "****\n* *\n* *\n****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_186",
    "title": "Diamond Pattern of Stars (Half)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a half diamond pattern of stars. The pattern expands up to `rows` stars and then shrinks.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that prints a half diamond pattern of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "*\n**\n***\n**\n*"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_187",
    "title": "Alphabet Triangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints an alphabet triangle. The first row has 'A', the second 'BB', the third 'CCC', and so on, up to `rows` rows.\n\n**Constraints**\nInput will be a positive integer (1-26).\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of characters.",
    "starter_code": "# Write a program that prints an alphabet triangle.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "A\nBB\nCCC"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_188",
    "title": "Calculate Number of Working Days",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start_day` and `end_day` (1-indexed, `1` for Monday, `7` for Sunday), and calculates the number of working days (Monday to Friday) within this inclusive range for a *single week*. Assume `start_day` <= `end_day`.\n\n**Constraints**\nInputs will be integers between 1 and 7.\nInput format:\nLine 1: start_day (integer).\nLine 2: end_day (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the number of working days within a single week's range.",
    "test_cases": [
      {
        "input": [
          "2",
          "6"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_189",
    "title": "Simple Password Strength Checker",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `password` as input. Output 'Strong' if the password has at least 8 characters AND contains at least one uppercase letter AND at least one digit. Otherwise, output 'Weak'.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that checks the strength of a password.",
    "test_cases": [
      {
        "input": [
          "MyPassword123"
        ],
        "expected_output": "Strong"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_190",
    "title": "Grade Calculator with Weights",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three scores (float) and their corresponding weights (float) as input. Calculate the weighted average. For example, if scores are 80, 90, 70 and weights are 0.2, 0.3, 0.5, the weighted average is $80 \\times 0.2 + 90 \\times 0.3 + 70 \\times 0.5$. Output the weighted average, rounded to two decimal places.\n\n**Constraints**\nInputs will be floats.\nInput format:\nLine 1: score1 weight1\nLine 2: score2 weight2\nLine 3: score3 weight3\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to calculate the weighted average of scores.",
    "test_cases": [
      {
        "input": [
          "80 0.2",
          "90 0.3",
          "70 0.5"
        ],
        "expected_output": "79.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_191",
    "title": "Count Positive, Negative, Zero in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input. Output the count of positive numbers, negative numbers, and zeros, each on a new line.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nThree integers on separate lines.",
    "starter_code": "# Write a program that counts positive, negative, and zero numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 -2 0 3 -4 0"
        ],
        "expected_output": "2\n2\n2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_192",
    "title": "Split String by Delimiter",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a single-character delimiter as input. Output the parts of the string split by the delimiter, each part on a new line.\n\n**Constraints**\nInput format:\nLine 1: The string.\nLine 2: The delimiter character.\n\nOutput format:\nMultiple lines of strings.",
    "starter_code": "# Write a program that splits a string by a delimiter.",
    "test_cases": [
      {
        "input": [
          "apple,banana,cherry",
          ","
        ],
        "expected_output": "apple\nbanana\ncherry"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_193",
    "title": "Remove Duplicate Characters from String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs a new string with all duplicate characters removed, preserving the order of the first occurrence of each character.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that removes duplicate characters from a string.",
    "test_cases": [
      {
        "input": [
          "programming"
        ],
        "expected_output": "progamin"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_194",
    "title": "Word Search Grid Checker (Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 3x3 grid of characters (entered row by row) and a target word (string) as input. Output `True` if the target word can be found horizontally in any row, otherwise `False`.\n\n**Constraints**\nGrid will always be 3x3. Word length will be 2 or 3.\nInput format:\nLine 1: Row 1 (space-separated characters)\nLine 2: Row 2 (space-separated characters)\nLine 3: Row 3 (space-separated characters)\nLine 4: Target word (string)\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a word exists horizontally in a 3x3 character grid.",
    "test_cases": [
      {
        "input": [
          "A B C",
          "D E F",
          "G H I",
          "DEF"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_195",
    "title": "Reverse a List of Strings",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings as input and outputs a new list with the strings in reverse order.\n\n**Constraints**\nInput format:\nA space-separated string of words.\n\nOutput format:\nA space-separated string of words.",
    "starter_code": "# Write a program that reverses a list of strings.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry"
        ],
        "expected_output": "cherry banana apple"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_196",
    "title": "Check if List Contains Duplicates",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if the list contains any duplicate elements, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a list contains duplicates.",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_197",
    "title": "Concatenate with Separator Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `join_with_separator` that takes a list of strings and a single-character string `separator` as input. Return a single string formed by concatenating the list elements with the `separator` between them.\n\n**Constraints**\nInput will be a list of strings and a single character string.\n\nInput (function call):\n`join_with_separator([\"a\", \"b\", \"c\"], \"-\")`\n\nOutput (return value):\nA string.",
    "starter_code": "def join_with_separator(items, separator):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[\"a\", \"b\", \"c\"]",
          "\"-\""
        ],
        "expected_output": "a-b-c"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_198",
    "title": "Print Pattern: Increasing Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a pattern of increasing numbers. The first row has 1, the second 1 2, the third 1 2 3, and so on.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of space-separated integers.",
    "starter_code": "# Write a program that prints a pattern of increasing numbers.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1\n1 2\n1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_199",
    "title": "Check if Sorted List is Strictly Increasing",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sorted list of integers as input and outputs `True` if the list is strictly increasing (each element is strictly greater than the previous one), otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of sorted integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a sorted list is strictly increasing.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_200",
    "title": "Find Longest Word in Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the longest word in the sentence. If there are multiple words of the same maximum length, return the first one encountered.\n\n**Constraints**\nWords are separated by single spaces. Punctuation is considered part of the word.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that finds the longest word in a sentence.",
    "test_cases": [
      {
        "input": [
          "The quick brown fox"
        ],
        "expected_output": "quick"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_201",
    "title": "Find Second Smallest Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the second smallest element in the list. Assume the list has at least two unique elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the second smallest element in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 5 15 20"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_202",
    "title": "Remove All Occurrences of Substring",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a substring to remove as input. Output a new string with all occurrences of the substring removed.\n\n**Constraints**\nInput format:\nLine 1: Original string.\nLine 2: Substring to remove.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that removes all occurrences of a substring from a string.",
    "test_cases": [
      {
        "input": [
          "banana",
          "an"
        ],
        "expected_output": "bana"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_203",
    "title": "Calculate Hypotenuse of Right Triangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two floats representing the lengths of the two shorter sides of a right-angled triangle ($a$ and $b$) as input. Calculate and output the length of the hypotenuse ($c$). Use the Pythagorean theorem: $c = \\sqrt{a^2 + b^2}$. Round to two decimal places.\n\n**Constraints**\nInputs will be positive floats.\nInput format:\nLine 1: Side a (float).\nLine 2: Side b (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the hypotenuse of a right triangle.",
    "test_cases": [
      {
        "input": [
          "3.0",
          "4.0"
        ],
        "expected_output": "5.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_204",
    "title": "Print Nth Character of String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and an integer `N` (0-based index) as input. Output the character at the `N`-th index of the string. Assume `N` will be a valid index.\n\n**Constraints**\nInput format:\nLine 1: A string.\nLine 2: An integer N.\n\nOutput format:\nA string (single character).",
    "starter_code": "# Write a program that prints the Nth character of a string.",
    "test_cases": [
      {
        "input": [
          "python",
          "2"
        ],
        "expected_output": "t"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_205",
    "title": "Count Words in a Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the total number of words in it. Assume words are separated by single spaces.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts the number of words in a sentence.",
    "test_cases": [
      {
        "input": [
          "This is a sample sentence"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_206",
    "title": "Check if String is Alphanumeric",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if the string contains only alphanumeric characters (letters and digits), otherwise `False`.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string is alphanumeric.",
    "test_cases": [
      {
        "input": [
          "Hello123"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_207",
    "title": "Extract Middle Character(s) of String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs its middle character(s). If the length is odd, output the single middle character. If the length is even, output the two middle characters.\n\n**Constraints**\nInput will be a non-empty string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that extracts the middle character(s) of a string.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "l"
      },
      {
        "input": [
          "word"
        ],
        "expected_output": "or"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_208",
    "title": "Convert All to Lowercase",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the string converted entirely to lowercase.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that converts a string to lowercase.",
    "test_cases": [
      {
        "input": [
          "HELLO World"
        ],
        "expected_output": "hello world"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_209",
    "title": "Count Elements in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and two integers, `lower_bound` and `upper_bound`, as input. Output the count of elements in the list that are within the inclusive range [`lower_bound`, `upper_bound`].\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (lower_bound).\nLine 3: An integer (upper_bound).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts elements within a specified range in a list.",
    "test_cases": [
      {
        "input": [
          "1 5 10 15 20",
          "5",
          "15"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_210",
    "title": "Filter Strings by Length",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings and an integer `min_length` as input. Output a new list containing only strings whose length is greater than or equal to `min_length`, preserving the order.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of words.\nLine 2: An integer (min_length).\n\nOutput format:\nA space-separated string of words.",
    "starter_code": "# Write a program that filters strings in a list by their length.",
    "test_cases": [
      {
        "input": [
          "apple banana cat dog",
          "5"
        ],
        "expected_output": "apple banana"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_211",
    "title": "Remove First Occurrence of Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a `target` integer as input. Output a new list with the *first* occurrence of the `target` integer removed. If the target is not found, return the original list.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (target).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that removes the first occurrence of an element from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4",
          "2"
        ],
        "expected_output": "1 3 2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_212",
    "title": "Check if List is Sorted (Descending)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if the list is sorted in descending order, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a list is sorted in descending order.",
    "test_cases": [
      {
        "input": [
          "5 4 3 2 1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_213",
    "title": "Calculate Mean, Median, Mode (Mean Only)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of numbers as input. Calculate and output only the mean (average) of these numbers. Round to two decimal places.\n\n**Constraints**\nInput format:\nA space-separated string of numbers.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the mean of a list of numbers.",
    "test_cases": [
      {
        "input": [
          "10 20 30"
        ],
        "expected_output": "20.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_214",
    "title": "Vending Machine Change Calculator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the cost of an item (integer) and the amount paid (integer) as input. Output the change due. Assume `amount_paid` is always greater than or equal to `cost`. Output the change in terms of number of $5, $2, $1 coins. Each count on a new line.\n\n**Constraints**\nInputs will be non-negative integers.\nInput format:\nLine 1: Cost (integer).\nLine 2: Amount Paid (integer).\n\nOutput format:\nThree integers on separate lines (count of 5, 2, 1 coins).",
    "starter_code": "# Write a program that calculates vending machine change.",
    "test_cases": [
      {
        "input": [
          "7",
          "15"
        ],
        "expected_output": "1\n1\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_215",
    "title": "Guess the Number Game (Single Check)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a single check in a number guessing game. It takes a `secret_number` and a `guess` (both integers) as input. Output 'Correct!' if the guess matches the secret number. Otherwise, output 'Incorrect. Try again.'\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: Secret Number (integer).\nLine 2: Guess (integer).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that checks a single guess in a number guessing game.",
    "test_cases": [
      {
        "input": [
          "42",
          "42"
        ],
        "expected_output": "Correct!"
      },
      {
        "input": [
          "42",
          "20"
        ],
        "expected_output": "Incorrect. Try again."
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_216",
    "title": "Determine Quadrant of a Point",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `x` and `y`, representing the coordinates of a point. Output 'Quadrant 1', 'Quadrant 2', 'Quadrant 3', 'Quadrant 4', 'X-axis', 'Y-axis', or 'Origin' based on the point's location.\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: x (integer).\nLine 2: y (integer).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that determines the quadrant of a point.",
    "test_cases": [
      {
        "input": [
          "5",
          "3"
        ],
        "expected_output": "Quadrant 1"
      },
      {
        "input": [
          "0",
          "0"
        ],
        "expected_output": "Origin"
      },
      {
        "input": [
          "-2",
          "0"
        ],
        "expected_output": "X-axis"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_217",
    "title": "Check if All Elements are Positive",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if all elements in the list are positive, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if all elements in a list are positive.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 -3 4 5"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_218",
    "title": "Count Occurrences of Word",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and a target word (case-insensitive) as input. Output the number of times the target word appears in the sentence.\n\n**Constraints**\nInput format:\nLine 1: A string (sentence).\nLine 2: A string (target word).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts the occurrences of a word in a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello world hello universe",
          "hello"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_219",
    "title": "Calculate Median of a List (Odd Length)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (guaranteed to have an odd length) as input. Calculate and output the median of these numbers. The median is the middle element after sorting the list.\n\n**Constraints**\nInput format:\nA space-separated string of integers (odd number of elements).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the median of a list with odd length.",
    "test_cases": [
      {
        "input": [
          "5 2 8 1 9"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_220",
    "title": "Reverse a Number",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and outputs the number with its digits reversed. Leading zeros in the reversed number should be removed (e.g., 120 reversed is 21).\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that reverses the digits of a number.",
    "test_cases": [
      {
        "input": [
          "123"
        ],
        "expected_output": "321"
      },
      {
        "input": [
          "120"
        ],
        "expected_output": "21"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_221",
    "title": "Check if Year is Century Year",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `year` as input and outputs `True` if it is a century year (e.g., 1900, 2000) otherwise `False`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a year is a century year.",
    "test_cases": [
      {
        "input": [
          "1900"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1901"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_222",
    "title": "Check if Character is Uppercase or Lowercase",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single alphabetic character (string) as input. Output 'Uppercase' if it's an uppercase letter, 'Lowercase' if it's a lowercase letter.\n\n**Constraints**\nInput will be a single alphabetic character.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that checks if a character is uppercase or lowercase.",
    "test_cases": [
      {
        "input": [
          "A"
        ],
        "expected_output": "Uppercase"
      },
      {
        "input": [
          "b"
        ],
        "expected_output": "Lowercase"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_223",
    "title": "Count Even Numbers in a List Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `count_even_numbers` that takes a list of integers as input and returns the count of even numbers in the list.\n\n**Constraints**\nInput will be a list of integers.\n\nInput (function call):\n`count_even_numbers([1, 2, 3, 4, 5, 6])`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def count_even_numbers(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 3, 4, 5, 6]"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_224",
    "title": "Calculate Compound Interest",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes principal amount (float), annual interest rate (float, as decimal, e.g., 0.05 for 5%), and time (years, integer) as input. Output the compound interest. Formula: $A = P(1 + r)^t$, where $A$ is amount, $P$ is principal, $r$ is rate, $t$ is time. Compound Interest = $A - P$. Round to two decimal places.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Principal (float).\nLine 2: Rate (float).\nLine 3: Time (integer).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to calculate compound interest.",
    "test_cases": [
      {
        "input": [
          "1000.0",
          "0.05",
          "2"
        ],
        "expected_output": "102.50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_225",
    "title": "Sum of Numbers from 1 to N (Loop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs the sum of all integers from 1 to `N` (inclusive) using a loop.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of numbers from 1 to N using a loop.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_226",
    "title": "Print Stars in a Right-Angled Triangle (Left Align)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a right-angled triangle pattern of stars, left-aligned. The $i$-th row should have $i$ stars.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that prints a left-aligned right-angled triangle of stars.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "*\n**\n***\n****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_227",
    "title": "Find the Length of Longest Word in a List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings as input and outputs the length of the longest string in the list.\n\n**Constraints**\nInput format:\nA space-separated string of words.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the length of the longest word in a list.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_228",
    "title": "Insert Element at Specific Index",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers, an integer `element` to insert, and an integer `index` as input. Output a new list with the `element` inserted at the specified `index`. Assume `index` is valid (0 to length of list inclusive).\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (element).\nLine 3: An integer (index).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that inserts an element into a list at a specific index.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "99",
          "2"
        ],
        "expected_output": "1 2 99 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_229",
    "title": "Concatenate Strings with Spaces",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of words as input and outputs a single string by concatenating them with a single space in between each word.\n\n**Constraints**\nInput format:\nA space-separated string of words.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that concatenates strings with spaces.",
    "test_cases": [
      {
        "input": [
          "hello world python"
        ],
        "expected_output": "hello world python"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_230",
    "title": "Remove Leading and Trailing Spaces",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs a new string with all leading and trailing whitespace characters removed.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that removes leading and trailing spaces from a string.",
    "test_cases": [
      {
        "input": [
          "  Hello World  "
        ],
        "expected_output": "Hello World"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_231",
    "title": "Check if a Number is Multiple of N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `number` and `N`, as input. Output `True` if `number` is a multiple of `N`, otherwise `False`.\n\n**Constraints**\n`N` will be a non-zero integer.\nInput format:\nLine 1: Number (integer).\nLine 2: N (integer).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a number is a multiple of N.",
    "test_cases": [
      {
        "input": [
          "10",
          "5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "10",
          "3"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_232",
    "title": "Convert Seconds to Hours, Minutes, Seconds",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a total number of seconds as input. Output the equivalent time in hours, minutes, and remaining seconds. Each value on a new line.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer (total seconds).\n\nOutput format:\nThree integers on separate lines (hours, minutes, seconds).",
    "starter_code": "# Write a program that converts seconds to hours, minutes, and seconds.",
    "test_cases": [
      {
        "input": [
          "3661"
        ],
        "expected_output": "1\n1\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_233",
    "title": "Sum of First N Natural Numbers (Formula)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs the sum of the first `N` natural numbers using the formula: $Sum = \\frac{N \\times (N + 1)}{2}$.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of first N natural numbers using a formula.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_234",
    "title": "Basic Calculator (Addition/Subtraction)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two floats and an operator ('+', '-') as input. Perform the corresponding arithmetic operation and output the result. Round to two decimal places.\n\n**Constraints**\nInput format:\nLine 1: Number 1 (float).\nLine 2: Operator (string, '+' or '-').\nLine 3: Number 2 (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that performs basic addition or subtraction.",
    "test_cases": [
      {
        "input": [
          "10.5",
          "+",
          "5.2"
        ],
        "expected_output": "15.70"
      },
      {
        "input": [
          "10.5",
          "-",
          "5.2"
        ],
        "expected_output": "5.30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_235",
    "title": "Simple Login System (Single Attempt)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a `username` and `password` as input. If both match \"admin\" and \"password123\" respectively, output 'Login Successful'. Otherwise, output 'Invalid Credentials'.\n\n**Constraints**\nInputs will be strings.\nInput format:\nLine 1: Username (string).\nLine 2: Password (string).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program for a simple login system.",
    "test_cases": [
      {
        "input": [
          "admin",
          "password123"
        ],
        "expected_output": "Login Successful"
      },
      {
        "input": [
          "user",
          "wrongpass"
        ],
        "expected_output": "Invalid Credentials"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_236",
    "title": "Average Word Length in Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the average length of words in the sentence. Round to two decimal places. Assume words are separated by single spaces and the sentence is not empty.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the average word length in a sentence.",
    "test_cases": [
      {
        "input": [
          "This is a test"
        ],
        "expected_output": "3.25"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_237",
    "title": "Count Lowercase Letters in String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of lowercase letters in it.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts the number of lowercase letters in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_238",
    "title": "Check if String Starts With Substring",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a main string and a substring as input. Output `True` if the main string starts with the given substring, otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: Main string.\nLine 2: Substring.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string starts with a given substring.",
    "test_cases": [
      {
        "input": [
          "Python programming",
          "Python"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "Python programming",
          "Java"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_239",
    "title": "Find Largest Odd Number in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the largest odd number in the list. If no odd numbers are present, output 'None'.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer or string 'None'.",
    "starter_code": "# Write a program that finds the largest odd number in a list.",
    "test_cases": [
      {
        "input": [
          "2 4 6 8 1 3 5"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "2 4 6 8"
        ],
        "expected_output": "None"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_240",
    "title": "Sum of Elements in 2D List Row",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 2D list (matrix) of integers and a `row_index` as input. Output the sum of all elements in the specified row.\n\n**Constraints**\nMatrix will be 2x2 or 3x3. `row_index` will be valid.\nInput format:\nLine 1: Space-separated integers for row 1.\nLine 2: Space-separated integers for row 2.\n... (up to 3 rows)\nLast line: row_index (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that sums elements in a specific row of a 2D list.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "4 5 6",
          "7 8 9",
          "1"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_241",
    "title": "Find Intersection of Two Lists",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and outputs a new list containing only the elements that are present in both lists. Duplicates in the output list should be removed, and order does not matter.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers for list 1.\nLine 2: Space-separated string of integers for list 2.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that finds the intersection of two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6"
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_242",
    "title": "Check if a String is a Valid Email Format (Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if it's a simple valid email format (contains exactly one '@' and at least one '.' after the '@'), otherwise `False`.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks for a simple valid email format.",
    "test_cases": [
      {
        "input": [
          "test@example.com"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "test@examplecom"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "testexample.com"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_243",
    "title": "Print a Table of Squares and Cubes",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input. Print a table for numbers from 1 to `N`, showing each number, its square, and its cube, separated by tabs. Each set on a new line.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of \"number\tsquare\tcube\" strings.",
    "starter_code": "# Write a program that prints a table of squares and cubes.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1\t1\t1\n2\t4\t8\n3\t9\t27"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_244",
    "title": "Generate Random Number in Range Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `generate_random_number` that takes two integers, `min_val` and `max_val`, as input. Return a random integer between `min_val` (inclusive) and `max_val` (inclusive). You may need to import a library. Note: The exact random number cannot be tested directly, so this will be for conceptual understanding and testing environment will check for valid range only. \n\n**Constraints**\n`min_val` <= `max_val`.\n\nInput (function call):\n`generate_random_number(1, 10)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "import random\n\ndef generate_random_number(min_val, max_val):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output_range": [
          "1",
          "10"
        ]
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_245",
    "title": "Check if Value is in Range Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_in_range` that takes an integer `value` and two integers, `lower_bound` and `upper_bound`, as input. Return `True` if `value` is within the inclusive range [`lower_bound`, `upper_bound`], otherwise `False`.\n\n**Constraints**\n`lower_bound` <= `upper_bound`.\n\nInput (function call):\n`is_in_range(5, 1, 10)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_in_range(value, lower_bound, upper_bound):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5",
          "1",
          "10"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "0",
          "1",
          "10"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_246",
    "title": "Concatenate Two Lists of Different Types",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists (one of integers, one of strings) as input. Output a single new list containing all elements from both lists, with the integer list elements first, then the string list elements, in their original relative order.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers.\nLine 2: Space-separated string of words.\n\nOutput format:\nA space-separated string of elements.",
    "starter_code": "# Write a program that concatenates two lists of different types.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "apple banana"
        ],
        "expected_output": "1 2 3 apple banana"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_247",
    "title": "Swap Two Elements by Index",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and two distinct valid 0-based indices, `idx1` and `idx2`, as input. Output a new list with the elements at `idx1` and `idx2` swapped.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers.\nLine 2: idx1 (integer).\nLine 3: idx2 (integer).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that swaps two elements in a list by their indices.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50",
          "1",
          "3"
        ],
        "expected_output": "10 40 30 20 50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_248",
    "title": "Check if all characters are unique in string",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if all characters in the string are unique (case-sensitive), otherwise `False`.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if all characters in a string are unique.",
    "test_cases": [
      {
        "input": [
          "abcde"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "hello"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_249",
    "title": "Simple Text Censor",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and a `bad_word` (string) as input. Output a new sentence where all occurrences of `bad_word` (case-insensitive) are replaced with asterisks of the same length as the `bad_word`.\n\n**Constraints**\nInput format:\nLine 1: Sentence (string).\nLine 2: Bad word (string).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that censors a bad word in a sentence.",
    "test_cases": [
      {
        "input": [
          "This is a bad word example. Another bad word.",
          "bad"
        ],
        "expected_output": "This is a *** word example. Another *** word."
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_250",
    "title": "Calculate Simple Moving Average (3-point)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of numbers as input and outputs a new list containing the 3-point simple moving average. For each element in the original list (starting from the 3rd element, index 2), calculate the average of itself and the two preceding elements. Round averages to two decimal places.\n\n**Constraints**\nInput list will have at least 3 elements.\nInput format:\nA space-separated string of numbers.\n\nOutput format:\nA space-separated string of floats.",
    "starter_code": "# Write a program that calculates the 3-point simple moving average of a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "20.00 30.00 40.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_251",
    "title": "Merge Two Unsorted Lists (Sorted Output)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two unsorted lists of integers as input and outputs a single merged list, sorted in ascending order. Duplicates should be preserved.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers for list 1.\nLine 2: Space-separated string of integers for list 2.\n\nOutput format:\nA space-separated string of sorted integers.",
    "starter_code": "# Write a program that merges two unsorted lists into a single sorted list.",
    "test_cases": [
      {
        "input": [
          "5 1 3",
          "6 2 4"
        ],
        "expected_output": "1 2 3 4 5 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_252",
    "title": "Find Majority Element in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the majority element, which is the element that appears more than $N/2$ times where $N$ is the list length. Assume such an element always exists.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the majority element in a list.",
    "test_cases": [
      {
        "input": [
          "3 2 3 1 3"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_253",
    "title": "Remove Nth Occurrence of Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers, an integer `element` to remove, and an integer `N` (occurrence count) as input. Output a new list with the `N`-th occurrence of the `element` removed. If the `N`-th occurrence doesn't exist, return the original list.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers.\nLine 2: Element to remove (integer).\nLine 3: Nth occurrence (integer).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that removes the Nth occurrence of an element from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 2 4",
          "2",
          "2"
        ],
        "expected_output": "1 2 3 2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_254",
    "title": "Group Anagrams Together",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings (words) as input. Output groups of anagrams together. The order of groups and words within groups does not matter. Each group should be on a new line, space-separated.\n\n**Constraints**\nInput format:\nA space-separated string of words.\n\nOutput format:\nMultiple lines, each a space-separated string of words.",
    "starter_code": "# Write a program that groups anagrams from a list of words.",
    "test_cases": [
      {
        "input": [
          "eat tea tan ate nat bat"
        ],
        "expected_output": "eat tea ate\ntan nat\nbat"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_255",
    "title": "Run-Length Encoding",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs its run-length encoded version. Consecutive identical characters are replaced by the character and their count. E.g., \"AAABBC\" becomes \"A3B2C1\".\n\n**Constraints**\nInput will be an uppercase alphabetic string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that performs run-length encoding on a string.",
    "test_cases": [
      {
        "input": [
          "AAABBC"
        ],
        "expected_output": "A3B2C1"
      },
      {
        "input": [
          "ABC"
        ],
        "expected_output": "A1B1C1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_256",
    "title": "Validate Parentheses (Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string containing only '(' and ')' characters as input. Output `True` if the parentheses are balanced (each opening parenthesis has a matching closing parenthesis and they are properly nested), otherwise `False`.\n\n**Constraints**\nInput will be a string containing only '(' and ')'.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that validates simple parentheses balancing.",
    "test_cases": [
      {
        "input": [
          "()()"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "(()"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          ")("
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_257",
    "title": "Reverse Words in a Sentence (Preserve Punctuation)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the sentence with the order of words reversed. Punctuation (like ',', '.', '!') attached to words should remain attached, and not considered part of the word separation.\n\n**Constraints**\nWords are separated by single spaces. No leading/trailing spaces.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that reverses the order of words in a sentence, preserving punctuation.",
    "test_cases": [
      {
        "input": [
          "Hello world. How are you?"
        ],
        "expected_output": "you? are How world. Hello"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_258",
    "title": "Remove Nth Character from String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and an integer `N` (0-based index) as input. Output a new string with the character at the `N`-th index removed. Assume `N` will be a valid index.\n\n**Constraints**\nInput format:\nLine 1: A string.\nLine 2: An integer N.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that removes the Nth character from a string.",
    "test_cases": [
      {
        "input": [
          "python",
          "2"
        ],
        "expected_output": "pyhon"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_259",
    "title": "Find Mode of a List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the mode (the most frequently occurring element). If there are multiple modes, output the smallest one.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the mode of a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 3 3 4"
        ],
        "expected_output": "3"
      },
      {
        "input": [
          "1 2 2 1 3"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_260",
    "title": "Flatten a Nested List (1 Level)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a nested list (a list of lists of integers) as input, where nesting is only one level deep. Output a single, flat list containing all the integers.\n\n**Constraints**\nInput format:\nEach line represents an inner list, with space-separated integers. Lists are enclosed in [].\nExample: \n`[1 2]\n[3 4 5]`\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that flattens a nested list (one level deep).",
    "test_cases": [
      {
        "input": [
          "[[1 2] [3 4 5]]"
        ],
        "expected_output": "1 2 3 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_261",
    "title": "Matrix Transpose (2x2 or 3x3)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 2D list (matrix) of integers as input and outputs its transpose. The matrix will be either 2x2 or 3x3.\n\n**Constraints**\nInput format:\nLine 1: Space-separated integers for row 1.\nLine 2: Space-separated integers for row 2.\n... (up to 3 rows)\n\nOutput format:\nMultiple lines, each a space-separated string of integers representing the transposed matrix.",
    "starter_code": "# Write a program that calculates the transpose of a 2x2 or 3x3 matrix.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "1 4 7\n2 5 8\n3 6 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_262",
    "title": "Sum of Diagonal Elements in Matrix",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a square 2D list (matrix) of integers as input and outputs the sum of its main diagonal elements (from top-left to bottom-right).\n\n**Constraints**\nMatrix will be 2x2 or 3x3.\nInput format:\nLine 1: Space-separated integers for row 1.\nLine 2: Space-separated integers for row 2.\n... (up to 3 rows)\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of main diagonal elements in a square matrix.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "4 5 6",
          "7 8 9"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_263",
    "title": "Check if Two Lists are Permutations",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input. Output `True` if one list is a permutation of the other (i.e., they contain the same elements with the same frequencies, regardless of order), otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of integers for list 1.\nLine 2: Space-separated string of integers for list 2.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if two lists are permutations of each other.",
    "test_cases": [
      {
        "input": [
          "1 2 3 1",
          "3 1 2 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3",
          "1 2 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_264",
    "title": "Convert Roman Numerals to Integer (Limited)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a Roman numeral string (representing numbers up to 3999, e.g., 'III', 'LVIII', 'MCMXCIV') as input and outputs its integer equivalent. Only valid Roman numerals will be given.\n\n**Constraints**\nInput will be a string containing only 'I', 'V', 'X', 'L', 'C', 'D', 'M'.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that converts Roman numerals to integers.",
    "test_cases": [
      {
        "input": [
          "MCMXCIV"
        ],
        "expected_output": "1994"
      },
      {
        "input": [
          "LVIII"
        ],
        "expected_output": "58"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_265",
    "title": "Encode String with Caesar Cipher",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and an integer `shift` as input. Output the encoded string using a Caesar cipher. Only alphabetic characters should be shifted (wrapping around 'a' to 'z' or 'A' to 'Z'). Non-alphabetic characters remain unchanged. `shift` can be positive or negative.\n\n**Constraints**\nInput format:\nLine 1: Original string.\nLine 2: Shift value (integer).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that encodes a string using a Caesar cipher.",
    "test_cases": [
      {
        "input": [
          "abc",
          "1"
        ],
        "expected_output": "bcd"
      },
      {
        "input": [
          "xyz",
          "3"
        ],
        "expected_output": "abc"
      },
      {
        "input": [
          "Hello, World!",
          "-1"
        ],
        "expected_output": "Gdkkn, Vnqkc!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_266",
    "title": "Check if a String is a Palindrome (Case & Space Insensitive)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if it's a palindrome (reads the same forwards and backward), ignoring case and non-alphanumeric characters. Otherwise, output `False`.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string is a palindrome, ignoring case and non-alphanumeric characters.",
    "test_cases": [
      {
        "input": [
          "A man, a plan, a canal: Panama"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "race a car"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_267",
    "title": "Implement a Queue (Enqueue, Dequeue)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a basic queue. It takes a sequence of operations as input: 'ENQUEUE X' (add X to queue), 'DEQUEUE' (remove and output front element), 'PEEK' (output front element without removing), 'SIZE' (output current size), 'ISEMPTY' (output True/False). If DEQUEUE or PEEK on an empty queue, output 'Queue Empty'.\n\n**Constraints**\nOperations will be space-separated. X will be an integer.\nInput format:\nA single line of space-separated operations.\n\nOutput format:\nMultiple lines, each an integer, string, or boolean, corresponding to operation outputs.",
    "starter_code": "# Write a program that implements a basic queue.",
    "test_cases": [
      {
        "input": [
          "ENQUEUE 10 ENQUEUE 20 DEQUEUE PEEK SIZE ISEMPTY DEQUEUE DEQUEUE"
        ],
        "expected_output": "10\n20\n1\nFalse\n20\nQueue Empty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_268",
    "title": "Implement a Stack (Push, Pop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a basic stack. It takes a sequence of operations as input: 'PUSH X' (add X to stack), 'POP' (remove and output top element), 'PEEK' (output top element without removing), 'SIZE' (output current size), 'ISEMPTY' (output True/False). If POP or PEEK on an empty stack, output 'Stack Empty'.\n\n**Constraints**\nOperations will be space-separated. X will be an integer.\nInput format:\nA single line of space-separated operations.\n\nOutput format:\nMultiple lines, each an integer, string, or boolean, corresponding to operation outputs.",
    "starter_code": "# Write a program that implements a basic stack.",
    "test_cases": [
      {
        "input": [
          "PUSH 10 PUSH 20 POP PEEK SIZE ISEMPTY POP POP"
        ],
        "expected_output": "20\n10\n1\nFalse\n10\nStack Empty"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_269",
    "title": "Decimal to Binary Conversion",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer (decimal) as input and outputs its binary representation as a string.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that converts a decimal number to its binary representation.",
    "test_cases": [
      {
        "input": [
          "10"
        ],
        "expected_output": "1010"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_270",
    "title": "Binary to Decimal Conversion",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a binary string as input and outputs its decimal integer equivalent.\n\n**Constraints**\nInput will be a string containing only '0' and '1'.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that converts a binary string to its decimal representation.",
    "test_cases": [
      {
        "input": [
          "1010"
        ],
        "expected_output": "10"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_271",
    "title": "Check if Number is Perfect Square",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and outputs `True` if it is a perfect square, otherwise `False`.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a number is a perfect square.",
    "test_cases": [
      {
        "input": [
          "9"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "10"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_272",
    "title": "Nth Fibonacci Number (Iterative)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `N` as input and outputs the `N`-th Fibonacci number using an iterative approach. (The 0th Fibonacci number is 0, the 1st is 1).\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the Nth Fibonacci number iteratively.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "13"
      },
      {
        "input": [
          "0"
        ],
        "expected_output": "0"
      },
      {
        "input": [
          "1"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_273",
    "title": "Calculate LCM of Two Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers `a` and `b` as input and outputs their Least Common Multiple (LCM). Use the formula: $LCM(a, b) = \\frac{|a \\times b|}{GCD(a, b)}$. You may assume a `GCD` function is available or implement it.\n\n**Constraints**\nInputs will be positive integers.\nInput format:\nLine 1: Integer a.\nLine 2: Integer b.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the LCM of two numbers. You may need to implement GCD first.",
    "test_cases": [
      {
        "input": [
          "4",
          "6"
        ],
        "expected_output": "12"
      },
      {
        "input": [
          "7",
          "5"
        ],
        "expected_output": "35"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_274",
    "title": "Print Diamond Pattern",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer `N` as input and prints a diamond pattern of stars with `N` rows. The middle row should have `N` stars.\n\n**Constraints**\nInput will be an odd positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that prints a diamond pattern of stars.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "  *\n ***\n*****\n ***\n  *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_275",
    "title": "Convert Celsius to Fahrenheit (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `celsius_to_fahrenheit` that takes a float `celsius` as input and returns the equivalent temperature in Fahrenheit. Formula: $F = C \\times 9/5 + 32$. Round to two decimal places.\n\n**Constraints**\nInput will be a float.\n\nInput (function call):\n`celsius_to_fahrenheit(25.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def celsius_to_fahrenheit(celsius):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "25.0"
        ],
        "expected_output": "77.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_276",
    "title": "Reverse a List In-Place",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and reverses the list *in-place* (modifies the original list directly) without creating a new list. Then, output the modified list.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that reverses a list in-place.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_277",
    "title": "Find Second Largest Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the second largest element in the list. Assume the list has at least two unique elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the second largest element in a list.",
    "test_cases": [
      {
        "input": [
          "10 50 20 40 30"
        ],
        "expected_output": "40"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_278",
    "title": "Basic Matrix Addition (2x2)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two 2x2 matrices (lists of lists of integers) as input and outputs their sum. Each matrix row should be on a separate line.\n\n**Constraints**\nMatrices will always be 2x2.\nInput format:\nLine 1: Space-separated integers for matrix 1, row 1.\nLine 2: Space-separated integers for matrix 1, row 2.\nLine 3: Space-separated integers for matrix 2, row 1.\nLine 4: Space-separated integers for matrix 2, row 2.\n\nOutput format:\nMultiple lines, each a space-separated string of integers representing the sum matrix.",
    "starter_code": "# Write a program that performs basic matrix addition for 2x2 matrices.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4",
          "5 6",
          "7 8"
        ],
        "expected_output": "6 8\n10 12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_279",
    "title": "Find Pairs with Given Sum",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers and a `target_sum` as input. Output `True` if there exists any pair of numbers in the list that sum up to `target_sum`, otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: Space-separated string of distinct integers.\nLine 2: Target sum (integer).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if there are two numbers in a list that sum to a target.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "7"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 2 3 4 5",
          "10"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_280",
    "title": "Find Missing Number in Sequence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of `N-1` distinct integers, ranging from 1 to `N`, as input. Output the missing number in the sequence. Assume exactly one number is missing.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the missing number in a sequence.",
    "test_cases": [
      {
        "input": [
          "1 2 4 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_281",
    "title": "Count Words Starting with Specific Letter",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and a single character `letter` as input. Output the count of words in the sentence that start with that `letter` (case-insensitive).\n\n**Constraints**\nWords are separated by spaces. `letter` will be a single alphabetic character.\n\nInput format:\nLine 1: Sentence (string).\nLine 2: Letter (string).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts words starting with a specific letter.",
    "test_cases": [
      {
        "input": [
          "Apple banana cherry Ananas",
          "a"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_282",
    "title": "Find All Substrings of a String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs all its unique substrings, sorted alphabetically. Each substring should be on a new line.\n\n**Constraints**\nInput will be a single string. Max length 10.\n\nInput format:\nA string.\n\nOutput format:\nMultiple lines of strings.",
    "starter_code": "# Write a program that finds all unique substrings of a string.",
    "test_cases": [
      {
        "input": [
          "abc"
        ],
        "expected_output": "a\nab\nabc\nb\nbc\nc"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_283",
    "title": "Print Pascal's Triangle (N Rows)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and prints the first `N` rows of Pascal's Triangle. Each row should be space-separated. Hint: Each number is the sum of the two numbers directly above it.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of space-separated integers.",
    "starter_code": "# Write a program that prints Pascal's Triangle up to N rows.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "1\n1 1\n1 2 1\n1 3 3 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_284",
    "title": "Check if Number is Automorphic",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `N` as input and outputs `True` if `N` is an Automorphic number, otherwise `False`. An Automorphic number is a number whose square ends in the same digits as the number itself (e.g., 5 is Automorphic because $5^2 = 25$).\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a number is Automorphic.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "6"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "7"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "25"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_285",
    "title": "Check if Two Rectangles Overlap",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the coordinates of two rectangles as input. Each rectangle is defined by its top-left (x1, y1) and bottom-right (x2, y2) corners. Output `True` if the rectangles overlap (including touching at edges/corners), otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: rect1_x1 rect1_y1 rect1_x2 rect1_y2\nLine 2: rect2_x1 rect2_y1 rect2_x2 rect2_y2\nAssume x1 < x2 and y1 < y2 for both rectangles.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if two rectangles overlap.",
    "test_cases": [
      {
        "input": [
          "0 0 5 5",
          "3 3 8 8"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "0 0 5 5",
          "6 6 10 10"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_286",
    "title": "Validate Credit Card Number (Luhn Algorithm - Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string representing a credit card number (digits only) as input. Output `True` if the number is valid according to a simplified Luhn algorithm. The simplified algorithm involves summing all digits, and checking if the sum is divisible by 10. *Note: This is a highly simplified version for educational purposes and not the full Luhn algorithm.*\n\n**Constraints**\nInput will be a string of digits.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that validates a credit card number using a simplified Luhn algorithm.",
    "test_cases": [
      {
        "input": [
          "49927398716"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "12345"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_287",
    "title": "Basic File Path Parser (Filename & Extension)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a file path string as input (e.g., \"C:/Users/Document.txt\"). Output the filename (including extension) and then the file extension separately, each on a new line. If no extension, output an empty string for extension.\n\n**Constraints**\nInput will be a string. Paths can use '/' or '\\'.\n\nInput format:\nA string.\n\nOutput format:\nTwo strings on separate lines.",
    "starter_code": "# Write a program that parses a file path to extract filename and extension.",
    "test_cases": [
      {
        "input": [
          "C:/Users/Document.txt"
        ],
        "expected_output": "Document.txt\ntxt"
      },
      {
        "input": [
          "/home/user/image"
        ],
        "expected_output": "image\n"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_288",
    "title": "Simple ATM Transaction (Withdrawal)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that simulates a simple ATM withdrawal. It takes an initial `balance` (float) and a `withdrawal_amount` (float) as input. Output the new balance if the transaction is successful (sufficient funds). If `withdrawal_amount` is greater than `balance`, output 'Insufficient Funds' and the original balance. Round balance to two decimal places.\n\n**Constraints**\nInputs will be floats.\nInput format:\nLine 1: Initial balance.\nLine 2: Withdrawal amount.\n\nOutput format:\nA float or a string and a float on separate lines.",
    "starter_code": "# Write a program that simulates an ATM withdrawal.",
    "test_cases": [
      {
        "input": [
          "100.00",
          "50.00"
        ],
        "expected_output": "50.00"
      },
      {
        "input": [
          "75.00",
          "100.00"
        ],
        "expected_output": "Insufficient Funds\n75.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_289",
    "title": "Number of Days in a Month",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `month_number` (1-12) and an integer `year` as input. Output the number of days in that month. Account for leap years for February.\n\n**Constraints**\n`month_number` will be between 1 and 12. `year` will be a positive integer.\n\nInput format:\nLine 1: Month number (integer).\nLine 2: Year (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that determines the number of days in a given month and year.",
    "test_cases": [
      {
        "input": [
          "2",
          "2024"
        ],
        "expected_output": "29"
      },
      {
        "input": [
          "2",
          "2023"
        ],
        "expected_output": "28"
      },
      {
        "input": [
          "4",
          "2023"
        ],
        "expected_output": "30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_290",
    "title": "Count Prime Numbers in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers, `start` and `end`, as input. Output the count of prime numbers within that inclusive range.\n\n**Constraints**\nInputs will be positive integers, `start` <= `end`.\n\nInput format:\nLine 1: start (integer).\nLine 2: end (integer).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts prime numbers in a given range.",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_291",
    "title": "Check if Array is Monotonic",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if the array is monotonic (either entirely non-decreasing or entirely non-increasing), otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if an array is monotonic.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 4"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "5 4 3 2 1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "1 3 2"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_292",
    "title": "Matrix Scalar Multiplication (2x2)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a 2x2 matrix (list of lists of integers) and an integer `scalar` as input. Output the resulting matrix after multiplying each element by the `scalar`.\n\n**Constraints**\nMatrix will always be 2x2. `scalar` will be an integer.\nInput format:\nLine 1: Space-separated integers for matrix row 1.\nLine 2: Space-separated integers for matrix row 2.\nLine 3: Scalar (integer).\n\nOutput format:\nMultiple lines, each a space-separated string of integers representing the resulting matrix.",
    "starter_code": "# Write a program that performs scalar multiplication on a 2x2 matrix.",
    "test_cases": [
      {
        "input": [
          "1 2",
          "3 4",
          "5"
        ],
        "expected_output": "5 10\n15 20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_293",
    "title": "Count Palindromic Substrings (Simple)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the count of all palindromic substrings of length 1 or greater. Assume single characters are palindromes.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts all palindromic substrings of a string.",
    "test_cases": [
      {
        "input": [
          "aaa"
        ],
        "expected_output": "6"
      },
      {
        "input": [
          "aba"
        ],
        "expected_output": "5"
      },
      {
        "input": [
          "abc"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_294",
    "title": "Validate IP Address (Simplified IPv4)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if it's a valid simplified IPv4 address, otherwise `False`. A simplified valid IPv4 address consists of four numbers (0-255) separated by three dots. No leading zeros for segments (unless the segment is '0').\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that validates a simplified IPv4 address.",
    "test_cases": [
      {
        "input": [
          "192.168.1.1"
        ],
        "expected_output": "True"
      },
      {
        "input": [
          "256.1.1.1"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "192.168.01.1"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "1.1.1"
        ],
        "expected_output": "False"
      },
      {
        "input": [
          "0.0.0.0"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_295",
    "title": "Check if All Digits are Even/Odd",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer as input. Output 'All Even' if all digits in the number are even, 'All Odd' if all digits are odd, and 'Mixed' otherwise.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that checks if all digits in a number are even, odd, or mixed.",
    "test_cases": [
      {
        "input": [
          "246"
        ],
        "expected_output": "All Even"
      },
      {
        "input": [
          "135"
        ],
        "expected_output": "All Odd"
      },
      {
        "input": [
          "123"
        ],
        "expected_output": "Mixed"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_296",
    "title": "Reverse a Number (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `reverse_number` that takes a non-negative integer `n` as input and returns the number with its digits reversed. Leading zeros in the reversed number should be removed (e.g., 120 reversed is 21).\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput (function call):\n`reverse_number(12340)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def reverse_number(n):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "12340"
        ],
        "expected_output": "4321"
      },
      {
        "input": [
          "5"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_297",
    "title": "Count Elements Greater Than Average",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input. Calculate the average of the elements and then output the count of elements in the list that are strictly greater than the average.\n\n**Constraints**\nInput format:\nA space-separated string of integers. List will not be empty.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts elements greater than the average in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "2"
      },
      {
        "input": [
          "10 10 10 10"
        ],
        "expected_output": "0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_298",
    "title": "Find Longest Common Prefix (of two strings)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and outputs their longest common prefix. If there's no common prefix, output an empty string.\n\n**Constraints**\nInputs will be strings.\nInput format:\nLine 1: String 1.\nLine 2: String 2.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that finds the longest common prefix of two strings.",
    "test_cases": [
      {
        "input": [
          "flower",
          "flow"
        ],
        "expected_output": "flow"
      },
      {
        "input": [
          "apple",
          "apricot"
        ],
        "expected_output": "ap"
      },
      {
        "input": [
          "dog",
          "racecar"
        ],
        "expected_output": ""
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_299",
    "title": "Print a Grid of Characters",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `rows` and `cols`, and a character `char` as input. Print a grid of the specified `char` with the given dimensions.\n\n**Constraints**\n`rows` and `cols` will be positive integers.\n\nInput format:\nLine 1: Rows (integer).\nLine 2: Cols (integer).\nLine 3: Character (string).\n\nOutput format:\nMultiple lines of characters.",
    "starter_code": "# Write a program that prints a grid of characters.",
    "test_cases": [
      {
        "input": [
          "3",
          "4",
          "#"
        ],
        "expected_output": "####\n####\n####"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_300",
    "title": "Simple Stock Profit Calculator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two floats as input: `buy_price` and `sell_price` for a single share of stock. Output the profit or loss per share, rounded to two decimal places. If `sell_price` > `buy_price`, it's a profit; if `sell_price` < `buy_price`, it's a loss (negative value); if `sell_price` = `buy_price`, it's 0.\n\n**Constraints**\nInputs will be positive floats.\nInput format:\nLine 1: Buy price (float).\nLine 2: Sell price (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates stock profit or loss per share.",
    "test_cases": [
      {
        "input": [
          "100.00",
          "120.50"
        ],
        "expected_output": "20.50"
      },
      {
        "input": [
          "120.50",
          "100.00"
        ],
        "expected_output": "-20.50"
      },
      {
        "input": [
          "50.00",
          "50.00"
        ],
        "expected_output": "0.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_301",
    "title": "Reverse a List of Integers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the list in reverse order.\n\n**Constraints**\nThe input will be a space-separated string of integers.\n\nInput format:\nA string.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the list in reverse order.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "5 4 3 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_302",
    "title": "Convert String to Uppercase",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the string converted to all uppercase letters.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string (uppercase).",
    "starter_code": "# Write a program that takes a string as input and outputs the string converted to all uppercase letters.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "HELLO WORLD"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_303",
    "title": "Calculate Cube",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and outputs its cube.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes an integer as input and outputs its cube.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "27"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_304",
    "title": "Check if Number is Zero",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and outputs `True` if the number is zero, otherwise `False`.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes an integer as input and outputs True if the number is zero, otherwise False.",
    "test_cases": [
      {
        "input": [
          "0"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_305",
    "title": "Print Numbers from 1 to N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and prints all integers from 1 to `N`, each on a new line.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that takes a positive integer N as input and prints all integers from 1 to N.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1\n2\n3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_306",
    "title": "Count Words in a Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input and outputs the total number of words in it. Assume words are separated by single spaces.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a sentence (string) as input and outputs the total number of words in it.",
    "test_cases": [
      {
        "input": [
          "This is a test sentence"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_307",
    "title": "Calculate Average of Three Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three numbers as input and outputs their average. Round the result to two decimal places.\n\n**Constraints**\nInputs will be floats or integers.\nInput format:\nLine 1: Number 1.\nLine 2: Number 2.\nLine 3: Number 3.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes three numbers as input and outputs their average.",
    "test_cases": [
      {
        "input": [
          "10",
          "20",
          "30"
        ],
        "expected_output": "20.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_308",
    "title": "Check if Character is Digit",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character as input and outputs `True` if it is a digit (0-9), otherwise `False`.\n\n**Constraints**\nInput will be a single character string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that takes a single character as input and outputs True if it is a digit, otherwise False.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_309",
    "title": "Count Negative Numbers in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the count of negative numbers in the list.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the count of negative numbers.",
    "test_cases": [
      {
        "input": [
          "1 -2 3 -4 5"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_310",
    "title": "Sum of First N Even Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs the sum of the first `N` even numbers (starting from 2).\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a positive integer N as input and outputs the sum of the first N even numbers.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_311",
    "title": "Check if String Contains Substring",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input: a main string and a substring. Output `True` if the main string contains the substring, otherwise `False`. (Case-sensitive).\n\n**Constraints**\nInput format:\nLine 1: Main string.\nLine 2: Substring.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a main string contains a substring.",
    "test_cases": [
      {
        "input": [
          "hello world",
          "world"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_312",
    "title": "Compare Two Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers as input and outputs 'Greater' if the first is greater, 'Smaller' if the first is smaller, or 'Equal' if they are equal.\n\n**Constraints**\nInput will be integers.\nInput format:\nLine 1: Integer 1.\nLine 2: Integer 2.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that compares two numbers.",
    "test_cases": [
      {
        "input": [
          "10",
          "5"
        ],
        "expected_output": "Greater"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_313",
    "title": "Print Even Numbers in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Print all even numbers within this inclusive range, each on a new line.\n\n**Constraints**\n`start` <= `end`. Inputs will be integers.\nInput format:\nLine 1: Start integer.\nLine 2: End integer.\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that prints even numbers within a given range.",
    "test_cases": [
      {
        "input": [
          "1",
          "6"
        ],
        "expected_output": "2\n4\n6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_314",
    "title": "Check if List is Sorted (Ascending)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if the list is sorted in ascending order, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a list is sorted in ascending order.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_315",
    "title": "Concatenate List of Strings",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings as input and outputs a single string formed by concatenating all elements.\n\n**Constraints**\nInput format:\nA space-separated string of strings.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that concatenates a list of strings.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry"
        ],
        "expected_output": "applebananacherry"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_316",
    "title": "Find Second Smallest in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of distinct integers as input and outputs the second smallest number in the list.\n\n**Constraints**\nThe list will contain at least two distinct integers.\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of distinct integers as input and outputs the second smallest number in the list.",
    "test_cases": [
      {
        "input": [
          "10 5 20 15"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_317",
    "title": "Print Right-Angled Number Triangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a right-angled triangle pattern where the `i`-th row contains the number `i` repeated `i` times.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers.",
    "starter_code": "# Write a program that prints a right-angled number triangle.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1\n22\n333"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_318",
    "title": "Calculate Factorial",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `N` as input and outputs its factorial. (e.g., `factorial(5) = 5 * 4 * 3 * 2 * 1 = 120`).\n\n**Constraints**\nInput will be a non-negative integer up to 10.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the factorial of a non-negative integer.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_319",
    "title": "Simple Login Check",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a `username` and `password` as input. If `username` is 'admin' AND `password` is 'password123', output 'Login Successful'. Otherwise, output 'Invalid Credentials'.\n\n**Constraints**\nInput format:\nLine 1: Username (string).\nLine 2: Password (string).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program for a simple login check.",
    "test_cases": [
      {
        "input": [
          "admin",
          "password123"
        ],
        "expected_output": "Login Successful"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_320",
    "title": "Find Index of First Occurrence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a `target` integer as input. Output the 0-based index of the first occurrence of the `target` in the list. If the `target` is not found, output -1.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (target).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the index of the first occurrence of an element in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 30 20 40",
          "20"
        ],
        "expected_output": "1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_321",
    "title": "Convert String to Lowercase",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the string converted to all lowercase letters.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string (lowercase).",
    "starter_code": "# Write a program that takes a string as input and outputs the string converted to all lowercase letters.",
    "test_cases": [
      {
        "input": [
          "HELLO WORLD"
        ],
        "expected_output": "hello world"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_322",
    "title": "Multiplication Table",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and prints its multiplication table from 1 to 5. Each line should be in the format `N x i = Result`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of strings.",
    "starter_code": "# Write a program that prints the multiplication table for a given integer.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_323",
    "title": "Check if Year is Century Year",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `year` as input and outputs `True` if it is a century year (divisible by 100), otherwise `False`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a year is a century year.",
    "test_cases": [
      {
        "input": [
          "2000"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_324",
    "title": "Remove First Occurrence from List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a `target` integer as input. Output a new list with the *first* occurrence of the `target` integer removed. If the target is not found, return the original list.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (target).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that removes the first occurrence of an element from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 2 4",
          "2"
        ],
        "expected_output": "1 3 2 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_325",
    "title": "Sum of Odd Numbers in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of all odd numbers in the list.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of odd numbers in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_326",
    "title": "Convert String to Title Case",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the string converted to title case (first letter of each word capitalized, rest lowercase).\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string (title case).",
    "starter_code": "# Write a program that converts a string to title case.",
    "test_cases": [
      {
        "input": [
          "hello world python"
        ],
        "expected_output": "Hello World Python"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_327",
    "title": "Simple Number Guessing Game",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program for a simplified number guessing game. It takes a `secret_number` (integer) and a `guess` (integer) as input. Output 'Too High' if `guess` > `secret_number`, 'Too Low' if `guess` < `secret_number`, and 'Correct!' if they are equal.\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: Secret number.\nLine 2: Guess.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program for a simplified number guessing game.",
    "test_cases": [
      {
        "input": [
          "50",
          "75"
        ],
        "expected_output": "Too High"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_328",
    "title": "Filter Even Numbers from List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list containing only the even numbers from the original list, in the same order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that filters even numbers from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5 6"
        ],
        "expected_output": "2 4 6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_329",
    "title": "Print Square of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `side` as input and prints a solid square of stars with `side` rows and `side` columns.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that prints a solid square of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "***\n***\n***"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_330",
    "title": "Sum of Numbers from 1 to N (Loop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs the sum of all integers from 1 to `N` using a loop.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of numbers from 1 to N using a loop.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_331",
    "title": "Check if Character is Uppercase",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character as input and outputs `True` if it is an uppercase letter, otherwise `False`.\n\n**Constraints**\nInput will be a single character string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a character is an uppercase letter.",
    "test_cases": [
      {
        "input": [
          "A"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_332",
    "title": "Discount Calculator",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an original `price` (float) and a `discount_percentage` (float, e.g., 0.10 for 10%) as input. Output the final price after applying the discount, rounded to two decimal places.\n\n**Constraints**\nInputs will be non-negative floats.\nInput format:\nLine 1: Original price.\nLine 2: Discount percentage.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the final price after a discount.",
    "test_cases": [
      {
        "input": [
          "100.0",
          "0.20"
        ],
        "expected_output": "80.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_333",
    "title": "Find Sum of First and Last Element of List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of its first and last elements. Assume the list has at least two elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that takes a list of integers as input and outputs the sum of its first and last elements.",
    "test_cases": [
      {
        "input": [
          "10 20 30 40 50"
        ],
        "expected_output": "60"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_334",
    "title": "Print Odds in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Print all odd numbers within this inclusive range, each on a new line.\n\n**Constraints**\n`start` <= `end`. Inputs will be integers.\nInput format:\nLine 1: Start integer.\nLine 2: End integer.\n\nOutput format:\nMultiple lines of integers.",
    "starter_code": "# Write a program that prints odd numbers within a given range.",
    "test_cases": [
      {
        "input": [
          "1",
          "7"
        ],
        "expected_output": "1\n3\n5\n7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_335",
    "title": "Reverse Words in a String (Character-wise)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string (which may contain spaces) as input and outputs the string in reverse character order.\n\n**Constraints**\nThe input will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string (reversed).",
    "starter_code": "# Write a program that takes a string (which may contain spaces) as input and outputs the string in reverse order.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "dlrow olleh"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_336",
    "title": "Check if List Contains Element",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and a `target` integer as input. Output `True` if the `target` is present in the list, otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (target).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a list contains a specific element.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5",
          "3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_337",
    "title": "Print Inverted Right-Angled Number Triangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints an inverted right-angled number triangle. The first row has numbers from 1 to `rows`, the second from 1 to `rows-1`, and so on.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers.",
    "starter_code": "# Write a program that prints an inverted right-angled number triangle.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 3\n1 2\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_338",
    "title": "Calculate Sum of Squares",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs the sum of squares of all integers from 1 to `N` (i.e., $1^2 + 2^2 + ... + N^2$).\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of squares of numbers from 1 to N.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "14"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_339",
    "title": "Count Vowels in Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input and outputs the total count of vowels (a, e, i, o, u, case-insensitive) in that sentence.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts vowels in a sentence.",
    "test_cases": [
      {
        "input": [
          "Hello Python"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_340",
    "title": "Check if Number is Between Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers: `number`, `lower_bound`, and `upper_bound`. Output `True` if `number` is strictly between `lower_bound` and `upper_bound` (exclusive), otherwise `False`.\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: Number.\nLine 2: Lower bound.\nLine 3: Upper bound.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a number is between a given range (exclusive).",
    "test_cases": [
      {
        "input": [
          "5",
          "1",
          "10"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_341",
    "title": "Generate Even Numbers List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs a list containing the first `N` even numbers (starting from 2), separated by spaces.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that generates a list of the first N even numbers.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "2 4 6 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_342",
    "title": "Calculate Simple Average",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two numbers as input and outputs their average. Round the result to one decimal place.\n\n**Constraints**\nInputs will be floats or integers.\nInput format:\nLine 1: Number 1.\nLine 2: Number 2.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the simple average of two numbers.",
    "test_cases": [
      {
        "input": [
          "10.0",
          "15.0"
        ],
        "expected_output": "12.5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_343",
    "title": "Check if Character is Lowercase",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character as input and outputs `True` if it is a lowercase letter, otherwise `False`.\n\n**Constraints**\nInput will be a single character string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a character is a lowercase letter.",
    "test_cases": [
      {
        "input": [
          "z"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_344",
    "title": "Print Hollow Square of Hashes",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and prints a hollow square of '#' characters with `N` rows and `N` columns. For `N=1` or `N=2`, print a solid square.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of '#' and spaces.",
    "starter_code": "# Write a program that prints a hollow square of hashes.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "####\n#  #\n#  #\n####"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_345",
    "title": "Find Mode in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the mode (the most frequently occurring element). Assume there is always a unique mode.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the mode in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 3 3 4"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_346",
    "title": "Calculate Area of Triangle (Input Base & Height)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the base and height of a triangle as input. Calculate and output its area. Formula: $Area = 0.5 \\times \\text{base} \\times \\text{height}$.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Base (float).\nLine 2: Height (float).\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that takes the base and height of a triangle as input. Calculate and output its area.",
    "test_cases": [
      {
        "input": [
          "10.0",
          "5.0"
        ],
        "expected_output": "25.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_347",
    "title": "Generate Odd Numbers List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs a list containing the first `N` odd numbers (starting from 1), separated by spaces.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that generates a list of the first N odd numbers.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "1 3 5 7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_348",
    "title": "Calculate Sum of Multiples",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers, `N` and `limit`, as input. Output the sum of all multiples of `N` up to `limit` (inclusive).\n\n**Constraints**\nInputs will be positive integers.\nInput format:\nLine 1: N.\nLine 2: Limit.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of multiples of N up to a limit.",
    "test_cases": [
      {
        "input": [
          "3",
          "10"
        ],
        "expected_output": "18"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_349",
    "title": "Capitalize First Letter of Each Word in Sentence",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the sentence with the first letter of each word capitalized and the rest lowercase.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that capitalizes the first letter of each word in a sentence.",
    "test_cases": [
      {
        "input": [
          "this is a sample sentence"
        ],
        "expected_output": "This Is A Sample Sentence"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_350",
    "title": "Check if Password Meets Minimum Length",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `password` and an integer `min_length` as input. Output `True` if the `password` length is greater than or equal to `min_length`, otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: Password (string).\nLine 2: Minimum length (integer).\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a password meets a minimum length.",
    "test_cases": [
      {
        "input": [
          "mysecret",
          "8"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_351",
    "title": "Remove Duplicates from List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list containing only the unique elements from the original list, preserving the original order of first appearance.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that removes duplicates from a list.",
    "test_cases": [
      {
        "input": [
          "1 2 2 3 1 4"
        ],
        "expected_output": "1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_352",
    "title": "Calculate Hypotenuse of Right Triangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the lengths of the two shorter sides of a right-angled triangle (`a` and `b`) as input. Calculate and output the length of the hypotenuse (`c`), rounded to two decimal places. Use the formula: $c = \\sqrt{a^2 + b^2}$.\n\n**Constraints**\nInputs will be positive floats.\nInput format:\nLine 1: Side a.\nLine 2: Side b.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the hypotenuse of a right triangle.",
    "test_cases": [
      {
        "input": [
          "3.0",
          "4.0"
        ],
        "expected_output": "5.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_353",
    "title": "Print Right-Angled Star Triangle (Inverted)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `height` as input and prints an inverted right-angled triangle pattern of stars with that `height`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that prints an inverted right-angled triangle pattern of stars.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "****\n***\n**\n*"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_354",
    "title": "Count Occurrences of Character in String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a single character as input. Output the number of times the character appears in the string (case-sensitive).\n\n**Constraints**\nInput format:\nLine 1: The string.\nLine 2: The character.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts the occurrences of a character in a string.",
    "test_cases": [
      {
        "input": [
          "programming",
          "g"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_355",
    "title": "Find Sum of Even Indexed Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of elements at even indices (0, 2, 4, ...).\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the sum of elements at even indices in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_356",
    "title": "Check if All Elements are Positive",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if all elements in the list are positive, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if all elements in a list are positive.",
    "test_cases": [
      {
        "input": [
          "1 5 10"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_357",
    "title": "Print Full Pyramid of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `height` as input and prints a full pyramid of stars with that `height`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that prints a full pyramid of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "  *\n ***\n*****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_358",
    "title": "Find Maximum of Three Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers as input and outputs the maximum among them.\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: Integer 1.\nLine 2: Integer 2.\nLine 3: Integer 3.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the maximum of three numbers.",
    "test_cases": [
      {
        "input": [
          "10",
          "50",
          "20"
        ],
        "expected_output": "50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_359",
    "title": "Convert Days to Years, Weeks, Days",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a total number of `days` as input. Output the equivalent time in years, weeks, and remaining days. Assume 365 days in a year.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer (total days).\n\nOutput format:\nThree integers on separate lines (years, weeks, days).",
    "starter_code": "# Write a program that converts days to years, weeks, and days.",
    "test_cases": [
      {
        "input": [
          "400"
        ],
        "expected_output": "1\n5\n30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_360",
    "title": "Filter Strings by Length",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated string of words and an integer `min_length` as input. Output a new space-separated string containing only the words that have a length greater than or equal to `min_length`.\n\n**Constraints**\nInput format:\nLine 1: A string of words.\nLine 2: An integer (minimum length).\n\nOutput format:\nA space-separated string of strings.",
    "starter_code": "# Write a program that filters strings by length.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry date",
          "6"
        ],
        "expected_output": "banana cherry"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_361",
    "title": "Calculate Volume of Cube",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the side length of a cube as input and outputs its volume.\n\n**Constraints**\nInput will be a positive number.\n\nInput format:\nA number.\n\nOutput format:\nA number.",
    "starter_code": "# Write a program that calculates the volume of a cube.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "64"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_362",
    "title": "Simple Chatbot (Greeting/Farewell)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single word command ('hi' or 'bye') as input. If the command is 'hi', output 'Hello!'. If it's 'bye', output 'Goodbye!'. For any other input, output 'Unknown command.'.\n\n**Constraints**\nInput will be a single lowercase word.\n\nInput format:\nA string.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program for a simple chatbot.",
    "test_cases": [
      {
        "input": [
          "hi"
        ],
        "expected_output": "Hello!"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_363",
    "title": "Count Words Starting with Vowel",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence as input and outputs the count of words that start with a vowel (a, e, i, o, u, case-insensitive).\n\n**Constraints**\nWords are separated by single spaces.\n\nInput format:\nA string (sentence).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts words starting with a vowel.",
    "test_cases": [
      {
        "input": [
          "Apple orange cat elephant"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_364",
    "title": "Print Fibonacci Sequence (Loop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and prints the first `N` terms of the Fibonacci sequence, separated by spaces. The sequence starts with 0 and 1.\n\n**Constraints**\nInput will be a positive integer up to 10.\n\nInput format:\nAn integer.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that prints the first N terms of the Fibonacci sequence.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "0 1 1 2 3 5 8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_365",
    "title": "Check if String is Palindrome (Case-Insensitive)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single word as input and determines if it is a palindrome (reads the same forwards and backwards), ignoring case. Output `True` if it is a palindrome, otherwise `False`.\n\n**Constraints**\nThe input will be a single string consisting of alphabetic characters.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string is a palindrome (case-insensitive).",
    "test_cases": [
      {
        "input": [
          "Racecar"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_366",
    "title": "Filter Negative Numbers from List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs a new list containing only the negative numbers from the original list, in the same order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that filters negative numbers from a list.",
    "test_cases": [
      {
        "input": [
          "1 -2 3 -4 0 5"
        ],
        "expected_output": "-2 -4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_367",
    "title": "Sort List of Integers (Ascending)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the list sorted in ascending order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that sorts a list of integers in ascending order.",
    "test_cases": [
      {
        "input": [
          "5 2 8 1 9"
        ],
        "expected_output": "1 2 5 8 9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_368",
    "title": "Sum of Digits of a Number",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and outputs the sum of its digits.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of digits of a number.",
    "test_cases": [
      {
        "input": [
          "1234"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_369",
    "title": "Print Diamond of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer `N` as input and prints a diamond pattern of stars. The middle row will have `N` stars.\n\n**Constraints**\nInput will be a positive odd integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that prints a diamond pattern of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": " *\n***\n *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_370",
    "title": "Count Characters (Excluding Spaces)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total number of characters, excluding spaces.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts characters in a string, excluding spaces.",
    "test_cases": [
      {
        "input": [
          "hello world"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_371",
    "title": "Generate Multiples of N List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two positive integers, `N` and `count`, as input. Output a list containing the first `count` multiples of `N`, separated by spaces.\n\n**Constraints**\nInputs will be positive integers.\nInput format:\nLine 1: N.\nLine 2: Count.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that generates a list of the first 'count' multiples of N.",
    "test_cases": [
      {
        "input": [
          "5",
          "3"
        ],
        "expected_output": "5 10 15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_372",
    "title": "Find Smallest of Three Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers as input and outputs the smallest among them.\n\n**Constraints**\nInputs will be integers.\nInput format:\nLine 1: Integer 1.\nLine 2: Integer 2.\nLine 3: Integer 3.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the smallest of three numbers.",
    "test_cases": [
      {
        "input": [
          "10",
          "5",
          "20"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_373",
    "title": "Calculate Grade Based on Percentage",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a numerical `score` (integer) as input. Output 'A' if score >= 90, 'B' if >= 80, 'C' if >= 70, 'D' if >= 60, and 'F' otherwise.\n\n**Constraints**\nInput will be an integer between 0 and 100.\n\nInput format:\nAn integer (score).\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that calculates a grade based on a percentage score.",
    "test_cases": [
      {
        "input": [
          "85"
        ],
        "expected_output": "B"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_374",
    "title": "Count Digits in a Number",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer as input and outputs the number of digits it contains.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts the number of digits in a number.",
    "test_cases": [
      {
        "input": [
          "12345"
        ],
        "expected_output": "5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_375",
    "title": "Remove Specific Character from String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a character as input. Output a new string with all occurrences of the character removed.\n\n**Constraints**\nInput format:\nLine 1: The string.\nLine 2: The character to remove.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that removes a specific character from a string.",
    "test_cases": [
      {
        "input": [
          "programming",
          "g"
        ],
        "expected_output": "programmin"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_376",
    "title": "Check if Any Element is Negative",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if any element in the list is negative, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if any element in a list is negative.",
    "test_cases": [
      {
        "input": [
          "1 5 -10"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_377",
    "title": "Print Inverted Full Pyramid of Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints an inverted full pyramid of numbers. The first row has numbers from 1 to `rows`, decreasing with each row.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers and spaces.",
    "starter_code": "# Write a program that prints an inverted full pyramid of numbers.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 3\n 1 2\n  1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_378",
    "title": "Sum of First N Odd Numbers (Loop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs the sum of the first `N` odd numbers (starting from 1) using a loop.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of the first N odd numbers using a loop.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_379",
    "title": "Validate Email Format (Basic)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string `email` as input. Output `True` if the `email` contains both an '@' symbol and a '.' (dot) symbol, otherwise `False`. This is a basic check, not a full validation.\n\n**Constraints**\nInput will be a string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that performs a basic email format validation.",
    "test_cases": [
      {
        "input": [
          "test@example.com"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_380",
    "title": "Find Median of List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the median of the list. If the list has an odd number of elements, the median is the middle element. If even, it's the average of the two middle elements. Assume the list is already sorted.\n\n**Constraints**\nInput will be a space-separated string of sorted integers.\n\nInput format:\nA string.\n\nOutput format:\nA float (or integer if exact).",
    "starter_code": "# Write a program that finds the median of a sorted list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_381",
    "title": "Replace Substring",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a main string, a `target` substring, and a `replacement` substring as input. Output the main string with all occurrences of the `target` replaced by the `replacement`.\n\n**Constraints**\nInput format:\nLine 1: Main string.\nLine 2: Target substring.\nLine 3: Replacement substring.\n\nOutput format:\nA string.",
    "starter_code": "# Write a program that replaces all occurrences of a substring.",
    "test_cases": [
      {
        "input": [
          "hello world hello",
          "hello",
          "hi"
        ],
        "expected_output": "hi world hi"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_382",
    "title": "Sum of First N Numbers (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `sum_up_to_n` that takes a positive integer `n` as a parameter and returns the sum of all integers from 1 to `n`.\n\n**Constraints**\nInput parameter will be a positive integer.\n\nInput (function call):\n`sum_up_to_n(5)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def sum_up_to_n(n):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_383",
    "title": "Print Reverse Alphabet Triangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a reverse alphabet triangle. The first row has the last letter (e.g., 'C' for rows=3), the second 'BB', the third 'A', and so on.\n\n**Constraints**\nInput will be a positive integer (1-26).\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of characters.",
    "starter_code": "# Write a program that prints a reverse alphabet triangle.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "CCC\nBB\nA"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_384",
    "title": "Count Prime Numbers in Range",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two integers, `start` and `end`, as input. Output the count of prime numbers within this inclusive range. For simplicity, consider numbers up to 20.\n\n**Constraints**\n`start` <= `end`. Inputs will be integers between 1 and 20.\nInput format:\nLine 1: Start integer.\nLine 2: End integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts prime numbers within a range.",
    "test_cases": [
      {
        "input": [
          "1",
          "10"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_385",
    "title": "Check if Number is Perfect Square",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a non-negative integer `N` as input and outputs `True` if `N` is a perfect square, otherwise `False`.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a number is a perfect square.",
    "test_cases": [
      {
        "input": [
          "25"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_386",
    "title": "Calculate Area of Rectangle (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_rectangle_area` that takes two float parameters, `length` and `width`, and returns the area of the rectangle.\n\n**Constraints**\nInput parameters will be positive floats.\n\nInput (function call):\n`calculate_rectangle_area(7.0, 3.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def calculate_rectangle_area(length, width):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "7.0",
          "3.0"
        ],
        "expected_output": "21.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_387",
    "title": "Is Palindrome (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_palindrome` that takes a string as a parameter and returns `True` if it's a palindrome (reads the same forwards and backwards, case-insensitive), otherwise `False`.\n\n**Constraints**\nInput parameter will be a string.\n\nInput (function call):\n`is_palindrome(\"Madam\")`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_palindrome(text):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "Madam"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_388",
    "title": "Count Vowels Using Function",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `count_vowels` that takes a string as input and returns the total count of vowels (a, e, i, o, u, case-insensitive) in that string.\n\n**Constraints**\nInput will be a single string. Only alphabetic characters will be considered for vowel counting.\n\nInput (function call):\n`count_vowels(\"Elephant\")`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def count_vowels(text):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "Elephant"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_389",
    "title": "Find Max in List (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `find_max_in_list` that takes a list of integers as a parameter and returns the maximum value in the list. Assume the list will not be empty.\n\n**Constraints**\nInput parameter will be a non-empty list of integers.\n\nInput (function call):\n`find_max_in_list([10, 5, 20, 15])`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def find_max_in_list(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[10, 5, 20, 15]"
        ],
        "expected_output": "20"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_390",
    "title": "Reverse String (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `reverse_string` that takes a string as a parameter and returns the string in reverse order.\n\n**Constraints**\nInput parameter will be a string.\n\nInput (function call):\n`reverse_string(\"Python\")`\n\nOutput (return value):\nA string.",
    "starter_code": "def reverse_string(text):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "Python"
        ],
        "expected_output": "nohtyP"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_391",
    "title": "Is Leap Year (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_leap_year` that takes an integer `year` as a parameter and returns `True` if it's a leap year, otherwise `False`. A year is a leap year if it is divisible by 4, unless it is divisible by 100 but not by 400.\n\n**Constraints**\nInput parameter will be a positive integer.\n\nInput (function call):\n`is_leap_year(2024)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_leap_year(year):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "2024"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_392",
    "title": "Calculate Factorial (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_factorial` that takes a non-negative integer `n` as a parameter and returns its factorial.\n\n**Constraints**\nInput parameter will be a non-negative integer up to 10.\n\nInput (function call):\n`calculate_factorial(5)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def calculate_factorial(n):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "120"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_393",
    "title": "Count Even Numbers in List (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `count_evens` that takes a list of integers as a parameter and returns the count of even numbers within the list.\n\n**Constraints**\nInput parameter will be a list of integers.\n\nInput (function call):\n`count_evens([1, 2, 3, 4, 5, 6])`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def count_evens(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 3, 4, 5, 6]"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_394",
    "title": "Sum of List Elements (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `sum_list_elements` that takes a list of integers as a parameter and returns the sum of all its elements.\n\n**Constraints**\nInput parameter will be a list of integers.\n\nInput (function call):\n`sum_list_elements([1, 2, 3, 4, 5])`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def sum_list_elements(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 3, 4, 5]"
        ],
        "expected_output": "15"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_395",
    "title": "Get Last Element of List (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `get_last_element` that takes a list as a parameter and returns its last element. Assume the list will not be empty.\n\n**Constraints**\nInput parameter will be a non-empty list.\n\nInput (function call):\n`get_last_element([\"apple\", \"banana\", \"cherry\"])`\n\nOutput (return value):\nAny data type.",
    "starter_code": "def get_last_element(my_list):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[\"apple\", \"banana\", \"cherry\"]"
        ],
        "expected_output": "cherry"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_396",
    "title": "Celsius to Fahrenheit (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `c_to_f` that takes a temperature in Celsius (float) as a parameter and returns the equivalent temperature in Fahrenheit. The formula is $F = C * 9/5 + 32$.\n\n**Constraints**\nInput parameter will be a float.\n\nInput (function call):\n`c_to_f(0.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def c_to_f(celsius):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "0.0"
        ],
        "expected_output": "32.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_397",
    "title": "Reverse List (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `reverse_list` that takes a list as a parameter and returns a new list with the elements in reverse order.\n\n**Constraints**\nInput parameter will be a list.\n\nInput (function call):\n`reverse_list([1, 2, 3])`\n\nOutput (return value):\nA list.",
    "starter_code": "def reverse_list(my_list):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 3]"
        ],
        "expected_output": "[3, 2, 1]"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_398",
    "title": "Simple Interest (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_simple_interest` that takes `principal`, `rate` (as a decimal), and `time` (in years) as float parameters and returns the simple interest. Formula: $I = P \\times R \\times T$.\n\n**Constraints**\nInput parameters will be positive floats.\n\nInput (function call):\n`calculate_simple_interest(1000.0, 0.05, 2.0)`\n\nOutput (return value):\nA float.",
    "starter_code": "def calculate_simple_interest(principal, rate, time):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "1000.0",
          "0.05",
          "2.0"
        ],
        "expected_output": "100.0"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_399",
    "title": "Convert Hours to Minutes (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `hours_to_minutes` that takes an integer `hours` as a parameter and returns the equivalent number of minutes.\n\n**Constraints**\nInput parameter will be a non-negative integer.\n\nInput (function call):\n`hours_to_minutes(3)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def hours_to_minutes(hours):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "180"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_400",
    "title": "Check if Divisible by N (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_divisible_by_n` that takes two integers, `number` and `n`, as parameters. Return `True` if `number` is divisible by `n`, otherwise `False`. Assume `n` is not zero.\n\n**Constraints**\nInput parameters will be integers.\n\nInput (function call):\n`is_divisible_by_n(10, 5)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_divisible_by_n(number, n):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "10",
          "5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_401",
    "title": "Perimeter of Rectangle",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the length and width of a rectangle as input and outputs its perimeter.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Length.\nLine 2: Width.\n\nOutput format:\nA number.",
    "starter_code": "# Write a program that takes the length and width of a rectangle as input and outputs its perimeter.",
    "test_cases": [
      {
        "input": [
          "5",
          "3"
        ],
        "expected_output": "16"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_402",
    "title": "Volume of Cylinder",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes the radius and height of a cylinder as input and outputs its volume. Use $3.14159$ for Pi. Formula: $V = \\pi \\times r^2 \\times h$.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Radius.\nLine 2: Height.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the volume of a cylinder.",
    "test_cases": [
      {
        "input": [
          "2.0",
          "5.0"
        ],
        "expected_output": "62.8318"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_403",
    "title": "Check if Number is Odd",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer as input and outputs `True` if the number is odd, otherwise `False`.\n\n**Constraints**\nInput will be an integer.\n\nInput format:\nAn integer.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a number is odd.",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_404",
    "title": "Find Intersection of Two Lists",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and outputs a new list containing only the elements that are common to both lists, without duplicates, preserving the order from the first list.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers (List 1).\nLine 2: A space-separated string of integers (List 2).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that finds the intersection of two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4",
          "3 4 5 6"
        ],
        "expected_output": "3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_405",
    "title": "Print Asterisk Square (Hollow)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and prints a hollow square of `*` characters with `N` rows and `N` columns. For `N=1` or `N=2`, print a solid square.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of `*` and spaces.",
    "starter_code": "# Write a program that prints a hollow square of asterisks.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "*****\n* *\n* *\n* *\n*****"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_406",
    "title": "Convert String to Character List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs a space-separated list of its characters.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA space-separated string of characters.",
    "starter_code": "# Write a program that converts a string to a list of characters.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "h e l l o"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_407",
    "title": "Count Spaces in String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of spaces in the string.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts spaces in a string.",
    "test_cases": [
      {
        "input": [
          "this is a test"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_408",
    "title": "Check if All Elements are Unique",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if all elements in the list are unique, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if all elements in a list are unique.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_409",
    "title": "Print Right-Angled Triangle of Numbers (Increasing)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a right-angled triangle pattern where each row `i` contains numbers from 1 to `i`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers.",
    "starter_code": "# Write a program that prints a right-angled triangle of numbers (increasing).",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "1\n1 2\n1 2 3\n1 2 3 4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_410",
    "title": "Calculate Sum of Absolute Values",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of the absolute values of all its elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of absolute values of elements in a list.",
    "test_cases": [
      {
        "input": [
          "-1 2 -3 4"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_411",
    "title": "Count Words of Specific Length",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence and an integer `length` as input. Output the count of words in the sentence that have exactly that `length`.\n\n**Constraints**\nWords are separated by single spaces.\n\nInput format:\nLine 1: A string (sentence).\nLine 2: An integer (length).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts words of a specific length.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry date",
          "6"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_412",
    "title": "Generate Times Table for N",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and prints its multiplication table from 1 to 10. Each line should be in the format `N x i = Result`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of strings.",
    "starter_code": "# Write a program that generates the times table for N.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_413",
    "title": "Check if Character is Alphabet",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a single character as input and outputs `True` if it is an alphabetic character (a-z, A-Z), otherwise `False`.\n\n**Constraints**\nInput will be a single character string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a character is an alphabet.",
    "test_cases": [
      {
        "input": [
          "$"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_414",
    "title": "Calculate Simple Median (Odd Length List)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (sorted) as input. If the list has an odd number of elements, output the middle element as the median.\n\n**Constraints**\nInput list will have an odd number of elements and be sorted.\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the median of an odd-length sorted list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_415",
    "title": "Print Pattern: Numbers in Rows (Decreasing)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and prints a pattern where the first row has numbers from 1 to `N`, the second from 1 to `N-1`, and so on.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers.",
    "starter_code": "# Write a program that prints a decreasing number pattern.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 3\n1 2\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_416",
    "title": "Convert String to List of Words",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a sentence (string) as input and outputs a new space-separated string where each word is an element. Words are separated by single spaces.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA space-separated string of strings.",
    "starter_code": "# Write a program that converts a string to a list of words.",
    "test_cases": [
      {
        "input": [
          "hello world python"
        ],
        "expected_output": "hello world python"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_417",
    "title": "Count Uppercase Letters",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of uppercase letters in the string.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts uppercase letters in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_418",
    "title": "Check if List is Sorted (Descending)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if the list is sorted in descending order, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a list is sorted in descending order.",
    "test_cases": [
      {
        "input": [
          "5 4 3 2 1"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_419",
    "title": "Print Pyramid of Numbers (Same Number per Row)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a pyramid of numbers. The first row has '1', the second '2 2', the third '3 3 3', and so on, up to `rows` rows.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers and spaces.",
    "starter_code": "# Write a program that prints a pyramid of numbers (same number per row).",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "  1\n 2 2\n3 3 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_420",
    "title": "Validate Positive Integer (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_positive_integer` that takes a number as a parameter and returns `True` if it's a positive integer, otherwise `False`.\n\n**Constraints**\nInput parameter can be any number type.\n\nInput (function call):\n`is_positive_integer(5)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_positive_integer(num):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_421",
    "title": "Calculate Net Salary",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes `gross_salary` (float) and `tax_rate` (float as decimal, e.g., 0.10 for 10%) as input. Calculate the net salary after deducting tax, rounded to two decimal places.\n\n**Constraints**\nInputs will be non-negative floats.\nInput format:\nLine 1: Gross Salary.\nLine 2: Tax Rate.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates net salary after tax.",
    "test_cases": [
      {
        "input": [
          "1000.0",
          "0.15"
        ],
        "expected_output": "850.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_422",
    "title": "Find Union of Two Lists",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two lists of integers as input and outputs a new list containing all unique elements from both lists, preserving the order of first appearance.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers (List 1).\nLine 2: A space-separated string of integers (List 2).\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that finds the union of two lists.",
    "test_cases": [
      {
        "input": [
          "1 2 3",
          "3 4 5"
        ],
        "expected_output": "1 2 3 4 5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_423",
    "title": "Count Lowercase Letters",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of lowercase letters in the string.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts lowercase letters in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "8"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_424",
    "title": "Find Sum of Odd Indexed Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the sum of elements at odd indices (1, 3, 5, ...).\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the sum of elements at odd indices in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4 5"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_425",
    "title": "Convert Minutes to Hours and Minutes",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a total number of `minutes` as input. Output the equivalent time in hours and remaining minutes, each on a new line.\n\n**Constraints**\nInput will be a non-negative integer.\n\nInput format:\nAn integer (total minutes).\n\nOutput format:\nTwo integers on separate lines (hours, minutes).",
    "starter_code": "# Write a program that converts minutes to hours and minutes.",
    "test_cases": [
      {
        "input": [
          "150"
        ],
        "expected_output": "2\n30"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_426",
    "title": "Filter Strings Containing Substring",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a space-separated string of words and a `substring` as input. Output a new space-separated string containing only the words that contain the `substring` (case-sensitive).\n\n**Constraints**\nInput format:\nLine 1: A string of words.\nLine 2: A string (substring).\n\nOutput format:\nA space-separated string of strings.",
    "starter_code": "# Write a program that filters strings containing a substring.",
    "test_cases": [
      {
        "input": [
          "apple banana cherry date",
          "an"
        ],
        "expected_output": "banana"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_427",
    "title": "Print Square of Numbers (Increasing)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `N` as input and prints a square pattern where each row contains numbers from 1 to `N`.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers.",
    "starter_code": "# Write a program that prints a square of numbers (increasing).",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "1 2 3\n1 2 3\n1 2 3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_428",
    "title": "Count Character Frequency in String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the frequency of each character (case-sensitive, excluding spaces and punctuation). Output each character and its count on a new line, separated by a space.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nMultiple lines of character and count.",
    "starter_code": "# Write a program that counts character frequency in a string.",
    "test_cases": [
      {
        "input": [
          "hello"
        ],
        "expected_output": "h 1\ne 1\nl 2\no 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_429",
    "title": "Simple Unit Converter (Inches to Centimeters)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a length in `inches` as input and outputs the equivalent length in centimeters. Use the conversion factor: $1 \\text{ inch} = 2.54 \\text{ centimeters}$. Round to two decimal places.\n\n**Constraints**\nInput will be a positive float.\n\nInput format:\nA float.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that converts inches to centimeters.",
    "test_cases": [
      {
        "input": [
          "10.0"
        ],
        "expected_output": "25.40"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_430",
    "title": "Check if Element Exists (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `element_exists` that takes a list and an element as parameters. Return `True` if the element is found in the list, otherwise `False`.\n\n**Constraints**\nInput parameters can be of any data type.\n\nInput (function call):\n`element_exists([1, 2, 3], 2)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def element_exists(my_list, element):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 3]",
          "2"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_431",
    "title": "Calculate Sum of Even Numbers in Range (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `sum_even_in_range` that takes two integers, `start` and `end`, as parameters and returns the sum of all even numbers within this inclusive range.\n\n**Constraints**\n`start` <= `end`. Input parameters will be integers.\n\nInput (function call):\n`sum_even_in_range(1, 6)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def sum_even_in_range(start, end):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "1",
          "6"
        ],
        "expected_output": "12"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_432",
    "title": "Filter Positive Numbers (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `filter_positive_numbers` that takes a list of integers as a parameter and returns a new list containing only the positive numbers from the original list.\n\n**Constraints**\nInput parameter will be a list of integers.\n\nInput (function call):\n`filter_positive_numbers([-1, 2, -3, 4, 0, 5])`\n\nOutput (return value):\nA list of integers.",
    "starter_code": "def filter_positive_numbers(numbers):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[-1, 2, -3, 4, 0, 5]"
        ],
        "expected_output": "[2, 4, 5]"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_433",
    "title": "Compare Two Strings (Equality)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two strings as input and outputs `True` if they are identical (case-sensitive), otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: String 1.\nLine 2: String 2.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that compares two strings for equality.",
    "test_cases": [
      {
        "input": [
          "Hello",
          "hello"
        ],
        "expected_output": "False"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_434",
    "title": "Check if Prime Number (Simple, Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `is_prime_simple` that takes an integer `num` as a parameter and returns `True` if `num` is a prime number (for simplicity, consider numbers up to 20), otherwise `False`.\n\n**Constraints**\nInput parameter will be an integer between 1 and 20.\n\nInput (function call):\n`is_prime_simple(7)`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def is_prime_simple(num):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_435",
    "title": "Generate Fibonacci Sequence (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `generate_fibonacci` that takes a positive integer `n` as a parameter and returns a list containing the first `n` terms of the Fibonacci sequence. The sequence starts with 0 and 1.\n\n**Constraints**\nInput parameter will be a positive integer up to 10.\n\nInput (function call):\n`generate_fibonacci(5)`\n\nOutput (return value):\nA list of integers.",
    "starter_code": "def generate_fibonacci(n):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "[0, 1, 1, 2, 3]"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_436",
    "title": "Calculate GCD (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `calculate_gcd` that takes two positive integers as parameters and returns their Greatest Common Divisor (GCD) using the Euclidean algorithm.\n\n**Constraints**\nInput parameters will be positive integers.\n\nInput (function call):\n`calculate_gcd(48, 18)`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def calculate_gcd(a, b):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "48",
          "18"
        ],
        "expected_output": "6"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_437",
    "title": "Convert String to Integer (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `string_to_int` that takes a string representation of an integer as a parameter and returns its integer equivalent.\n\n**Constraints**\nInput parameter will be a string containing only digits.\n\nInput (function call):\n`string_to_int(\"123\")`\n\nOutput (return value):\nAn integer.",
    "starter_code": "def string_to_int(s):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "\"123\""
        ],
        "expected_output": "123"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_438",
    "title": "Check if List Contains Duplicates (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `has_duplicates` that takes a list as a parameter and returns `True` if the list contains duplicate elements, otherwise `False`.\n\n**Constraints**\nInput parameter will be a list.\n\nInput (function call):\n`has_duplicates([1, 2, 2, 3])`\n\nOutput (return value):\nA boolean (True/False).",
    "starter_code": "def has_duplicates(my_list):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2, 2, 3]"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_439",
    "title": "Sort List of Strings (Alphabetical, Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `sort_strings_alphabetically` that takes a list of strings as a parameter and returns a new list with the strings sorted in alphabetical order.\n\n**Constraints**\nInput parameter will be a list of strings.\n\nInput (function call):\n`sort_strings_alphabetically([\"banana\", \"apple\", \"cherry\"])`\n\nOutput (return value):\nA list of strings.",
    "starter_code": "def sort_strings_alphabetically(words):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[\"banana\", \"apple\", \"cherry\"]"
        ],
        "expected_output": "[\"apple\", \"banana\", \"cherry\"]"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_440",
    "title": "Concatenate Two Lists (Function)",
    "category": "Decomposition",
    "input_type": "function",
    "description_md": "**Task**\nWrite a function named `concatenate_lists` that takes two lists as parameters and returns a new list containing all elements from both lists, in the order they appeared.\n\n**Constraints**\nInput parameters will be lists.\n\nInput (function call):\n`concatenate_lists([1, 2], [3, 4])`\n\nOutput (return value):\nA list.",
    "starter_code": "def concatenate_lists(list1, list2):\n    # Write your code here",
    "test_cases": [
      {
        "input": [
          "[1, 2]",
          "[3, 4]"
        ],
        "expected_output": "[1, 2, 3, 4]"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_441",
    "title": "Check if All Characters are Alphabetic",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if all characters in the string are alphabetic (a-z, A-Z), otherwise `False`.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if all characters in a string are alphabetic.",
    "test_cases": [
      {
        "input": [
          "HelloWorld"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_442",
    "title": "Sum of First N Natural Numbers (Loop)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a positive integer `N` as input and outputs the sum of the first `N` natural numbers using a loop.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the sum of first N natural numbers using a loop.",
    "test_cases": [
      {
        "input": [
          "4"
        ],
        "expected_output": "10"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_443",
    "title": "Check if String is Alphanumeric",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs `True` if all characters in the string are alphanumeric (letters or numbers), otherwise `False`.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string is alphanumeric.",
    "test_cases": [
      {
        "input": [
          "Python3"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_444",
    "title": "Calculate Weighted Average of Two Scores",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two scores (float) and their corresponding weights (float) as input. Calculate the weighted average. Round to two decimal places.\n\n**Constraints**\nInputs will be floats. Weights sum to 1.\nInput format:\nLine 1: score1 weight1\nLine 2: score2 weight2\n\nOutput format:\nA float.",
    "starter_code": "# Write a program to calculate the weighted average of two scores.",
    "test_cases": [
      {
        "input": [
          "80 0.4",
          "90 0.6"
        ],
        "expected_output": "86.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_445",
    "title": "Check if List Contains Only Even Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if all numbers in the list are even, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a list contains only even numbers.",
    "test_cases": [
      {
        "input": [
          "2 4 6 8"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_446",
    "title": "Print Half Diamond of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints a half diamond pattern of stars. The pattern expands up to `rows` stars and then shrinks.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars.",
    "starter_code": "# Write a program that prints a half diamond pattern of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "*\n**\n***\n**\n*"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_447",
    "title": "Sort List of Integers (Descending)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the list sorted in descending order.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA space-separated string of integers.",
    "starter_code": "# Write a program that sorts a list of integers in descending order.",
    "test_cases": [
      {
        "input": [
          "5 2 8 1 9"
        ],
        "expected_output": "9 8 5 2 1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_448",
    "title": "Calculate Product of List Elements",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the product of all its elements.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that calculates the product of all elements in a list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "24"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_449",
    "title": "Count Lowercase Vowels",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of lowercase vowels (a, e, i, o, u) in that string.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts lowercase vowels in a string.",
    "test_cases": [
      {
        "input": [
          "Hello World"
        ],
        "expected_output": "3"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_450",
    "title": "Calculate Simple Median (Even Length List)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers (sorted) as input. If the list has an even number of elements, output the average of the two middle elements as the median. Round to one decimal place.\n\n**Constraints**\nInput list will have an even number of elements and be sorted.\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates the median of an even-length sorted list.",
    "test_cases": [
      {
        "input": [
          "1 2 3 4"
        ],
        "expected_output": "2.5"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_451",
    "title": "Print Cross Pattern of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer `N` as input and prints a cross pattern of stars with `N` rows and `N` columns.\n\n**Constraints**\nInput will be a positive odd integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that prints a cross pattern of stars.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "* *\n * *\n  *\n * *\n* *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_452",
    "title": "Count Uppercase Vowels",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of uppercase vowels (A, E, I, O, U) in that string.\n\n**Constraints**\nInput will be a single string.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts uppercase vowels in a string.",
    "test_cases": [
      {
        "input": [
          "APPLE BANANA"
        ],
        "expected_output": "4"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_453",
    "title": "Check if String Starts with Specific Character",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a single character as input. Output `True` if the string starts with that character (case-sensitive), otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: The string.\nLine 2: The character.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string starts with a specific character.",
    "test_cases": [
      {
        "input": [
          "Python",
          "P"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_454",
    "title": "Count Numbers Greater Than N in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers and an integer `N` as input. Output the count of numbers in the list that are strictly greater than `N`.\n\n**Constraints**\nInput format:\nLine 1: A space-separated string of integers.\nLine 2: An integer (N).\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts numbers greater than N in a list.",
    "test_cases": [
      {
        "input": [
          "10 20 5 30 15",
          "15"
        ],
        "expected_output": "2"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_455",
    "title": "Print Hollow Diamond of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer `N` as input and prints a hollow diamond pattern of stars with `N` rows.\n\n**Constraints**\nInput will be a positive odd integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that prints a hollow diamond of stars.",
    "test_cases": [
      {
        "input": [
          "5"
        ],
        "expected_output": "  *\n * *\n* *\n * *\n  *"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_456",
    "title": "Calculate Compound Interest (Simplified)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes `principal` (float), `rate` (float as decimal), and `time` (integer in years) as input. Calculate the final amount after compound interest, compounded annually. Formula: $A = P(1 + R)^T$. Round to two decimal places.\n\n**Constraints**\nInputs will be positive numbers.\nInput format:\nLine 1: Principal.\nLine 2: Rate.\nLine 3: Time.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program that calculates compound interest (annually).",
    "test_cases": [
      {
        "input": [
          "1000.0",
          "0.05",
          "2"
        ],
        "expected_output": "1102.50"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_457",
    "title": "Check if String Ends with Specific Character",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string and a single character as input. Output `True` if the string ends with that character (case-sensitive), otherwise `False`.\n\n**Constraints**\nInput format:\nLine 1: The string.\nLine 2: The character.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a string ends with a specific character.",
    "test_cases": [
      {
        "input": [
          "Python",
          "n"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_458",
    "title": "Find Difference Between Max and Min in List",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs the difference between the maximum and minimum values in the list.\n\n**Constraints**\nInput will be a non-empty, space-separated string of integers.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that finds the difference between max and min in a list.",
    "test_cases": [
      {
        "input": [
          "5 12 3 8 9"
        ],
        "expected_output": "9"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_459",
    "title": "Check if Number is Multiple of Both A and B",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes three integers `number`, `A`, and `B` as input. Output `True` if `number` is divisible by both `A` AND `B`, otherwise `False`. Assume `A` and `B` are not zero.\n\n**Constraints**\nInput parameters will be integers.\nInput format:\nLine 1: Number.\nLine 2: A.\nLine 3: B.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a number is a multiple of both A and B.",
    "test_cases": [
      {
        "input": [
          "30",
          "5",
          "6"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_460",
    "title": "Print Inverted Triangle of Numbers (Same Number per Row)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an integer `rows` as input and prints an inverted triangle of numbers. The first row has `rows` repeated `rows` times, decreasing with each row.\n\n**Constraints**\nInput will be a positive integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of numbers and spaces.",
    "starter_code": "# Write a program that prints an inverted triangle of numbers (same number per row).",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "3 3 3\n2 2\n1"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_461",
    "title": "Sort List of Strings by Length (Ascending)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of strings as input and outputs the list sorted by the length of the strings in ascending order.\n\n**Constraints**\nInput format:\nA space-separated string of strings.\n\nOutput format:\nA space-separated string of strings.",
    "starter_code": "# Write a program that sorts a list of strings by length (ascending).",
    "test_cases": [
      {
        "input": [
          "apple date banana cherry"
        ],
        "expected_output": "date apple banana cherry"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_462",
    "title": "Count Consonants in String",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a string as input and outputs the total count of consonants (case-insensitive) in that string.\n\n**Constraints**\nInput will be a single string. Only alphabetic characters will be considered.\n\nInput format:\nA string.\n\nOutput format:\nAn integer.",
    "starter_code": "# Write a program that counts consonants in a string.",
    "test_cases": [
      {
        "input": [
          "Programming"
        ],
        "expected_output": "7"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_463",
    "title": "Basic Calculator (Multiplication/Division)",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes two floats and an operator ('*', '/') as input. Perform the corresponding arithmetic operation and output the result. Round to two decimal places. For division, assume the divisor is not zero.\n\n**Constraints**\nInputs will be floats. Operator will be '*' or '/'.\nInput format:\nLine 1: Number 1.\nLine 2: Number 2.\nLine 3: Operator.\n\nOutput format:\nA float.",
    "starter_code": "# Write a program for a basic calculator (multiplication/division).",
    "test_cases": [
      {
        "input": [
          "10.0",
          "2.0",
          "*"
        ],
        "expected_output": "20.00"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_464",
    "title": "Check if List Contains Only Odd Numbers",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes a list of integers as input and outputs `True` if all numbers in the list are odd, otherwise `False`.\n\n**Constraints**\nInput format:\nA space-separated string of integers.\n\nOutput format:\nA boolean (True/False).",
    "starter_code": "# Write a program that checks if a list contains only odd numbers.",
    "test_cases": [
      {
        "input": [
          "1 3 5 7"
        ],
        "expected_output": "True"
      }
    ],
    "from": "AI"
  },
  {
    "id": "decom_465",
    "title": "Print Solid Diamond of Stars",
    "category": "Decomposition",
    "input_type": "stdin",
    "description_md": "**Task**\nWrite a program that takes an odd integer `N` as input and prints a solid diamond pattern of stars with `N` rows.\n\n**Constraints**\nInput will be a positive odd integer.\n\nInput format:\nAn integer.\n\nOutput format:\nMultiple lines of stars and spaces.",
    "starter_code": "# Write a program that prints a solid diamond of stars.",
    "test_cases": [
      {
        "input": [
          "3"
        ],
        "expected_output": "  *\n ***\n  *"
      }
    ],
    "from": "AI"
  }
]